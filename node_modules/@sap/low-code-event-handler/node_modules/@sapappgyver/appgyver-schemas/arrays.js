const { getIntersectionSchema } = require('./intersection');
const { normalizeSchema } = require('./normalization');
const { getUnionSchema } = require('./union');
const { includesValue } = require('./utils/array');

/**
 * Resolves the schema of items in the array described by the given schema.
 * Returns null if the given parameter does not represent an array of items.
 * @param {object} schema array schema
 */
function getArrayItemSchema(schema) {
  // eslint-disable-next-line no-param-reassign
  schema = normalizeSchema(schema);
  const { anyOf, allOf, type } = schema;
  if (anyOf) {
    if (!anyOf.length) {
      return null;
    }
    const itemSchemas = anyOf.map((subSchema) => getArrayItemSchema(subSchema));
    if (itemSchemas.some((itemSchema) => itemSchema == null)) {
      return null;
    }
    return getUnionSchema(itemSchemas);
  }
  if (allOf) {
    const itemSchemas = allOf.map((subSchema) => getArrayItemSchema(subSchema))
      .filter((itemSchema) => itemSchema != null);
    if (!itemSchemas.length) {
      return null;
    }
    return getIntersectionSchema(itemSchemas);
  }
  if (type === 'value') {
    // Accessing a wildcard type
    return { type: 'value' };
  }
  if (type === 'json') {
    // Accessing a generic JSON type
    return { type: 'json' };
  }
  if (type !== 'array') {
    // Not a valid array type
    return null;
  }
  const exampleArrays = (schema.examples || [])
    .concat([schema.default]);
  const enumArrays = schema.enum;
  let resultSchema = schema.items || {};
  // Get example values from example arrays
  const resultExamples = [];
  exampleArrays.forEach((array) => {
    if (Array.isArray(array)) {
      array.forEach((value) => {
        if (value != null && !includesValue(resultExamples, value)) {
          resultExamples.push(value);
        }
      });
    }
  });
  if (resultExamples.length) {
    resultSchema = { ...resultSchema, examples: resultExamples };
  }
  // Get enum values from enum arrays
  if (enumArrays && enumArrays.every((array) => Array.isArray(array))) {
    const resultEnum = [];
    enumArrays.forEach((array) => {
      array.forEach((value) => {
        if (!includesValue(resultEnum, value)) {
          resultEnum.push(value);
        }
      });
    });
    if (resultEnum.length) {
      resultSchema = { ...resultSchema, enum: resultEnum };
    }
  }
  return resultSchema;
}

module.exports.getArrayItemSchema = getArrayItemSchema;
