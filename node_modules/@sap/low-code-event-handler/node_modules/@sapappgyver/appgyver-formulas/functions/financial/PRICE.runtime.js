const { parseDateTime } = require('../../datetime');
const COUPNUM = require('./COUPNUM.runtime');
const COUPDAYS = require('./COUPDAYS.runtime');
const COUPDAYBS = require('./COUPDAYBS.runtime');
const COUPDAYSNC = require('./COUPDAYSNC.runtime');

module.exports = ([settlement, maturity, rate, fYield, redemption, frequency, convention]) => {
  if (typeof settlement !== 'string' && typeof maturity !== 'string') {
    return null;
  }
  if (typeof frequency !== 'number' && !Number.isFinite(frequency)
    && typeof rate !== 'number' && !Number.isFinite(rate)
    && typeof fYield !== 'number' && !Number.isFinite(fYield)
    && typeof redemption !== 'number' && !Number.isFinite(redemption)) {
    return null;
  }
  if (rate < 0 || fYield < 0 || redemption <= 0) {
    return null;
  }
  const startDate = parseDateTime(settlement);
  const endDate = parseDateTime(maturity);
  if (startDate >= endDate) {
    return null;
  }
  if (startDate.isValid() && endDate.isValid()) {
    const basis = convention || 'us_nasd';
    const valuesBasis = ['us_nasd', 'actual', 'actual_360', 'actual_365', 'european'];
    const valuesPeriod = [1, 2, 4];
    if (!valuesBasis.includes(basis) || !valuesPeriod.includes(frequency)) {
      return null;
    }
    const fE = COUPDAYS([settlement, maturity, frequency, basis]);
    const fDSCE = COUPDAYSNC([settlement, maturity, frequency, basis]) / fE;
    const fN = COUPNUM([settlement, maturity, frequency, basis]);
    const fA = COUPDAYBS([settlement, maturity, frequency, basis]);
    let fRet = redemption / ((1 + fYield / frequency) ** (fN - 1 + fDSCE));
    fRet -= 100 * rate / frequency * fA / fE;
    const fT1 = 100 * rate / frequency;
    const fT2 = 1 + fYield / frequency;
    // eslint-disable-next-line no-plusplus
    for (let fK = 0; fK < fN; fK++) {
      fRet += fT1 / (fT2 ** (fK + fDSCE));
    }
    return fRet;
  }
  return null;
};
