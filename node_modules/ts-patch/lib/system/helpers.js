"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tspPackageJSON = exports.appRoot = exports.defineProperties = exports.getKeys = exports.pick = exports.isAbsolute = void 0;
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
/* ********************************************************************************************************************
 * General Helpers
 * ********************************************************************************************************************/
/**
 * Determine if path is absolute (works on windows and *nix)
 */
var isAbsolute = function (sPath) {
    return path_1.default.resolve(sPath) === path_1.default.normalize(sPath).replace(RegExp(path_1.default.sep + '$'), '');
};
exports.isAbsolute = isAbsolute;
/**
 * Filter object to only include entries by keys (Based on TypeScript Pick)
 * @param obj - Object to filter
 * @param keys - Keys to extract
 * @example
 * let obj = { a: 1, b: 2, c: '3' }     // Type is { a: number, b: number, c: string }
 * obj = pick(obj, 'a', 'b')            // Type is { a: number, c: string }
 */
function pick(obj) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    return __assign({}, keys.reduce(function (p, key) {
        var _a;
        return (__assign(__assign({}, p), (obj.hasOwnProperty(key) && (_a = {}, _a[key] = obj[key], _a))));
    }, {}));
}
exports.pick = pick;
/**
 * Fully typed Object.keys
 */
var getKeys = function (obj) { return Object.keys(obj); };
exports.getKeys = getKeys;
/**
 * Fully typed Object.defineProperties
 */
function defineProperties(obj, properties) {
    return Object.defineProperties(obj, properties);
}
exports.defineProperties = defineProperties;
/* ********************************************************************************************************************
 * TS Patch
 * ********************************************************************************************************************/
/**
 * Root directory for ts-patch
 */
exports.appRoot = (function () {
    var moduleDir = path_1.default.join(__dirname, '../..');
    var chkFile = function (pkgFile) {
        return (fs_1.default.existsSync(pkgFile) && (require(pkgFile).name === 'ts-patch')) ? path_1.default.dirname(pkgFile) : void 0;
    };
    var res = chkFile(path_1.default.join(moduleDir, 'package.json')) || chkFile(path_1.default.join(moduleDir, '../..', 'package.json'));
    if (!res)
        throw new Error("Error getting app root. No valid ts-patch package file found.");
    return res;
})();
/**
 * Package json for ts-patch
 */
exports.tspPackageJSON = require(path_1.default.resolve(exports.appRoot, 'package.json'));
//# sourceMappingURL=helpers.js.map