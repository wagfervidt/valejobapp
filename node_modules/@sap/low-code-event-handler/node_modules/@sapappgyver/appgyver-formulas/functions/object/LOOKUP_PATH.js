const { setRequiredObjectSchemaProperties, resolveObjectMemberAccessor, getUnionSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./LOOKUP_PATH.runtime');

const flatMap = (arr, cb) => (arr.flatMap ? arr.flatMap(cb) : [].concat(...arr.map(cb)));

const resolveObjectSchemas = (schema) => {
  if (!schema.properties) {
    return schema;
  }

  return [{ type: 'object' }].concat(
    flatMap(Object.values(schema.properties), prop => resolveObjectSchemas(prop)),
  );
};

module.exports = {
  name: 'LOOKUP_PATH',
  category: 'Object',
  title: 'Get object property with path',
  description:
    'Returns the value associated with the given key path in the given object.',
  parameters: [
    {
      type: 'object',
      title: 'Object',
      description: 'Object whose property will be get',
    },
    {
      title: 'Property path',
      description: 'List of property keys leading to the object property we want to take value from',
      type: 'array',
      items: {
        type: 'string',
      },
    },
  ],
  analyze: ([objectParam, propPathParam], offset, parameterErrors) => {
    const pathSchema = (propPathParam && propPathParam.schema) || { type: 'array' };
    const propPaths = pathSchema && pathSchema.enum;

    if (parameterErrors.length || !objectParam || !objectParam.schema) {
      return { schema: { type: 'undefined' } };
    }

    if (propPaths) {
      const schemas = propPaths.map(propNames => propNames.reduce((accumulator, pathPart) => {
        if (accumulator.errors.length > 0) {
          return accumulator;
        }
        return resolveObjectMemberAccessor(accumulator.schema, { type: 'string', enum: [pathPart] });
      }, { schema: objectParam.schema, errors: [] }));
      return {
        schema: getUnionSchema(schemas.map(s => s.schema).filter(s => s)) || { type: 'undefined' },
        errors: flatMap(schemas, ({ errors }) => errors.map(error => ({
          ...error, offset: propPathParam.offset,
        }))),
      };
    }

    if (objectParam.schema.additionalProperties) {
      return { schema: objectParam.schema.additionalProperties };
    }

    if (objectParam.schema.properties) {
      return {
        schema: getUnionSchema(resolveObjectSchemas(objectParam.schema)),
      };
    }

    return {
      // Don't know exact properties to be picked => make all optional
      schema: setRequiredObjectSchemaProperties(objectParam.schema, []),
    };
  },
  execute,
  examples: [
    {
      expression: 'LOOKUP_PATH(customer, ["address", "street"])',
      context: {
        customer: {
          name: 'Jane Doe',
          address: {
            street: 'Main road 123',
            city: 'Best Town',
          },
        },
      },
      result: 'Main road 123',
    },
    {
      expression: 'LOOKUP_PATH(customer, ["address", "city"])',
      context: {
        customer: {
          name: 'Jane Doe',
          address: {
            street: 'Main road 123',
            city: 'Best Town',
          },
        },
      },
      result: 'Best Town',
    },
    {
      expression: 'LOOKUP_PATH(customer, ["name"])',
      context: {
        customer: {
          name: 'Jane Doe',
          address: {
            street: 'Main road 123',
            city: 'Best Town',
          },
        },
      },
      result: 'Jane Doe',
    },
  ],
};
