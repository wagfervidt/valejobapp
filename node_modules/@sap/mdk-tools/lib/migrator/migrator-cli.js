#!/usr/bin/env node
const path = require("path");
const fs = require('fs-extra');
const {MigrationHelper} = require('./metadata-migrator/migrate-helper');
const { getMDKTools } = require('../utils');
const toolUtils = require('../tool-utils');
const migratorArgs = require('./migrator-args');
const exec = toolUtils.exec;

const sMDKTools = getMDKTools();
const logFilePath = migratorArgs.logFile();

function doMigrate() {
    let targetVersion = migratorArgs.targetVersion();
    let isPreview = migratorArgs.preview();
    let appBasePath = migratorArgs.project();
    let bCheckScript = !migratorArgs.uncheckScript();
    
    let cmdRet;
    let output = [];
    let scriptFilesCount = 0;
    let _appBasePath = appBasePath;

    if (bCheckScript) {
        // 1. migrate script files
        let previewOption = "";
        if (isPreview) {
            const tempFolder = toolUtils.getTempDirectory("mdk_migration");
            if (!fs.existsSync(tempFolder)) {
                fs.mkdirSync(tempFolder);
            }
            _appBasePath = path.resolve(tempFolder, path.basename(appBasePath));
            previewOption = `-o ${tempFolder}`;
        }
        cmdRet = exec(`${sMDKTools} migrate-script -s "${appBasePath}" ${previewOption}`);
    }

    // 2. migrate metadata files (including target path migration)
    let oMigrationHelper = new MigrationHelper(_appBasePath, targetVersion);
    return oMigrationHelper.init().then(() => {
        if (bCheckScript && isPreview) {
            isPreview = false;
        }
        return oMigrationHelper.check(isPreview);
    }).then(rst => {
        let oMigration = rst.migration;
        if (cmdRet) {
            cmdRet.toString().split('\n').forEach(item => {
                if (item && (item.startsWith("Updated") || item.startsWith("Removed"))) {
                    let filePath = item.replace("Updated ", "").replace("Removed ", "");
                    if (oMigration.indexOf(filePath) === -1) {
                        // do not count the duplicate files
                        scriptFilesCount++;
                    }
                    output.push(item);                    
                }
            });
        }
        output = rst.output.concat(output);
        if (output.length === 0) {
            console.log("\nNo files need to be migrated");
        } else {
            output.unshift("\n----------Migration result----------");
            console.log(output.join('\n'));
        }
        if (logFilePath) {
            try {
                let content = `A total of migration files: ${oMigration.length + scriptFilesCount}\n${output.join('\n\n')}`;
                fs.appendFileSync(logFilePath, content);
            } catch (err) {
                console.error(`Failed to write output to the file "${logFilePath}"`);
            }
        }
    });
}

module.exports = { doMigrate };