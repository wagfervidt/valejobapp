const { getSchemaAssignmentErrors } = require('@sapappgyver/appgyver-schemas');
const execute = require('./IS_EQUAL.runtime');

module.exports = {
  name: 'IS_EQUAL',
  category: 'Utility',
  title: 'Check if values are equal',
  description: 'Returns `true` if the both parameter values are equal, otherwise `false`. '
    + 'Same than using the `==` operator in formulas.\n\n'
    + 'The values are considered equal if they are of the same type and represent the same value. '
    + 'If the values are objects or arrays, a deep comparison is performed. '
    + 'Objects are considered equal if they have the same properties. '
    + 'Arrays are considered equal if they have equal items in the same order.\n\n'
    + 'Note that `null` and `undefined` are *not* equal. '
    + 'Also note that a number, e.g. `5` and its text representation `"5"` are *not* equal.',
  parameters: [{
    title: 'Value 1',
    description: 'First value to compare',
  }, {
    title: 'Value 2',
    description: 'Second value to compare',
  }],
  analyze: ([param1, param2], offset, parameterErrors) => {
    const schema = { type: 'boolean' };
    let errors = [];
    if (!parameterErrors.length) {
      const param1Errors = getSchemaAssignmentErrors(param1.schema, param2.schema);
      const param2Errors = getSchemaAssignmentErrors(param2.schema, param1.schema);
      if (param1Errors.length && param2Errors.length) {
        errors = param2Errors.map(error => ({ ...error, offset: param2.offset }));
      }
    }
    return { schema, errors };
  },
  execute,
  examples: [
    { expression: 'IS_EQUAL("cat", "cat")', result: true },
    { expression: 'IS_EQUAL({name: "John"}, {name: "John"})', result: true },
    { expression: 'IS_EQUAL(["cat"], ["cat"])', result: true },
  ],
};
