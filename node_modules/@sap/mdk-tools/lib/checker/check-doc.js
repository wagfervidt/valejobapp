const fs = require('fs-extra');
const path = require('path');
const DOCUMENT_CONTROL = "Control.Type.FormCell.Document";
const ENALBE_LOG = false;
let instance;
class Checker {

    constructor(args) {
        this.checkArgs = args;
        instance = this;
    }
    /**
     * This is the main entry point into the check metadata files
     *
     */
    check() {
        return instance._checkDocumentControl()
            .then((ret) => {
                console.log(ret);
                return ret;
            })
            .catch(error => { 
                return Promise.reject(error);
            });
    }

    _checkDocumentControl() {
        return new Promise(function (resolve, reject) {
            let pagePath = path.join(instance.checkArgs.project(),"Pages");
            if (fs.existsSync(pagePath)) {
                const aFiles = instance._getAllFiles(pagePath);
                let bHasPage = false;
                for (let i=0; i<aFiles.length; i++) {
                    if (ENALBE_LOG) console.log('checking file: '+aFiles[i]);
                    bHasPage = instance._hasDocumentControlInFile(aFiles[i]);
                    if (bHasPage) break;
                }
                resolve(bHasPage);
            } else {
                resolve(false);
            }
        });
    }

    _getAllFiles(dirPath, arrayOfFiles) {
        const files = fs.readdirSync(dirPath)    
        arrayOfFiles = arrayOfFiles || []      
        files.forEach(function(file) {
          if (fs.statSync(dirPath + path.sep + file).isDirectory()) {
            arrayOfFiles = instance._getAllFiles(dirPath + path.sep + file, arrayOfFiles)
          } else {
            arrayOfFiles.push(path.join(dirPath, path.sep, file))
          }
        })  
        return arrayOfFiles
      }

      _hasDocumentControlInFile(filePath){
          try {
            const oPage = fs.readJSONSync(filePath);
            instance._hasDocument =false;
            instance._checkDocumentControlInObject(oPage);
            return instance._hasDocument;
          } catch(e){
            return false;
          }
      }

      _checkDocumentControlInObject(oControl){
        if (oControl["_Type"] === DOCUMENT_CONTROL) {
            instance._hasDocument =true; 
            return;
        }
        for (let key in oControl) {
            if (oControl.hasOwnProperty(key)) { 
                if (ENALBE_LOG) console.log('checking '+key);
                if (typeof oControl[key]==='object') {
                    instance._checkDocumentControlInObject(oControl[key]);
                }
            }
        }
        return;
    }
}
exports.Checker = Checker;