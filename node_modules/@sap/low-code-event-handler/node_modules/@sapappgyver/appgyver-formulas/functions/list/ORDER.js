const { getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./ORDER.runtime');

module.exports = {
  name: 'ORDER',
  category: 'List',
  title: 'Sort a list',
  description: `Sorts a list using a formula that is evaluated for each item in the list. Returns the sorted list.

The formula should result to a comparable value (a text or a number) that is used to determine the order of the items.
By default the items are sorted in ascending order. By providing the 3rd parameter you can choose the direction.

If multiple values have the same ordering value, their original order will be preserved.

Note that for text values, the ordering is case-sensitive. If you want a case-insensitive ordering, you may for example wrap your ordering formula with \`LOWERCASE\` function.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items to sort',
    inversible: true,
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'function',
    title: 'Sorting criteria',
    description: 'Formula evaluated for each item in the list, used to determine the ordering value for the item',
    parameters: [{
      name: 'item',
      title: 'Current item',
      description: 'The current item from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The original position of the current item in the list as an index number starting from 0',
      examples: [0, 1, 2],
    }],
    returnValue: {
      title: 'Ordering value',
      description: 'A value that is used to determine the position of the current item in the result list',
      anyOf: [{
        type: 'string',
      }, {
        type: 'number',
      }],
    },
  }, {
    type: 'string',
    enum: ['asc', 'desc'],
    default: 'asc',
    title: 'Sort direction',
    description: 'Direction of the ordering. Use either `"asc"` meaning ascending order (smallest first) or `"desc"` meaning descending order (greatest first).',
  }],
  maxInversions: 1,
  analyze: ([arrayParam]) => {
    const itemSchema = arrayParam && getArrayItemSchema(arrayParam && arrayParam.schema);
    return {
      schema: !itemSchema ? { type: 'array' } : {
        type: 'array', items: itemSchema,
      },
    };
  },
  execute,
  examples: [
    {
      expression: 'ORDER(animals, item.weight)',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
          { name: 'pig', weight: 123 },
        ],
      },
      result: [
        { name: 'rat', weight: 10 },
        { name: 'cat', weight: 48 },
        { name: 'dog', weight: 123 },
        { name: 'pig', weight: 123 },
      ],
    },
    {
      expression: 'ORDER(animals, item.weight, "desc")',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
          { name: 'pig', weight: 123 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'pig', weight: 123 },
        { name: 'cat', weight: 48 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'ORDER<animal>(animals, animal.weight, "asc")',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
          { name: 'pig', weight: 123 },
        ],
      },
      result: [
        { name: 'rat', weight: 10 },
        { name: 'cat', weight: 48 },
        { name: 'dog', weight: 123 },
        { name: 'pig', weight: 123 },
      ],
    },
  ],
};
