const {
  getArrayItemSchema, simplifySchema, getSchemaAssignmentErrors, getUnionSchema,
} = require('@sapappgyver/appgyver-schemas');
const execute = require('./SET_ITEM_AT.runtime');

module.exports = {
  name: 'SET_ITEM_AT',
  category: 'List',
  title: 'Updates an index in list',
  description: `Sets a value in the given list at the given index to a new value. Returns a list where the item at the index has been replaced with a new value.
Alternatively, if the array is shorter than the given index, then its length is increased, filling the new indexes with undefined values.

If the index is negative, then the position is calculated from the end of the array, so that -1 means the last index, etc.

The 3rd parameter defines either the value to be set at the index, or a formula that can use the existing item at the index and result in a new value.
For example, the formula can use \`SET_KEY\` function to update a property of an existing item to a new value.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'number',
    title: 'Index',
    description: 'Index of the list, starting from 0, defining the position at which to set the new value.',
  }, {
    type: 'function',
    title: 'New item formula',
    description: 'A new item to be set at the index replacing any previous item, or a formula to be evaluated using the existing item for the replacement value',
    parameters: [{
      name: 'item',
      title: 'Matching item',
      description: 'The existing item at the index in the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position in the list where the new value will be set',
      examples: [0, 1, 2],
    }],
    returnValue: {
      title: 'New item',
      description: 'The new value to be set at the index in the result array, replacing any existing item',
    },
  }],
  analyze: ([arrayParam, , replacementParam]) => {
    const arraySchema = arrayParam && arrayParam.schema;
    const replacementSchema = replacementParam && replacementParam.schema;
    // NOTE: Not using the parameter type directly, as it might contain enum or examples
    // that are no longer valid.
    const schema = { type: 'array' };
    const errors = [];
    if (arraySchema) {
      const arrayItemSchema = getArrayItemSchema(arraySchema) || {};
      const simpleArrayItemSchema = simplifySchema(arrayItemSchema, {});
      if (replacementParam) {
        const replacementOffset = replacementParam.offset;
        const replacementLength = replacementParam.length;
        const replacementErrors = getSchemaAssignmentErrors(
          replacementSchema, simpleArrayItemSchema, { tolerant: true },
        );
        errors.push(...replacementErrors.map(error => ({
          ...error,
          offset: replacementOffset,
          length: replacementLength,
        })));
      }
      schema.items = getUnionSchema([arrayItemSchema, replacementSchema]);
    }
    return { schema, errors };
  },
  execute,
  examples: [
    {
      expression: 'SET_ITEM_AT(animals, 1, { name: "horse", weight: 600 })',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'horse', weight: 600 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM_AT(animals, 1, SET_KEY(item, "weight", 23))',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'cat', weight: 23 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM_AT(animals, -1, SET_KEY(item, "name", "horse"))',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'cat', weight: 48 },
        { name: 'horse', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM_AT<product>(products, 0, SET_KEY(product, "price", product.price * 2))',
      context: {
        products: [
          { name: 'Duct tape', price: 2.9 },
          { name: 'Swiss army knife', price: 23 },
          { name: 'Glue', price: 1.5 },
        ],
      },
      result: [
        { name: 'Duct tape', price: 5.8 },
        { name: 'Swiss army knife', price: 23 },
        { name: 'Glue', price: 1.5 },
      ],
    },
    {
      expression: 'SET_ITEM_AT<letter, position>(["a", "b", "c", "d", "e"], -2, UPPERCASE(letter) + "!")',
      result: ['a', 'b', 'c', 'D!', 'e'],
    },
    {
      expression: 'SET_ITEM_AT(["a", "b"], 5, "c")',
      result: ['a', 'b', undefined, undefined, undefined, 'c'],
    },
  ],
};
