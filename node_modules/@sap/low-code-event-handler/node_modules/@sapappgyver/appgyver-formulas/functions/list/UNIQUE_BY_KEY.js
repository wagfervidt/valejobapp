const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./UNIQUE_BY_KEY.runtime');

module.exports = {
  name: 'UNIQUE_BY_KEY',
  category: 'List',
  title: 'Find unique objects by a key',
  description: `Returns the original list where any object duplicates by the given key are removed.

For example, given a list of objects and **Key** \`id\`, would return an array where items that have duplicate \`id\` property values are removed.

The object with the first unique value is always picked into the returned array, with subsequent occurences of the same value treated as duplicates and discarded.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to find objects',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key for compare',
    type: 'string',
  }],
  analyze: ([arrayParam, keyParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || {};
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length
        ? []
        : keyErrors.map(error => ({ ...error, offset: keyParam.offset })),
    };
  },
  execute,
  examples: [
    {
      expression: 'UNIQUE_BY_KEY(array1, key)',
      context: {
        array1: [{ a: 3 }, { a: 2 }, { a: 2, b: 3 }, { a: 2, b: 5 }],
        key: 'a',
      },
      result: [{ a: 3 }, { a: 2 }],
    },
    {
      expression: 'UNIQUE_BY_KEY(array2, key)',
      context: {
        array2: [{ a: { b: 20 } }, { a: { b: 10 } }, { a: { b: 10 } }],
        key: 'a',
      },
      result: [{ a: { b: 20 } }, { a: { b: 10 } }],
    },
  ],
};
