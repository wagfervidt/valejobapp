const { resolveObjectMemberAccessor, getSchemaAssignmentErrors, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./REMOVE_ITEM_BY_KEY.runtime');

module.exports = {
  name: 'REMOVE_ITEM_BY_KEY',
  category: 'List',
  title: 'Remove objects from list by a key',
  description: `Finds an object by a key-value pair and returns a list which doesn't contain the matched object.

For example, given **Key** \`"id"\` and **Value** \`123\`, will return a list without the object whose \`id\` property is \`123\`.

If a matching object cannot be found, the original list is returned unmodified.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to remove object from',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to match',
    type: 'string',
  }, {
    title: 'Value',
    description: 'Value to match',
  }],
  analyze: ([arrayParam, keyParam, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
      schema: keyItemSchema,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    const itemSchema = (itemParam && itemParam.schema) || {};
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, keyItemSchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...keyErrors.map(error => ({
          ...error, offset: keyParam.offset,
        })),
        ...assignmentErrors.map(error => ({
          message: error.message, offset: itemParam.offset,
        })),
      ],
    };
  },
  execute,
  examples: [
    {
      expression: 'REMOVE_ITEM_BY_KEY(array1, "a", 2)',
      context: {
        array1: [{ a: 1 }, { a: 2 }, { a: 3 }],
      },
      result: [{ a: 1 }, { a: 3 }],
    },
    {
      expression: 'REMOVE_ITEM_BY_KEY(array2, "a", { b: 10 })',
      context: {
        array2: [{ a: 3 }, { a: { b: 10 } }],
      },
      result: [{ a: 3 }],
    },
    {
      expression: 'REMOVE_ITEM_BY_KEY(array3, "a", 4)',
      context: {
        array3: [{ a: 3 }, { a: 2 }],
      },
      result: [{ a: 3 }, { a: 2 }],
    },
  ],
};
