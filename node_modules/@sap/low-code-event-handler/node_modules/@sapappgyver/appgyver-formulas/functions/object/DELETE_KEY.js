const { resolveObjectMemberAccessor } = require('@sapappgyver/appgyver-schemas');
const { includesValue } = require('@sapappgyver/appgyver-schemas/utils/array');
const execute = require('./DELETE_KEY.runtime');

module.exports = {
  name: 'DELETE_KEY',
  category: 'Object',
  title: 'Get a property of an object',
  description: 'Returns an object that contains all other properties of the given object parameter except the given key.',
  parameters: [{
    type: 'object',
    title: 'Object',
    description: 'Object whose property will be get',
  }, {
    type: 'string',
    title: 'Property name',
    description: 'Name of the property to not take from object',
  }],
  analyze: ([object, propNameParam], offset, parameterErrors) => {
    const objectSchema = object ? object.schema : { type: 'object' };
    const accessorSchema = (propNameParam && propNameParam.schema) || {};
    if (parameterErrors.length || !objectSchema.properties) {
      return {
        schema: {
          type: 'object',
        },
      };
    }
    const { errors } = resolveObjectMemberAccessor(objectSchema, accessorSchema);
    if (errors.length) {
      return {
        schema: {
          type: 'object',
        },
        errors: errors.map(error => ({
          ...error, offset: propNameParam.offset,
        })),
      };
    }
    const propertyNames = accessorSchema.enum;
    if (!propertyNames) {
      return {
        schema: { ...objectSchema, required: [] },
      };
    }
    if (!objectSchema.properties || !propertyNames.length) {
      return { schema: objectSchema };
    }
    const { required } = objectSchema;
    if (!propertyNames.length) {
      return { schema: objectSchema };
    }
    const properties = { ...objectSchema.properties };
    if (propertyNames.length > 1) {
      return {
        schema: {
          ...objectSchema,
          type: 'object',
          required: (required || Object.keys(properties)).filter(
            prop => !includesValue(propertyNames, prop),
          ),
        },
      };
    }
    const [propertyName] = propertyNames;
    delete properties[propertyName];
    const schema = {
      ...objectSchema,
      type: 'object',
      properties,
    };
    if (required) {
      schema.required = required.filter(prop => prop !== propertyName);
    }
    return { schema };
  },
  execute,
  examples: [
    {
      expression: 'DELETE_KEY({a: "A", b: "B", c: "C"}, "a")',
      result: { b: 'B', c: 'C' },
    },
    {
      expression: 'DELETE_KEY(animal, "weight")',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: {
        name: 'dog', active: false, children: 0,
      },
    },
  ],
};
