"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIdenticalTenant = exports.getTenantIdWithFallback = void 0;
const jwt_1 = require("./jwt");
const subdomain_replacer_1 = require("./subdomain-replacer");
/**
 * Get the tenant ID of a decoded JWT, based on its `zid` property or, if not available, the `iss` subdomain.
 * @param token - Token to read the tenant ID from.
 * @returns The tenant ID, if available.
 * @internal
 */
function getTenantIdWithFallback(token) {
    const decodedJwt = token ? (0, jwt_1.decodeJwt)(token) : {};
    return (0, jwt_1.tenantId)(decodedJwt) || (0, subdomain_replacer_1.getIssuerSubdomain)(decodedJwt) || undefined;
}
exports.getTenantIdWithFallback = getTenantIdWithFallback;
/**
 * Compare two decoded JWTs based on their `tenantId`s.
 * @param userTokenPayload - User JWT payload.
 * @param providerTokenPayload - Provider JWT payload.
 * @returns Whether the tenant is identical.
 * @internal
 */
function isIdenticalTenant(userTokenPayload, providerTokenPayload) {
    return (0, jwt_1.tenantId)(userTokenPayload) === (0, jwt_1.tenantId)(providerTokenPayload);
}
exports.isIdenticalTenant = isIdenticalTenant;
//# sourceMappingURL=tenant.js.map