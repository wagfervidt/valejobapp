#!/usr/bin/env node
/* eslint-disable no-console */
/**
 * Parses and evaluates the given expression (1st parameter),
 * optionally using the given context object (2nd parameter).
 */
const path = require('path');
const { evaluateExpression } = require('../index');
const { parseExpression } = require('../parser');
const { prepareExecutable } = require('../runtime');

function parseContext(json) {
  try {
    return JSON.parse(json);
  } catch (err) {
    return evaluateExpression(json, {});
  }
}

function popFlagArgument(args, flag) {
  const index = args.indexOf(flag);
  if (index >= 0) {
    args.splice(index, 1);
  }
  return index >= 0;
}

function main(cmd, ...args) {
  const profile = popFlagArgument(args, '--profile');
  const [formula, contextJson, ...extra] = args;
  if (formula == null || extra.length) {
    console.error(`Usage: ${cmd} <FORMULA> [<CONTEXT_JSON>] [--profile]`);
    process.exit(1);
  } else {
    const context = contextJson ? parseContext(contextJson, {}) : {};
    if (context == null || typeof context !== 'object' || Array.isArray(context)) {
      throw new Error('Context parameter must define an object');
    }
    const parseStart = new Date().getTime();
    const parsedExpression = parseExpression(formula);
    const parseEnd = new Date().getTime();
    if (profile) {
      console.error(`Parse duration: ${parseEnd - parseStart}ms`);
    }
    if (parsedExpression.syntaxErrors.length) {
      parsedExpression.syntaxErrors.forEach(({ offset, message }) => {
        console.error(`Syntax error at ${offset}: ${message}`);
      });
      process.exit(2);
    }
    const prepareStart = new Date().getTime();
    const executable = prepareExecutable(parsedExpression.export(), context);
    const prepareEnd = new Date().getTime();
    if (profile) {
      console.error(`Preparation duration: ${prepareEnd - prepareStart}ms`);
    }
    const executeStart = new Date().getTime();
    const result = executable.execute();
    const executeEnd = new Date().getTime();
    if (profile) {
      console.error(`Execution duration: ${executeEnd - executeStart}ms\n`);
    }
    console.log(JSON.stringify(result));
  }
}

main(`./${path.relative(process.cwd(), __filename)}`, ...process.argv.slice(2));
