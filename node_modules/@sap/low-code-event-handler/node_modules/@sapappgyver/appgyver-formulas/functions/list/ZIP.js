const { getUnionSchema, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./ZIP.runtime');

module.exports = {
  name: 'ZIP',
  category: 'List',
  title: 'Zip two lists together',
  description: `Given two lists, returns a list of lists, where the first list contains the first items of the source lists, the second list contains the second items and so on.

If the lists don't have an equal number of items, the extra items are discarded.`,
  parameters: [{
    type: 'array',
    title: 'List 1',
    description: 'First list to zip',
    inversible: true,
  }, {
    type: 'array',
    title: 'List 2',
    description: 'Second list to zip',
    inversible: true,
  }],
  maxInversions: 2,
  analyze: ([arrayParam1, arrayParam2]) => {
    const arrayParamSchema1 = (arrayParam1 && arrayParam1.schema) || { type: 'array' };
    const arrayParamSchema2 = (arrayParam2 && arrayParam2.schema) || { type: 'array' };
    const arrayItems1 = getArrayItemSchema(arrayParamSchema1) || {};
    const arrayItems2 = getArrayItemSchema(arrayParamSchema2) || {};
    const unionItemsSchema = getUnionSchema([arrayItems1, arrayItems2]);
    return { schema: { type: 'array', items: unionItemsSchema } };
  },
  execute,
  examples: [
    {
      expression: 'ZIP(numbers, numbers2)',
      context: {
        numbers: [100, 3, 20, 50],
        numbers2: [1, 2, 3],
      },
      result: [[100, 1], [3, 2], [20, 3]],
    },
    {
      expression: 'ZIP(numbers, strings)',
      context: {
        numbers: [100, 3, 20, 50],
        strings: ['a', 'b'],
      },
      result: [[100, 'a'], [3, 'b']],
    },
    {
      expression: 'ZIP(numbers, emptyArray)',
      context: {
        numbers: [100, 3, 20, 50],
        emptyArray: [],
      },
      result: [],
    },
  ],
};
