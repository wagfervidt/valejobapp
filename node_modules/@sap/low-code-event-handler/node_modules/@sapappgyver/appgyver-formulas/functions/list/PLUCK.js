const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./PLUCK.runtime');

module.exports = {
  name: 'PLUCK',
  category: 'List',
  title: 'Get a property of each object in a list',
  description: `Gets the values for each object in the given list by the given key, and returns a list with those values, in the corresponding order.

For example, if you have a list of people as objects, you can get the name of each person by providing the list as the first parameter, and the key name \`"name"\` as the second parameter.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of objects whose properties to get',
    inversible: true,
    items: {
      type: 'object',
    },
  }, {
    type: 'string',
    title: 'Key',
    description: 'Name of the key whose value to take from each object',
  }],
  maxInversions: 1,
  analyze: ([arrayParam, propNameParam], offset, parameterErrors) => {
    const itemSchema = getArrayItemSchema(arrayParam && arrayParam.schema) || {};
    const accessorSchema = (propNameParam && propNameParam.schema) || {};
    const { schema, errors } = resolveObjectMemberAccessor(itemSchema, accessorSchema);
    const arraySchema = schema ? { type: 'array', items: schema } : { type: 'array' };
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : errors.map(error => ({
        ...error, offset: propNameParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'PLUCK(products, "price")',
      context: {
        products: [
          { name: 'Duct tape', price: 5 },
          { name: 'Swiss army knife', price: 60 },
        ],
      },
      result: [5, 60],
    },
    {
      expression: 'PLUCK(animals, "name")',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: ['dog', 'cat', 'rat'],
    },
  ],
};
