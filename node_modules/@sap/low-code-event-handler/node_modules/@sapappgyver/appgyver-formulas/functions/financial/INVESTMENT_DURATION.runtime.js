const { parseDateTime } = require('../../datetime');
const YEARFRAC = require('../date/YEARFRAC.runtime');
const COUPNUM = require('./COUPNUM.runtime');

module.exports = ([settlement, maturity, rate, fYield, frequency, convention]) => {
  if (typeof settlement !== 'string' && typeof maturity !== 'string') {
    return null;
  }
  if (typeof frequency !== 'number' && !Number.isFinite(frequency)
    && typeof rate !== 'number' && !Number.isFinite(rate)
    && typeof fYield !== 'number' && !Number.isFinite(fYield)) {
    return null;
  }
  if (rate < 0 || fYield < 0) {
    return null;
  }
  const startDate = parseDateTime(settlement);
  const endDate = parseDateTime(maturity);
  if (startDate >= endDate) {
    return null;
  }
  if (startDate.isValid() && endDate.isValid()) {
    const basis = convention || 'us_nasd';
    const valuesBasis = ['us_nasd', 'actual', 'actual_360', 'actual_365', 'european'];
    const valuesPeriod = [1, 2, 4];
    if (!valuesBasis.includes(basis) || !valuesPeriod.includes(frequency)) {
      return null;
    }
    const fYearfrac = YEARFRAC([settlement, maturity, basis]);
    const fNumOfCoups = COUPNUM([settlement, maturity, frequency, basis]);
    let fDur = 0;
    const f100 = 100;
    const fCoup = rate * f100 / frequency;
    let funcYield = fYield / frequency;
    funcYield += 1;
    const nDiff = fYearfrac * frequency - fNumOfCoups;
    // eslint-disable-next-line no-plusplus
    for (let t = 1; t < fNumOfCoups; t++) {
      fDur += (t + nDiff) * fCoup / (funcYield ** (t + nDiff));
    }
    fDur += (fNumOfCoups + nDiff) * (fCoup + f100) / (funcYield ** (fNumOfCoups + nDiff));
    let p = 0;
    // eslint-disable-next-line no-plusplus
    for (let t = 1; t < fNumOfCoups; t++) {
      p += fCoup / (funcYield ** (t + nDiff));
    }
    p += (fCoup + f100) / (funcYield ** (fNumOfCoups + nDiff));
    fDur /= p;
    fDur /= (frequency);

    return fDur;
  }
  return null;
};
