const { getUnionSchema, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./CONCAT.runtime');

module.exports = {
  name: 'CONCAT',
  category: 'List',
  title: 'Concatenate two lists',
  description: `Concatenates two lists, returning an list that has all items from the first list followed by all the items from the second list.

The order of the elements in the source lists will not be changed, with the elements in the second list placed after the elements in the first list.`,
  parameters: [{
    type: 'array',
    title: 'List 1',
    description: 'First list',
  }, {
    type: 'array',
    title: 'List 2',
    description: 'Second list',
  }],
  analyze: (parameters) => {
    const results = parameters.slice(0, 2);
    const itemSchemas = results.map(({ schema }) => getArrayItemSchema(schema));
    const itemSchema = getUnionSchema(itemSchemas);
    const schema = { type: 'array' };
    if (itemSchema) {
      schema.items = itemSchema;
    }
    return { schema };
  },
  execute,
  examples: [
    { expression: 'CONCAT([100, 3, 20], [1, 2, 3])', result: [100, 3, 20, 1, 2, 3] },
    { expression: 'CONCAT([100, 3, 20], ["a", "b"])', result: [100, 3, 20, 'a', 'b'] },
    { expression: 'CONCAT([], [])', result: [] },
  ],
};
