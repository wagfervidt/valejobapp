const average = require('./AVERAGE.runtime');
const stdev = require('./STDEV.runtime');
const tDistRT = require('./T_DIST_RT.runtime');
const tDist2T = require('./T_DIST_2T.runtime');

const tTest = (rangeY, rangeX, tails, calcType) => {
  const meanX = average([rangeX]);
  const meanY = average([rangeY]);

  let tScore = null;
  let dof = null;

  const sX = rangeX.reduce((total, item) => total + ((item - meanX) ** 2), 0) / (rangeX.length - 1);
  const sY = rangeY.reduce((total, item) => total + ((item - meanY) ** 2), 0) / (rangeY.length - 1);

  if (calcType === 1) {
    if (rangeX.length !== rangeY.length) {
      return null;
    }
    const diffs = rangeY.map((itemY, index) => {
      const itemX = rangeX[index];
      return itemY - itemX;
    });

    const averageD = average([diffs]);
    const stErr = stdev([diffs]) / Math.sqrt(diffs.length);
    tScore = Math.abs(averageD / stErr);
    dof = rangeX.length - 1;
  }

  if (calcType === 2) {
    const sP = Math.sqrt(sX / rangeX.length + sY / rangeY.length);
    tScore = Math.abs(meanX - meanY) / sP;
    dof = rangeX.length + rangeY.length - 2;
  }

  if (calcType === 3) {
    const sP = Math.sqrt(sX / rangeX.length + sY / rangeY.length);
    tScore = Math.abs(meanX - meanY) / sP;
    const dfUp = (sX / rangeX.length + sY / rangeY.length) ** 2;
    const dfLow = (((sX / rangeX.length) ** 2) / (rangeX.length - 1))
      + (((sY / rangeY.length) ** 2) / (rangeY.length - 1));
    dof = dfUp / dfLow;
  }

  if (Number.isFinite(tScore)) {
    if (tails === 1) {
      return tDistRT([tScore, dof]);
    }
    if (tails === 2) {
      return tDist2T([tScore, dof]);
    }
  }
  return null;
};

module.exports = ([array1, array2, tails, testType]) => {
  if (!Array.isArray(array1) || !Array.isArray(array2)) {
    return null;
  }
  if (typeof tails !== 'number' || !Number.isFinite(tails)) {
    return null;
  }
  if (typeof testType !== 'number' || !Number.isFinite(testType)) {
    return null;
  }

  if (!(tails === 1 || tails === 2)) {
    return null;
  }

  if (!(testType === 1 || testType === 2 || testType === 3)) {
    return null;
  }

  const range1 = array1.filter(item => (typeof item === 'number' && Number.isFinite(item)));
  const range2 = array2.filter(item => (typeof item === 'number' && Number.isFinite(item)));

  const result = tTest(range1, range2, tails, testType);
  return Number.isFinite(result) ? result : null;
};
