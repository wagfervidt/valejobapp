const logger = require('../logger');
const execSync = require('child_process').execSync;
const fs = require('fs-extra');
const path = require('path');
const qrcode = require('qrcode');

const utils = require('../utils');
let instance;
let childProcessExecOption;

class DeployCF {

    constructor(args) {
        this.deployArgs = args;
        instance = this;
        instance._startUrl = "";
        instance._option = {};
        childProcessExecOption = {
            stdio: 'inherit'
        }
    }
    //mdk deploy --target cf --name "ns.testld" --project "/Users/i062273/snowblind/mdk-tools/test/mta/testld"
    deploy() {
        return instance._getProjectInfo()
            .then(instance._prepareMta)
            .then(instance._checkCloudApp)
            .then(function () {
                if (!instance._startUrl || instance.deployArgs.force()) {
                    return instance._buildMta().then(instance._deployMta).then(function () {
                        if (!instance._startUrl) {
                            return instance._checkCloudApp();
                        } else {
                            return Promise.resolve();
                        }
                    });
                } else {
                    return instance._deployModule();
                }
            })
            .then(() => {
                //console.log(`Deploy web successfully in ${sURL}`);
                if (instance._startUrl) {
                    console.log(`Application start url is ${instance._startUrl}`);
                    if (instance.deployArgs.showqr()) {
                        return instance._showOnbloardingQR();
                    }
                }
                return true;
            })
            .catch(error => {
                return Promise.reject(error);
            });
    }

    _getProjectInfo() {
        return new Promise(function (resolve, reject) {
            //resolve(true);
            let sPojectInfoFile = path.join(instance.deployArgs.project(),utils.MDK_CONFIG_JSON);
            if (fs.existsSync(sPojectInfoFile)) {
                try {
                    instance._option = fs.readJSONSync(sPojectInfoFile)["CF"]["Deploy"];
                } catch (e) {

                }  
            }
            resolve(true);

        });
    }

    _formatArrayToParameters(aInput) {
        return aInput.map(item => `"${item}"`).join(" ");
    }

    _prepareMta() {
        return new Promise(function (resolve, reject) {
            let sMDKTools = utils.getMDKTools();
            let sAppName = instance._getName();
            let sCommand = `${sMDKTools} build --target mta --name ${sAppName} --project "${instance.deployArgs.project()}" --dist "${instance.deployArgs.dist()}" --forceUpdate`;
            if (instance.deployArgs.runtime()) {
                sCommand = sCommand + ` --runtime ${instance.deployArgs.runtime()}`;
            }

            if (instance.deployArgs.externals() && instance.deployArgs.externals().length>0) {
                sCommand = sCommand + ` --externals ${instance._formatArrayToParameters(instance.deployArgs.externals())}`;
            }
            if (instance.deployArgs.filters() && instance.deployArgs.filters().length>0) {
                sCommand = sCommand + ` --filters ${instance._formatArrayToParameters(instance.deployArgs.filters())}`;
            }

            if (instance.deployArgs.tsTarget()) {
                sCommand = sCommand + ` --ts-target ${instance.deployArgs.tsTarget()}`;
            }

            if (instance.deployArgs.useWmf()) {
                sCommand = sCommand + " --wmf";
            }

            if (instance.deployArgs.devtool()) {
                sCommand = sCommand + ` --devtool ${instance.deployArgs.devtool()}`;
            }

            try {
                console.log("Start preparing mta project...");
                console.log(sCommand);
                execSync(sCommand, childProcessExecOption);
                resolve();
            } catch (error) {
                console.error(logger.getError(`Failed to create mta project with error: ${error}`));
                reject(error);
            }
        });
    }

    _getName() {
        if (instance.deployArgs.name()) {
            return instance.deployArgs.name().replace(/\./g,'');
        }
        if (instance._option["Name"]) {
            return instance._option["Name"].replace(/\./g,'');
        }
        throw("could not find deploy info in .project.json, please specify name by --Name parameter.");
    }

    _checkCloudApp() {
        return new Promise(function (resolve, reject) {
            let sAppName = instance._getName();
            let sCommand = `cf app ${sAppName}-approuter`;
            try {
                console.log(sCommand);
                let ret = execSync(sCommand);
                let output = ret.toString();
                console.log(output);
                if (output && output.indexOf("FAILED") < 0) {
                    output = output.substr(output.indexOf("\nroutes:") + 9);
                    output = output.substr(0, output.indexOf("\n")).trim();
                    let routesArr = output.split(",");
                    let targetRoute = routesArr.find(item => {item.endsWith(sAppName)});
                    targetRoute = targetRoute ? targetRoute : `${routesArr[0]}/${sAppName}`;
                    targetRoute = targetRoute.startsWith("https://") ? targetRoute : `https://${targetRoute}`;
                    instance._startUrl = targetRoute;
                    console.log("Find existing application in cloud foundry");
                    resolve();
                } else {
                    console.log("Failed to find application in cloud foundry, create mta application...");
                }
                resolve();
            } catch (error) {
                console.log(error.message);
                resolve();
            }
        });
    }

    _buildMta() {
        return new Promise(function (resolve, reject) {
            let sDist = instance.deployArgs.dist();
            let sMtarFolder = path.join(sDist, utils.CF_BUILD_DIST_FOLDER);
            if (fs.existsSync(sMtarFolder)) {
                fs.removeSync(sMtarFolder);
            }
            // let sMDKTools = utils.getMDKTools();
            let sCommand = `mbt build  --source "${sDist}"`;
            try {
                console.log("Start mbt building...");
                console.log(sCommand);
                execSync(sCommand, childProcessExecOption);
                resolve();
            } catch (error) {
                console.error(logger.getError(`Failed to build mta project with error: ${error}`));
                reject(error);
            }
        });
    }

    _deployMta() {
        return new Promise(function (resolve, reject) {
            let sDist = instance.deployArgs.dist();
            let sMtarFolder = path.join(sDist, utils.CF_BUILD_DIST_FOLDER);
            let sMtarFile;
            if (fs.existsSync(sMtarFolder)) {
                let fileNames = fs.readdirSync(sMtarFolder);
                for (let i = 0; i < fileNames.length; i++) {
                    if (fileNames[i].endsWith(utils.CF_BUILD_DIST_FILE_SUFFIX)) {
                        sMtarFile = path.join(sMtarFolder, fileNames[i]);
                        break;
                    }
                }
            }

            if (!sMtarFile) {
                console.error(logger.getError(`No mtar file in: ${sMtarFolder}.`));
                reject('no mtar');
            }

            let sCommand = `cf deploy "${sMtarFile}" -f`;

            try {
                console.log("Start cf deploying...");
                console.log(sCommand);
                execSync(sCommand, childProcessExecOption);
                resolve();
            } catch (error) {
                console.error(logger.getError(`Failed to deploy ${sMtarFile} with error: ${error}`));
                reject(error);
            }
        });
    }

    _deployModule() {
        return new Promise(function (resolve, reject) {
            let sPath = path.join(instance.deployArgs.dist(), utils.WEB_MODULE_FOLDER, "webapp");
            let sCommand = `cf html5-push -n ${instance._getName()}${utils.MTA_SERVICE_SURFIX} ${sPath}`;
            try {
                console.log(sCommand);
                execSync(sCommand, childProcessExecOption);
                resolve();
            } catch (error) {
                console.error(logger.getError(`Failed to deploy html5 module with error: ${error}`));
                reject(error);
            }
        });
    }

    _showOnbloardingQR() {
        return new Promise(function (resolve, reject) {
            qrcode.toString(instance._startUrl, {  }, function (err, url) {
                console.log(url);
                resolve();
            });
        });
    }
};

exports.DeployCF = DeployCF;
