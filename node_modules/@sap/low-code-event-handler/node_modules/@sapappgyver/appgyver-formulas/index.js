const { parseExpression, importExpression } = require('./parser');
const { prepareExecutable } = require('./runtime');

/**
 * A shortcut for easily parsing and then immediately evaluating an expression
 * string with the given context. This is suitable for testing, but in production you
 * should use exported expressions + `prepareExecutable` instead, as this
 * will perform MUCH better!
 *
 * @param {string} expression expression string
 * @param {object} context runtime context provided for evaluation
 * @param {object} options runtime execution options
 */
function evaluateExpression(expression, context, options) {
  // This supports both just a string (less efficient) and the exported expression object.
  const parsedExpression = typeof expression === 'string' ? parseExpression(expression) : importExpression(expression);
  return parsedExpression.toExecutable().execute(context, options);
}

/**
 * A shortcut for easily parsing and then immediately reverting an expression
 * string using the given context and updated result value. This is suitable for testing,
 * but in production you should use exported expressions + `prepareExecutable` instead, as this
 * will perform MUCH better!
 *
 * @param {string} expression expression string
 * @param {*} result updated result used to determine the updated context
 * @param {object} context original runtime context
 */
function invertExpression(expression, result, context) {
  // This supports both just a string (less efficient) and the exported expression object.
  const parsedExpression = typeof expression === 'string' ? parseExpression(expression) : importExpression(expression);
  return parsedExpression.toExecutable(context).invert(result);
}

module.exports.prepareExecutable = prepareExecutable;
module.exports.evaluateExpression = evaluateExpression;
module.exports.invertExpression = invertExpression;
module.exports.parseExpression = parseExpression;
module.exports.importExpression = importExpression;
