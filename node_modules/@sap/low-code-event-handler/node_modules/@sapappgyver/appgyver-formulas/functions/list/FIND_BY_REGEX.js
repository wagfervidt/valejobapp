const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./FIND_BY_REGEX.runtime');


module.exports = {
  name: 'FIND_BY_REGEX',
  category: 'List',
  title: 'Find an object in list by matching a key value with a regex pattern',
  description: `Finds an object in the given list by comparing the value of each object's **Key** property with the given regex.

For example, given **Key** \`"name"\` and **Value** \`Agnus\`, will return the object in the list whose \`name\` property contains \`Agnus\`, or \`null\` if such an object was not found.

If multiple matches exist, the first matching object is returned.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to find object in',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to match',
    type: 'string',
  }, {
    title: 'Pattern',
    description: 'Regex pattern to match',
    type: 'string',
  }],
  analyze: ([arrayParam, keyParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || {};
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    return {
      schema: itemsSchema,
      errors: parameterErrors.length ? [] : keyErrors.map(error => ({
        ...error, offset: keyParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'FIND_BY_REGEX(array, "a", "^foo")',
      context: {
        array: [{ a: 'abar' }, { a: 'bar' }, { a: 'foo bar' }, { a: 1 }],
      },
      result: { a: 'foo bar' },
    },
    // {
    //   expression: 'FIND_BY_REGEX(array, "a", "1")',
    //   context: {
    //     array: [{ a: 'abar' }, { a: 'bar' }, { a: 'foo bar' }, { a: 1 }],
    //   },
    //   result: { a: 1 },
    // },
  ],
};
