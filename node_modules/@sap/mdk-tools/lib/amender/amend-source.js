const fs = require('fs-extra');
const path = require('path');
const _ = require('lodash');
const ENALBE_LOG = true;
let instance;
class Amender {

    constructor(args) {
        this.amendArgs = args;
        instance = this;
    }
    /**
     * This is the main entry point into the check metadata files
     *
     */
    amend() {
        
        return instance._amendFiles()
            .then((changedFiles) => {
                changedFiles.forEach(aChange => {
                    console.log(`update file ${aChange.file}`); 
                    fs.writeFileSync(aChange.file, aChange.content);
                })
                
            })
            .catch(error => {
                return Promise.reject(error);
            });
    }

    _amendFiles() {
        return new Promise(function (resolve, reject) {
            let pagePath = path.join(instance.amendArgs.project(), "Pages");
            if (fs.existsSync(pagePath)) {
                try {
                    instance.changedFiles = [];
                    const aFiles = instance._getAllFiles(pagePath);            
                    aFiles.forEach(aFile => {
                        if (ENALBE_LOG) console.log('checking file: ' + aFile);
                        const oPage = fs.readJSONSync(aFile);
                        const oClonedPage = _.cloneDeep(oPage);
                        const oNewPage = instance._amendObjInPage(oPage, "","", oPage);
                        if (!_.isEqual(oClonedPage,oNewPage)) {
                            instance.changedFiles.push({file: aFile, content:JSON.stringify(oNewPage,"","\t")});
                        }
                    });
                } catch(e) {
                    reject(e);
                }
                resolve(instance.changedFiles);
            } else {
                reject(`${pagePath} doesn't exist.`);
            }
        });
    }

    _getAllFiles(dirPath, arrayOfFiles) {
        const files = fs.readdirSync(dirPath)
        arrayOfFiles = arrayOfFiles || []
        files.forEach(function (file) {
            if (fs.statSync(dirPath + path.sep + file).isDirectory()) {
                arrayOfFiles = instance._getAllFiles(dirPath + path.sep + file, arrayOfFiles);
            } else {
                if (file.endsWith(".page")) {
                    arrayOfFiles.push(path.join(dirPath, path.sep, file));
                }
            }
        })
        return arrayOfFiles
    }

    _amendObjInPage(oPage, sType, sKey, oControl) {

        if (oControl["_Type"] && !oControl["_Name"]) {
            oControl["_Name"] = instance._getAName(oPage, oControl["_Type"]);
        } else if (sType && sKey) {
            if (sKey === "ContactCells" ) {
                if (oControl["ContactCell"] && typeof oControl["ContactCell"] === 'object' && !oControl["ContactCell"]["_Name"]) {
                    oControl["ContactCell"]["_Name"] = instance._getAName(oPage, "Section.Type.ContactCellItem");
                }
            }  else if  (sKey === "ImageCells" ) {
                if (oControl["ImageCell"] && typeof oControl["ImageCell"] === 'object' && !oControl["ImageCell"]["_Name"]) {
                    oControl["ImageCell"]["_Name"] = instance._getAName(oPage, "Section.Type.ImageCellItem");
                }
            }  else if  (sKey === "ObjectCells" ) {
                if (oControl["ObjectCell"] && typeof oControl["ObjectCell"] === 'object' && !oControl["ObjectCell"]["_Name"]) {
                    oControl["ObjectCell"]["_Name"] = instance._getAName(oPage, "Section.Type.ObjectCell");
                }
            } else if  (sKey === "SimplePropertyCells" ) {
                if (oControl["SimplePropertyCell"] && typeof oControl["SimplePropertyCell"] === 'object' && !oControl["SimplePropertyCell"]["_Name"]) {
                    oControl["SimplePropertyCell"]["_Name"] = instance._getAName(oPage, "Section.Type.SimplePropertyCell");
                }
            } else if (sKey === "Sections" && !oControl["_Name"]) {
                oControl["_Name"] = instance._getAName(oPage, "Section");
            } else if (!oControl["_Name"]) {
                if  (sType ==="Section.Type.ButtonTable" && sKey === "Buttons" ) {
                    oControl["_Name"] = instance._getAName(oPage, "Section.Type.Button");
                } else if  (sType ==="Section.Type.KeyValue" && sKey === "KeyAndValues" ) {
                    oControl["_Name"] = instance._getAName(oPage, "Section.Type.KeyValue");
                } else if  (sType ==="Section.Type.KPIHeader" && sKey === "KPIItems" ) {
                    oControl["_Name"] = instance._getAName(oPage, "Section.Type.KPIItem");
                } else if  (sType ==="Section.Type.AnalyticCardCollection" && sKey === "AnalyticCards" ) {
                    oControl["_Name"] = instance._getAName(oPage, "Section.Type.CardTypeChart");
                } 
            }
        }

        for (const key in oControl) {
            if (oControl.hasOwnProperty(key)) {
                const value = oControl[key];
                let parentType;
            

                if (typeof value === 'object' && value !== null) {
                    parentType = oControl["_Type"] ? oControl["_Type"] : sType;
                    instance._amendObjInPage(oPage, parentType, "", value);
                }

                if (Array.isArray(value)) {
                    for (const item of value) {
                        if (typeof item === 'object' && item !== null) {
                            parentType = oControl["_Type"] ? oControl["_Type"] : sType;
                            instance._amendObjInPage(oPage,parentType, key, item);
                        }
                    }
                }
            }
        }
        return oPage;
    }

    _getAName(oPage, sType) {
        let i = 0;
        let sName = sType.split(".").pop() + i;
        while (instance._checkNameInObject(oPage, sName)) {
            i++;
            sName = sType.split(".").pop() + i;
        }
        return sName;
    }

    _checkNameInObject(obj, name) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const value = obj[key];

                if (key === '_Name' && value === name) {
                    return true;
                }

                if (typeof value === 'object' && value !== null) {
                    const foundObject = instance._checkNameInObject(value, name);
                    if (foundObject !== false) {
                        return true;
                    }
                }

                if (Array.isArray(value)) {
                    for (const item of value) {
                        if (typeof item === 'object' && item !== null) {
                            const foundObject = instance._checkNameInObject(item, name);
                            if (foundObject !== false) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
}
exports.Amender = Amender;