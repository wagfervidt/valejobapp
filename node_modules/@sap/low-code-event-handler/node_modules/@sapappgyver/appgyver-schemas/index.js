const { getArrayItemSchema } = require('./arrays');
const { getBlankValueForSchema } = require('./blanks');
const { getConstantSchema } = require('./constants');
const { detectValueSchema } = require('./detection');
const { getExampleValues } = require('./examples');
const { extractSchema } = require('./extraction');
const { getIntersectionSchema } = require('./intersection');
const {
  annotationKeywords,
  getSchemaAnnotation,
  omitAnnotations,
  pickAnnotations,
  reservedKeywords,
} = require('./keywords');
const { getMinimalAssignableSchema } = require('./minimal');
const {
  getObjectPropertySchema,
  getPossibleObjectSchemaProperties,
  getRequiredObjectSchemaProperties,
  omitObjectSchemaProperties,
  pickObjectSchemaProperties,
  resolveObjectMemberAccessor,
  setOptionalObjectSchemaProperty,
  setRequiredObjectSchemaProperties,
  setRequiredObjectSchemaProperty,
} = require('./objects');
const { getUnionSchema } = require('./union');
const { stringifyType } = require('./utils/shortcuts');
const {
  isSubsetSchema,
  isSchemaAssignable,
  getSchemaAssignmentErrors,
  resolveMetaSchema,
} = require('./validation');
const { simplifySchema } = require('./simplification');
const { replaceSchemaTypes, traverseSchema } = require('./traversal');
const { idenfitySchemas, resolveSchemaReferences } = require('./references');

/**
 * Validates the given value against the schema, and returns an array of validation errors.
 * If the returned array is empty, then the value matches the given schema!
 * @param {*} value any value
 * @param {object} schema schema definition
 */
function getValueValidationErrors(value, schema) {
  // TODO: Could be optimized
  return getSchemaAssignmentErrors(getConstantSchema(value), schema);
}

module.exports.annotationKeywords = annotationKeywords;
module.exports.detectValueSchema = detectValueSchema;
module.exports.extractSchema = extractSchema;
module.exports.getArrayItemSchema = getArrayItemSchema;
module.exports.getBlankValueForSchema = getBlankValueForSchema;
module.exports.getConstantSchema = getConstantSchema;
module.exports.getExampleValues = getExampleValues;
module.exports.getIntersectionSchema = getIntersectionSchema;
module.exports.getObjectPropertySchema = getObjectPropertySchema;
module.exports.getPossibleObjectSchemaProperties = getPossibleObjectSchemaProperties;
module.exports.getRequiredObjectSchemaProperties = getRequiredObjectSchemaProperties;
module.exports.getSchemaAnnotation = getSchemaAnnotation;
module.exports.getSchemaAssignmentErrors = getSchemaAssignmentErrors;
module.exports.getUnionSchema = getUnionSchema;
module.exports.getValueValidationErrors = getValueValidationErrors;
module.exports.idenfitySchemas = idenfitySchemas;
module.exports.isSchemaAssignable = isSchemaAssignable;
module.exports.isSubsetSchema = isSubsetSchema;
module.exports.omitAnnotations = omitAnnotations;
module.exports.omitObjectSchemaProperties = omitObjectSchemaProperties;
module.exports.pickAnnotations = pickAnnotations;
module.exports.pickObjectSchemaProperties = pickObjectSchemaProperties;
module.exports.replaceSchemaTypes = replaceSchemaTypes;
module.exports.reservedKeywords = reservedKeywords;
module.exports.resolveMetaSchema = resolveMetaSchema;
module.exports.resolveObjectMemberAccessor = resolveObjectMemberAccessor;
module.exports.resolveSchemaReferences = resolveSchemaReferences;
module.exports.setOptionalObjectSchemaProperty = setOptionalObjectSchemaProperty;
module.exports.setRequiredObjectSchemaProperties = setRequiredObjectSchemaProperties;
module.exports.setRequiredObjectSchemaProperty = setRequiredObjectSchemaProperty;
module.exports.simplifySchema = simplifySchema;
module.exports.stringifyType = stringifyType;
module.exports.traverseSchema = traverseSchema;
module.exports.getMinimalAssignableSchema = getMinimalAssignableSchema;
