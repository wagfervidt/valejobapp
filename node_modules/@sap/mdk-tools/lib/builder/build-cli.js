#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const WebBuilder = require('./build-web').Builder;
const MSBuilder = require('./build-ms').Builder;
const SourceBuilder = require('./build-source').Builder;
const ReportBuilder = require('./build-report').Builder;
const BuildArgs = require('./build-args').BuildArgs;
const logger = require('../logger');
const timestamp = require('console-timestamp');
const {BUILD_TARGET, APPLICATION_FILE } = require('../utils');

async function doBuild() {
  let buildArgs = new BuildArgs();
  let target = buildArgs.target();
  let recursive =  buildArgs.recursive();
  let buildArsArr = [];
  
  if (recursive && target === BUILD_TARGET.MODULE ) {
    let rootPath = buildArgs.project();
    let aPrj = await _getProjects(rootPath);//
    let aSteps =[];
    aPrj.forEach(project => {
      let newArgs = new BuildArgs();
      newArgs.setProject(project);
      buildArsArr.push(newArgs);
      aSteps.push(_buildHelper(target,newArgs));
    });
    return Promise.all(aSteps);//todo    
  } else {
    if (recursive) {
      console.log(logger.getWarn(`recursive is only supported for module target, ignore it for ${target} build.`));
    }
    return _buildHelper(target, buildArgs);
  }
}



function _buildHelper(target, builderArgs) {
  let builder;
  if (target === BUILD_TARGET.JS || target ===BUILD_TARGET.ZIP) {
    builder = new MSBuilder(builderArgs);
  } else if (target === BUILD_TARGET.MODULE || target ===BUILD_TARGET.MTA) {
    builder = new WebBuilder(builderArgs);
  } else if (target === BUILD_TARGET.SOURCE) {
    builder = new SourceBuilder(builderArgs);
  } else if (target === BUILD_TARGET.REPORT) {
    builder = new ReportBuilder(builderArgs);
  }
  console.log("\n" + '[hh:mm:ss]'.timestamp + logger.getPrompt(" -- Starting --"));
  return builder.build();
}

function _getProjects(rootPath) {
  let aProjects = [];
  let aFile = fs.readdirSync(rootPath);
  if (aFile.includes(APPLICATION_FILE)){
    aProjects.push(rootPath);
  } else {
    aFile.forEach(fileName => {
      let fullPath = path.join(rootPath, fileName);
      if (_isValidPath(fileName) && _isFolderSync(fullPath)) {
        aProjects = aProjects.concat(_getProjects(fullPath));
      }
    });
  }
  return aProjects;
}

function _isValidPath(name) {
  return name && !name.startsWith(".") && name!=="node_modules";
}

function _isFolderSync(fullPath) {
  try {
    return fs.lstatSync(fullPath).isDirectory();
  } catch (error) {
    console.log(error);
    return false;
  }
}
module.exports = { doBuild };


