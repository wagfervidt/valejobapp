const { performSort, performFilter } = require('@sapappgyver/appgyver-schemas/utils/array');

function invertSort(originalArray, updatedArray, direction, key, caseSensitive) {
  if (!Array.isArray(originalArray) || !Array.isArray(updatedArray)) {
    throw new Error('Cannot invert a non-list value');
  }
  if (originalArray.length !== updatedArray.length) {
    throw new Error(`Cannot invert a list with length ${updatedArray.length} not matching the original item count ${originalArray.length}`);
  }
  const sortedSlots = performSort(originalArray, direction, key, caseSensitive);
  const newArray = [];
  for (let idx = 0; idx < updatedArray.length; idx += 1) {
    const newValue = updatedArray[idx];
    const originalIndex = sortedSlots[idx].index;
    newArray[originalIndex] = newValue;
  }
  return newArray;
}

function invertFilter(originalArray, updatedArray, criteria) {
  if (!Array.isArray(originalArray) || !Array.isArray(updatedArray) || typeof criteria !== 'function') {
    throw new Error('Cannot invert a non-list value');
  }
  const filteredSlots = performFilter(originalArray, criteria);
  if (filteredSlots.length !== updatedArray.length) {
    throw new Error(`Cannot invert a list with length ${updatedArray.length} not matching the selected item count ${filteredSlots.length}`);
  }
  const newArray = originalArray.slice();
  for (let idx = 0; idx < updatedArray.length; idx += 1) {
    const newValue = updatedArray[idx];
    const originalIndex = filteredSlots[idx].index;
    newArray[originalIndex] = newValue;
  }
  return newArray;
}

function invertMap(originalArray, updatedArray, invertor) {
  if (!Array.isArray(originalArray) || !Array.isArray(updatedArray)) {
    throw new Error('Cannot invert a non-list value');
  }
  if (originalArray.length !== updatedArray.length) {
    throw new Error(`Cannot invert a list with length ${updatedArray.length} not matching the item count ${originalArray.length}`);
  }
  return updatedArray.map((updatedItem, index) => {
    const originalItem = originalArray[index];
    return invertor(updatedItem, originalItem, index);
  });
}

module.exports.invertFilter = invertFilter;
module.exports.invertMap = invertMap;
module.exports.invertSort = invertSort;
