const os = require("os");
const path = require('path');
const logger = require('./logger');
const fs = require('fs-extra');
const timestamp = require('console-timestamp');

const AVAILIABLE_WEB_RUNTIME_LANDSCAPE= [
    "sap.hana.ondemand.com",
    "app10.hana.ondemand.com",
    "app11.hana.ondemand.com",
    "app21.hana.ondemand.com",
    "br10.hana.ondemand.com",
    "us10.hana.ondemand.com",
    "us20.hana.ondemand.com",
    "us21.hana.ondemand.com",
    "eu10.hana.ondemand.com",
    "eu20.hana.ondemand.com",
    "jp10.hana.ondemand.com",
    "jp20.hana.ondemand.com"
];
const  SPECIAL_WEB_RUNTIME= [{
    endpoint: "canaryac.vlab-sapcloudplatformdev.cn",
    production:"https://mdk-webclient-runtime.mdk.canaryac.apps.vlab-sapcloudplatformdev.cn/runtime/",
    preview:"https://mdk-webclient-runtime-preview.mdk.canaryac.apps.vlab-sapcloudplatformdev.cn/preview/"
}];

const WEB_RUNTIME ={
    PREVIEW: "preview",
    PRODUCTION: "production",
    DEV: "dev"
};

const WEB_RUNTIME_DEFAULT_PROD = "https://mdk-webclient-runtime.cfapps.sap.hana.ondemand.com/runtime/";
const WEB_RUNTIME_DEFAULT_PRE = "https://mdk-webclient-runtime-preview.cfapps.sap.hana.ondemand.com/preview/";

const APPLICATION_FILE = "Application.app";
module.exports = {
    MDK_CONFIG_JSON: ".project.json",
    //build
    WEB_SOURCE_FOLDER: "Web",
    WEB_TARGET_FOLDER: "webapp",
    WEB_MODULE_FOLDER: "MDKModule",
    WEB_FACTORY_NAME: 'WebApplicationFactory',
    WEB_RUNTIME_DEFAULT_PROD,
    WEB_RUNTIME_DEFAULT_PRE,
    WEB_RUNTIME,
    BUILD_TARGET: {
        MODULE: "module",
        MTA: "mta",
        JS: "js",
        ZIP: "zip",
        SOURCE: "source",
        REPORT: "report"
    },

    REPORT_CONTENT: {
        EXTENSION_DEFINE: "define",
        EXTENSION_USING: "using",
        COMPARE_BASE: "compare"
    },
   
    DEPLOY_SETTING_FILE: "vscode/deploysetting.json",

    //deploy
    DEPLOY_TARGET_CF: "cf",
    DEPLOY_TARGET_MS: "mobile",
    DEPLOY_CF_UPDATE_MTA: "mta",
    DEPLOY_CF_UPDATE_MODULE: "module",
    CF_BUILD_DIST_FOLDER: 'mta_archives',
    CF_BUILD_DIST_FILE_SUFFIX: '.mtar',
    MTA_SERVICE_SURFIX: "_html_repo_host",
    BUNDLE_ZIP_FILE: "uploadBundle.zip",
    BUNDLE_JS_FILE: "bundle.js",
    MDK_IDENTITY_FILE: "project.json",

    BUILD_TEMP_FOLDER: ".build",

    AMEND_TARGET_BTP: "cloud",
    AMEND_TARGET_MOBILE: "mobile",
    AMEND_TARGET_SOURCE: "source",

    PACKAGE_FILE: "package.json",
    CAP_DEPENDENCY: "@sap/cds",

    //deploy
    FEATURE_TYPESCRIPT: "ts",
    FEATURE_DOCUMENT: "doc",
    FEATURE_BACKEND: "backend",
    APPLICATION_FILE,
    getMDKTools: function () {
        let platform = os.platform();
        let exeFilePath = platform === 'win32' ? "../bin/mdkcli.cmd" : "../bin/mdkcli.sh";
        let sPath = path.join(__dirname, exeFilePath);
        return `"${sPath}"`;
    },

    getRootPath: function() {
        return __dirname; //return lib folder which is not change after pack
    },

    logInfo: function (msg, marker, simple) {
        if (simple) {
            console.log(marker + msg);
        } else {
            console.log("\n" + '[hh:mm:ss]'.timestamp + marker + logger.getPrompt(msg));
        }
    },

    getAppName(sProject) {
        const sApplicationAppPath = path.join(sProject, APPLICATION_FILE);
        let appName = "";
        if (fs.existsSync(sApplicationAppPath)) {
            try {
                let oApplicationAppJson = fs.readJsonSync(sApplicationAppPath);
                appName = oApplicationAppJson._Name;
            } catch (e) {
                console.error(e);
            }
        }
        return appName;
    },

    getWebRuntimeUrl(runtime, host) {
        if (host && host.substring(0, 15) === 'https://api.cf.') {
            host = host.substring(15);
            let aHost = host.split(".");
            aHost[0] = aHost[0].replace(/([a-zA-Z0-9]+)(-\d{3})$/i, "$1");
            host = aHost.join(".");
        }

        const specialRuntime = SPECIAL_WEB_RUNTIME.find (item => item.endpoint === host);
        let sWebClientUrl;

        if (runtime === WEB_RUNTIME.PREVIEW) {
            if (specialRuntime) { 
                sWebClientUrl = specialRuntime.preview;
            } else {
                sWebClientUrl = WEB_RUNTIME_DEFAULT_PRE;
            }
        } else  {
            if (specialRuntime) {  //todo: will apply after dev-op team deployed
                sWebClientUrl = specialRuntime.production;
            } else {
                if (host && AVAILIABLE_WEB_RUNTIME_LANDSCAPE.includes(host)) {
                    sWebClientUrl = `https://mdk-webclient-runtime.cfapps.${host}/runtime/`;
                } else {
                    sWebClientUrl = WEB_RUNTIME_DEFAULT_PROD;
                }
            }
        }
        return sWebClientUrl;
    },

    getVersion() {
        const packageFile = path.join(__dirname,"..","package.json");
        try {
            const packageObj = fs.readJSONSync(packageFile);
            return packageObj.version;
        } catch(e) {
            console.error(e.message ? e.message : e);
            return "unknown";
        }
    }
}