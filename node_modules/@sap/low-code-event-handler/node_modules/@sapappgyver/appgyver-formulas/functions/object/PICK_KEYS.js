const { getArrayItemSchema, pickObjectSchemaProperties, setRequiredObjectSchemaProperties } = require('@sapappgyver/appgyver-schemas');
const execute = require('./PICK_KEYS.runtime');

module.exports = {
  name: 'PICK_KEYS',
  category: 'Object',
  title: 'Get a property of an object',
  description: 'Returns an object containing the properties of the given object whose keys are found in the given keys list.',
  parameters: [{
    type: 'object',
    title: 'Object',
    description: 'Object whose property will be get',
  }, {
    type: 'array',
    items: {
      type: 'string',
    },
    title: 'Property name',
    description: 'Name of the property to take from object',
  }],
  analyze: ([object, arrProp], offset, parameterErrors) => {
    const arraySchema = (arrProp && arrProp.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'string' };
    const propNames = itemsSchema && itemsSchema.enum;
    if (parameterErrors.length || !object || !object.schema) {
      return { schema: { type: 'object' } };
    }
    if (propNames) {
      return {
        // Pick certain properies on schema
        schema: pickObjectSchemaProperties(object.schema, propNames),
      };
    }
    return {
      // Don't know exact properties to be picked => make all optional
      schema: setRequiredObjectSchemaProperties(object.schema, []),
    };
  },
  execute,
  examples: [
    {
      expression: 'PICK_KEYS({a: "A", b: "B", c: "C"}, ["a", "b"])',
      result: { a: 'A', b: 'B' },
    },
    {
      expression: 'PICK_KEYS({a: "A", b: "B", c: "C"}, ["w", "q"])',
      result: { a: 'A', b: 'B', c: 'C' },
    },
    {
      expression: 'PICK_KEYS(animal, ["name", "active", "children"])',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: {
        name: 'dog', active: false, children: 0,
      },
    },
  ],
};
