interface CommonSchemaAnnotations {
  [annotation: string]: unknown;
  $id?: string;
  description?: string;
  title?: string;
  searchable?: boolean;
  readOnly?: boolean;
}

interface ValueSchema<Value> extends CommonSchemaAnnotations {
  default?: Value;
  enum?: Value[];
  examples?: Value[];
}

export interface TypedSchema<Value = unknown> extends ValueSchema<Value> {
  // Let these properties exist, but if they do, they are undefined
  $ref?: undefined;
  allOf?: undefined;
  anyOf?: undefined;
}

export interface StringSchema extends TypedSchema<string | undefined | null> {
  format?: string;
  maxLength?: number;
  minLength?: number;
  type: 'string';
}

export interface StringEnumSchema extends StringSchema {
  // Remove the optionality of the enum property
  enum: string[];
}

export interface NumberEnumSchema extends NumberSchema {
  // Remove the optionality of the enum property
  enum: number[];
}

export interface NumberSchema extends TypedSchema<number | undefined | null> {
  exclusiveMaximum?: number;
  exclusiveMinimum?: number;
  minimum?: number;
  type: 'number';
}

export interface BooleanSchema extends TypedSchema<boolean | undefined | null> {
  type: 'boolean';
}

export interface NullSchema extends TypedSchema<null> {
  type: 'null';
}

export interface UndefinedSchema extends TypedSchema<undefined> {
  type: 'undefined';
}

export interface JsonSchema extends TypedSchema<unknown> {
  type: 'json';
}

export interface MetaSchema extends TypedSchema<Schema> {
  schema?: Schema;
  type: 'schema';
}

export interface SchematicValueSchema extends TypedSchema<{ schema: Schema, value: unknown }> {
  schema?: Schema;
  type: 'schematicValue';
}

export interface LegacyWildcardSchema extends TypedSchema<unknown> {
  type: 'value';
}

export interface ObjectSchema extends TypedSchema<Record<string, unknown> | undefined | null> {
  additionalProperties?: Schema | boolean;
  maxProperties?: number;
  minProperties?: number;
  properties?: Record<string, Schema>;
  required?: string[];
  type: 'object';
}

export interface ArraySchema extends TypedSchema<Array<unknown> | undefined | null> {
  items?: Schema;
  maxItems?: number;
  minItems?: number;
  type: 'array';
}

export interface AnyOfSchema extends ValueSchema<unknown> {
  // Let these properties exist, but if they do, they are undefined
  $ref?: undefined;
  allOf?: undefined;
  anyOf: Schema[];
  type?: undefined;
}

export interface AllOfSchema extends ValueSchema<unknown> {
  // Let these properties exist, but if they do, they are undefined
  $ref?: undefined;
  allOf: Schema[];
  anyOf?: undefined;
  type?: undefined;
}

export interface RefSchema extends ValueSchema<unknown> {
  $ref: string;
  allOf?: undefined;
  anyOf?: undefined;
  // Let these properties exist, but if they do, they are undefined
  type?: undefined;
}
export interface SpecialSchema extends TypedSchema {
  type: 'appVariableRef' | 'pageVariableRef' | 'parameterRef'
    | 'dataReferenceName' | 'resourceName' | 'page' | 'componentId'
    | 'service' | 'externalResource' | 'appVariableAssignment'
    | 'pageVariableAssignment' | 'dataReferenceAssignment'
    | 'componentDataReferenceAssignment' | 'componentPropertyAssignment'
    | 'internalPropertyAssignment' | 'outputValueAssignment'
    | 'privateVariableAssignment' | 'privateDataVariableAssignment'
    | 'componentProperty' | 'repeatedItemAssignment' | 'pageNavigation'
    | 'fontFamily' | 'supportedLanguage' | 'dataResourceRetrieveRequest'
    | 'dataResourceListRequest' | 'dataResourceCreateRequest'
    | 'dataResourceReplaceRequest' | 'dataResourceDeleteRequest'
    | 'dataResourceRetrieveResponse' | 'dataResourceListResponse'
    | 'dataResourceCreateResponse' | 'dataResourceReplaceResponse'
    | 'dataResourceDeleteResponse'
}

export interface ExpressionSchema extends TypedSchema {
  type: 'expression',
  expression: string
}
export interface UnknownSchema extends ValueSchema<unknown> {
  // Let these properties exist, but if they do, they are undefined
  $ref?: undefined;
  allOf?: undefined;
  anyOf?: undefined;
  type?: undefined;
}

export type StrictSchema =
  StringSchema
  | NumberSchema
  | BooleanSchema
  | NullSchema
  | UndefinedSchema
  | JsonSchema
  | MetaSchema
  | SchematicValueSchema
  | LegacyWildcardSchema
  | ObjectSchema
  | ArraySchema
  | AnyOfSchema
  | AllOfSchema
  | RefSchema
  | SpecialSchema
  | ExpressionSchema
  | UnknownSchema;

export type SchemaType = StrictSchema['type'];

/**
 * AppGyver schema, defining a type for a value or structure. Similar but not equivalent with JSONSchema.
 *
 * This interface is compatible with the `Schema` type for DOLAN v3 in `@sapappgyver/appgyver-descriptors` library.
 *
 * @deprecated Use `Schema` from `@sapappgyver/appgyver-descriptors/lib/types/dolan/v3` instead.
 */
export interface Schema {
  title?: string | null;
  description?: string | null;
  type?: string | null;
  anyOf?: Schema[] | null;
  allOf?: Schema[] | null;
  enum?: unknown[] | null;
  examples?: unknown[] | null;
  default?: unknown;
  properties?: {
    [k: string]: Schema;
  } | null;
  additionalProperties?: unknown;
  required?: string[] | null;
  items?: Schema | null;
  format?: string | null;
  minLength?: number | null;
  maxLength?: number | null;
  [k: string]: unknown;
}

/**
 * @deprecated Use `Schema` from `@sapappgyver/appgyver-descriptors/lib/types/dolan/v3` instead.
 */
export type NullableSchema = Schema | null | undefined;
