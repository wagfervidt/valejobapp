/**
 * Determine if path is absolute (works on windows and *nix)
 */
export declare const isAbsolute: (sPath: string) => boolean;
/**
 * Filter object to only include entries by keys (Based on TypeScript Pick)
 * @param obj - Object to filter
 * @param keys - Keys to extract
 * @example
 * let obj = { a: 1, b: 2, c: '3' }     // Type is { a: number, b: number, c: string }
 * obj = pick(obj, 'a', 'b')            // Type is { a: number, c: string }
 */
export declare function pick<T, K extends keyof T>(obj: T, ...keys: K[]): Pick<T, K>;
/**
 * Fully typed Object.keys
 */
export declare const getKeys: <T>(obj: T) => (keyof T)[];
declare type GetDescriptorType<T extends PropertyDescriptor & {
    initializer?: (...args: any[]) => any;
}> = 'value' extends keyof T ? T['value'] : T['get'] extends Function ? ReturnType<T['get']> : T['set'] extends Function ? Parameters<T['set']>[0] : T['initializer'] extends Function ? ReturnType<T['initializer']> : never;
/**
 * Fully typed Object.defineProperties
 */
export declare function defineProperties<TObj, TProps extends Record<PropertyKey, PropertyDescriptor>>(obj: TObj, properties: TProps): TObj & {
    [K in keyof TProps]: GetDescriptorType<TProps[K]>;
};
/**
 * Root directory for ts-patch
 */
export declare const appRoot: string;
/**
 * Package json for ts-patch
 */
export declare const tspPackageJSON: any;
export {};
