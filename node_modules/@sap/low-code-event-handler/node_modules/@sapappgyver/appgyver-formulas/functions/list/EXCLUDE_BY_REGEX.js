const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./EXCLUDE_BY_REGEX.runtime');

module.exports = {
  name: 'EXCLUDE_BY_REGEX',
  category: 'List',
  title: 'Remove objects from a list by a key-regex match',
  description: `Removes objects from a list by matching the value of a given key to a regular expression pattern.

Iterates through the list, checking if the value of each object's **Key** property matches the regex **Pattern**. Returns a new list which doesn't contain matched objects.

For example, given **Key** \`"name"\` and **Value** \`/John/\`, all objects in the source **List** whose \`name\` property contains the text \`"John"\` would be removed from the returned list.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to exclude objects from',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to match',
    type: 'string',
  }, {
    title: 'Pattern',
    description: 'Regex pattern to match',
    type: 'string',
  }],
  analyze: ([arrayParam, keyParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length
        ? []
        : keyErrors.map(error => ({ ...error, offset: keyParam.offset })),
    };
  },
  execute,
  examples: [
    {
      expression: 'EXCLUDE_BY_REGEX(array, key, stringPattern)',
      context: {
        array: [{ a: 2 }, { a: 'foo bar' }, { a: 'foo', b: 3 }],
        key: 'a',
        stringPattern: '^foo',
      },
      result: [{ a: 2 }],
    },
  ],
};
