const execute = require('./LOCALIZE_NUMBER.runtime');

module.exports = {
  name: 'LOCALIZE_NUMBER',
  category: 'Deprecated',
  title: 'Returns localized number representation',
  description: 'Returns a string with a language-sensitive representation of this number.',
  deprecated: true, // Not shown in the editor, but still supported by the runtime until removed!
  parameters: [{
    type: 'number',
    title: 'Number',
    description: 'Number to localize',
  }, {
    type: 'string',
    title: 'Locale',
    description: 'A string with a BCP 47 language tag. '
      + 'Examples: "en", "hi", "de-AT", "zh-Hans-CN"',
  }, {
    type: 'object',
    title: 'Options',
    default: null,
    description: 'An object with some or all of the following properties:\n'
      + '\n- localeMatcher: The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit".'
      + '\n- style: '
      + 'The formatting style to use. Possible values are "decimal" for plain number formatting, '
      + '"currency" for currency formatting, and "percent" for percent formatting; the default is "decimal".'
      + '\n- currency: '
      + 'The currency to use in currency formatting. '
      + 'Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro. '
      + 'There is no default value; if the style is "currency", the currency property must be provided.'
      + '\n- currencyDisplay: '
      + 'How to display the currency in currency formatting. '
      + 'Possible values are "symbol" to use a localized currency symbol such as €, '
      + '"code" to use the ISO currency code, "name" to use a localized currency name such as "dollar"; the default is "symbol".'
      + '\n- useGrouping: '
      + 'Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.'
      + 'Possible values are true and false; the default is true.'
      + '\n- minimumIntegerDigits: '
      + 'The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.'
      + '\n- minimumFractionDigits: '
      + 'The minimum number of fraction digits to use. Possible values are from 0 to 20; '
      + 'the default for plain number and percent formatting is 0; '
      + 'the default for currency formatting is the number of minor unit digits provided by the ISO 4217 currency code list '
      + '(2 if the list doesn\'t provide that information).'
      + '\n- maximumFractionDigits: '
      + 'The maximum number of fraction digits to use. '
      + 'Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; '
      + 'the default for currency formatting is the larger of minimumFractionDigits '
      + 'and the number of minor unit digits provided by the ISO 4217 currency code list '
      + '(2 if the list doesn\'t provide that information); '
      + 'the default for percent formatting is the larger of minimumFractionDigits and 0.'
      + '\n- minimumSignificantDigits: '
      + 'The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.'
      + '\n- maximumSignificantDigits: '
      + 'The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.',
  }],
  analyze: () => ({ schema: { type: 'string' } }),
  execute,
  examples: [
    { expression: 'LOCALIZE_NUMBER(12345.67, "de-DE")', result: '12.345,67' },
    {
      expression: 'LOCALIZE_NUMBER(value, locale, options)',
      context: {
        value: 12345.67,
        locale: 'de-DE',
        options: {
          style: 'currency',
          currency: 'EUR',
        },
      },
      result: '12.345,67 €',
    },
  ],
};
