const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./BUILD_OBJECT.runtime');

module.exports = {
  name: 'BUILD_OBJECT',
  category: 'List',
  title: 'Build an object from a list of key-value objects',
  description: `Given a list of objects and the names of two properties that the objects in the list have, constructs a dictionary object.

The algorithm runs as follows: start with an empty result object. For every object in the source list, pick the value of the **Key value** property, and assign it to the result object under a property whose name is the value of **Key name** property.

If multiple objects in the list have the same value for their **Key name** property, the dictionary will have the value of the **Value name** property of the last object in the list.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'The list of objects from which the object will be built',
    items: {
      type: 'object',
    },
  }, {
    type: 'string',
    title: 'Key name',
    description: 'Property name in the source list object whose value to use as dictionary object key',
  }, {
    type: 'string',
    title: 'Value name',
    description: 'Property name in the source list object whose value to use as dictionary object value',
  }],
  analyze: ([arrayParam, keyParam, valueParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const valueSchema = (valueParam && valueParam.schema) || {};
    const {
      schema: valuePropSchema,
      errors: valueErrors,
    } = resolveObjectMemberAccessor(itemsSchema, valueSchema);
    const {
      schema: keyPropSchema,
      errors: keyErrors,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    const errors = [];
    if ((keyErrors.length || valueErrors.length) && !parameterErrors.length) {
      errors.push(...keyErrors.map(error => ({ ...error, offset: keyParam.offset })));
      errors.push(...valueErrors.map(error => ({ ...error, offset: valueParam.offset })));
    }
    if (keyPropSchema && valuePropSchema) {
      if (keyPropSchema.enum) {
        return {
          schema: {
            type: 'object',
            properties: {
              ...keyPropSchema.enum.reduce((acum, item) => {
                const newItem = {};
                newItem[item] = valuePropSchema;
                return Object.assign(acum, newItem);
              }, {}),
            },
          },
          errors,
        };
      }
    }
    return {
      schema: {
        type: 'object',
        properties: {},
        additionalProperties: errors.length || parameterErrors.length ? {} : valuePropSchema,
      },
      errors,
    };
  },
  execute,
  examples: [
    {
      context: {
        array: [
          {
            id: 'abc',
            label: 'ABC label',
          },
          {
            id: 'def',
            label: 'DEF label',
          },
        ],
      },
      expression: 'BUILD_OBJECT(array, "id", "label")',
      result: { abc: 'ABC label', def: 'DEF label' },
    },
    {
      context: {
        animals: [
          {
            name: 'cat',
            age: 2,
            height: 0.4,
          },
          {
            name: 'dog',
            age: 3,
            height: 0.6,
          },
          {
            name: 'mouse',
            age: 1,
            height: 0.1,
          },
        ],
      },
      expression: 'BUILD_OBJECT(animals, "name", "age")',
      result: { cat: 2, dog: 3, mouse: 1 },
    },
    {
      context: {
        animals: [
          {
            name: 'cat',
            age: 2,
            height: 0.4,
          },
          {
            name: 'dog',
            age: 3,
            height: 0.6,
          },
          {
            name: 'mouse',
            age: 1,
            height: 0.1,
          },
        ],
      },
      expression: 'BUILD_OBJECT(animals, "name", "height")',
      result: { cat: 0.4, dog: 0.6, mouse: 0.1 },
    },
  ],
};
