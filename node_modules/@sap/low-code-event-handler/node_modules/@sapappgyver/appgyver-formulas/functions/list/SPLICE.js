const { getSchemaAssignmentErrors, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./SPLICE.runtime');

module.exports = {
  name: 'SPLICE',
  category: 'List',
  title: 'Removes the given number of items from a list at the given index, and then adds the given items there',
  description: 'Return given list wherein removes the given number of items from a list at the given index, and then adds the given items there.',
  parameters: [{
    type: 'array',
    title: 'Array',
    description: 'Given list',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    title: 'index',
    description: 'Item start index for insertion and removing',
    type: 'number',
  }, {
    title: 'removeCount',
    minimum: 0,
    examples: [0, 1, 2],
    description: 'Quantity removing items',
    type: 'number',
  }, {
    type: 'array',
    items: {
      $ref: '#item', // Refer to the generic type
    },
    title: 'newItems',
    description: 'List of items to insert',
  }],
  analyze: ([arrayParam,,, itemsParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const givenArrayItemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const itemsSchema = (itemsParam && itemsParam.schema) || { type: 'array' };
    const givenItemsSchema = getArrayItemSchema(itemsSchema) || { type: 'object' };
    const assignmentErrors = getSchemaAssignmentErrors(givenItemsSchema, givenArrayItemsSchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...assignmentErrors.map(error => ({ ...error, offset: itemsParam.offset })),
      ],
    };
  },
  execute,
  examples: [
    {
      context: {
        array: [{ a: 1 }, { a: 2 }, { a: 4 }],
        items: [{ a: 3 }, { a: 2 }, { a: 1 }],
      },
      expression: 'SPLICE(array, 2, 1, items)',
      result: [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 2 }, { a: 1 }],
    },
    {
      context: {
        array: [{ a: 1 }, { a: 2 }, { a: 4 }],
        items: [{ a: 3 }, { a: 2 }, { a: 1 }],
      },
      expression: 'SPLICE(array, 2, 0, items)',
      result: [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 2 }, { a: 1 }, { a: 4 }],
    },
    {
      context: {
        array: [{ a: 1 }, { a: 2 }, { a: 4 }],
        items: [{ a: 3 }, { a: 2 }, { a: 1 }],
      },
      expression: 'SPLICE(array, -1, 1, items)',
      result: [{ a: 1 }, { a: 2 }, { a: 3 }, { a: 2 }, { a: 1 }],
    },
    {
      context: {
        emptyArray: [],
        numbers: [1, 2, 3],
      },
      expression: 'SPLICE(emptyArray, 1, 0, numbers)',
      result: [1, 2, 3]
      ,
    },
  ],
};
