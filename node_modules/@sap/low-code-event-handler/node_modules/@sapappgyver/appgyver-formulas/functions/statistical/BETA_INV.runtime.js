const gammaLn = require('./GAMMALN.runtime');

const betacf = (x, a, b) => {
  const fpmin = 1e-30;
  const qab = a + b;
  const qap = a + 1;
  const qam = a - 1;
  let c = 1;
  let d = 1 - qab * x / qap;
  let m2;
  let aa;
  let del;
  let h;

  // These q's will be used in factors that occur in the coefficients
  if (Math.abs(d) < fpmin) {
    d = fpmin;
  }

  d = 1 / d;
  h = d; for (let m = 1; m <= 100; m++) {
    m2 = 2 * m;
    aa = m * (b - m) * x / ((qam + m2) * (a + m2));

    // One step (the even one) of the recurrence
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin) {
      d = fpmin;
    }
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin) {
      c = fpmin;
    }
    d = 1 / d;
    h *= d * c;
    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));

    // Next step of the recurrence (the odd one)
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin) {
      d = fpmin;
    }
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin) {
      c = fpmin;
    }
    d = 1 / d;
    del = d * c;
    h *= del;
    if (Math.abs(del - 1.0) < 3e-7) {
      break;
    }
  }
  return h;
};

const ibeta = (x, a, b) => {
  const bt = (x === 0 || x === 1)
    ? 0
    : Math.exp(gammaLn([a + b]) - gammaLn([a])
      - gammaLn([b]) + a * Math.log(x) + b
      * Math.log(1 - x));
  if (x < (a + 1) / (a + b + 2)) {
    return bt * betacf(x, a, b) / a;
  }
  return 1 - bt * betacf(1 - x, b, a) / b;
};

const ibetainv = (p, a, b) => {
  if (p <= 0 || p > 1 || a <= 0 || b <= 0) {
    return null;
  }
  if (p === 1) {
    return 1;
  }
  const EPS = 1e-8;
  const a1 = a - 1;
  const b1 = b - 1;
  let lna;
  let lnb;
  let pp;
  let t;
  let u;
  let err;
  let x;
  let al;
  let h;
  let w;
  if (a >= 1 && b >= 1) {
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
    if (p < 0.5) {
      x = -x;
    }
    al = (x * x - 3) / 6;
    h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));
    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1))
      * (al + 5 / 6 - 2 / (3 * h));
    x = a / (a + b * Math.exp(2 * w));
  } else {
    lna = Math.log(a / (a + b));
    lnb = Math.log(b / (a + b));
    t = Math.exp(a * lna) / a;
    u = Math.exp(b * lnb) / b;
    w = t + u;
    if (p < t / w) x = ((a * w * p) ** (1 / a));
    else x = 1 - ((b * w * (1 - p)) ** (1 / b));
  }
  const afac = gammaLn([a]) - gammaLn([b]) + gammaLn([a + b]); for (let j = 0; j < 10; j++) {
    if (x === 0 || x === 1) return x;
    err = ibeta(x, a, b) - p;
    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
    u = err / t;
    t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));
    x -= t;
    if (x <= 0) {
      x = 0.5 * (x + t);
    }
    if (x >= 1) {
      x = 0.5 * (x + t + 1);
    }
    if (Math.abs(t) < EPS * x && j > 0) {
      break;
    }
  }
  return x;
};

module.exports = ([x, alpha, beta]) => {
  if (
    typeof x === 'number'
      && Number.isFinite(x)
      && typeof alpha === 'number'
      && Number.isFinite(alpha)
      && typeof beta === 'number'
      && Number.isFinite(beta)
  ) {
    const result = ibetainv(x, alpha, beta);
    return Number.isFinite(result) ? result : null;
  }
  return null;
};
