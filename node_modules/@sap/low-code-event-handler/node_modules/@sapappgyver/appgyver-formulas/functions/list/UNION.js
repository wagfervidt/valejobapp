const { getUnionSchema, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./UNION.runtime');

module.exports = {
  name: 'UNION',
  category: 'List',
  title: 'Union two lists',
  description: `Combines the two lists returning a list that contanis unique values from the both given lists. In other words, the returned list contains no duplicate values.

The equality of values is similarly than in \`IS_EQUAL\` function.`,
  parameters: [{
    type: 'array',
    title: 'List 1',
    description: 'The first list',
  }, {
    type: 'array',
    title: 'List 2',
    description: 'The second list',
  }],
  analyze: (parameters) => {
    const arrayItemSchemas = parameters.slice(0, 2)
      .map(({ schema }) => schema && getArrayItemSchema(schema));
    const arrayItemSchema = getUnionSchema(arrayItemSchemas);
    const schema = { type: 'array' };
    if (arrayItemSchema) {
      schema.items = arrayItemSchema;
    }
    return { schema };
  },
  execute,
  examples: [
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'UNION(numbers1, numbers2)',
      result: [10, 55, 66, 54, 85, 91, 52, 94],
    },
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'UNION(numbers2, numbers1)',
      result: [52, 55, 85, 10, 94, 66, 54, 91],
    },
    {
      context: {
        array1: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 32 }, { name: 'Kate', age: 25 }],
        array2: [{ name: 'Jane', age: 22 }, { name: 'Jon', age: 32 }, { name: 'Kate', age: 30 }],
      },
      expression: 'UNION(array1, array2)',
      result: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 32 }, { name: 'Kate', age: 25 }, { name: 'Jane', age: 22 }, { name: 'Jon', age: 32 }],
    },
  ],
};
