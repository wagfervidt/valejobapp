const commandLineArgs = require('command-line-args');
const path = require('path');
const process = require('process');
const logger = require('../logger');
const { FEATURE_TYPESCRIPT, FEATURE_DOCUMENT, FEATURE_BACKEND } = require('../utils');
const fs = require('fs');

const optionDefinitions = [
  { name: 'target', type: String, multiple: false },
  { name: 'project', type: String, multiple: false }
];



let options = commandLineArgs(optionDefinitions);

function getProjectFolder() {
  if (options['project']) {
    let fullPath = path.resolve(options['project']);
    if (fs.existsSync(fullPath)) {
      return fullPath;
    } else {
      console.error(`failed to find path ${fullPath}`);
      process.exit(-1);
    }
    
  } else {
    let sCurrentPath = process.cwd();//process.env.INIT_CWD ? process.env.INIT_CWD : process.env.OLDPWD;
    return sCurrentPath;

  }
}

function processArguments() {
  function getMissingRequiredArgumentMessage() {
    if (!options['target']) {
      return logger.getError('Missing target options');
    }
    if ((options['target'] !== FEATURE_TYPESCRIPT) && (options['target'] !== FEATURE_DOCUMENT)
    && (options['target'] !== FEATURE_BACKEND)) {
      return logger.getError(`Unknown target, it must be one of ${FEATURE_TYPESCRIPT}|${FEATURE_DOCUMENT}|${FEATURE_BACKEND}`);
    }

    return null;
  }

  const missingArgumentMessage = getMissingRequiredArgumentMessage();
  if (missingArgumentMessage) {
    console.error(missingArgumentMessage);
  }
  if (missingArgumentMessage) {//|| options.help
    const getUsage = require('command-line-usage')

    const sections = [
      {
        header: 'Check MDK Metadata Features',
        content: 'Check the features used in MDK metadata'
      },
      {
        header: 'Options',
        optionList: [
          {
            name: 'target',
            typeLabel: '',
            description: 'feature used in metadata'
          },
          {
            name: 'project',
            typeLabel: '{underline folder}',
            description: 'The location of the mdk application definitions.'
          }
        ]
      }
    ]
    const usage = getUsage(sections);
    console.log(usage);
    process.exit(-1);
  }
}


exports.target = function () {
  return options['target'];
}

exports.project = function () {
  return getProjectFolder();
}
processArguments();
