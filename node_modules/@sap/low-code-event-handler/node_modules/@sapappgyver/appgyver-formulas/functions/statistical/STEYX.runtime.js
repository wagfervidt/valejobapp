const average = require('./AVERAGE.runtime');

const steyx = (arr1, arr2) => {
  if (arr1.length !== arr2.length) {
    return null;
  }
  const { length } = arr1;
  if (length === 0) {
    return null;
  }
  const Y = arr1.slice(0, length);
  const X = arr2.slice(0, length);

  const averageX = average([X]);
  const averageY = average([Y]);

  const sumOfMultyXYErrors = X.reduce((total, xItem, index) => {
    const yItem = Y[index];
    return total + ((xItem - averageX) * (yItem - averageY));
  }, 0);
  const quadXYError = sumOfMultyXYErrors ** 2;
  const errorX = X.reduce((total, item) => total + ((item - averageX) ** 2), 0);
  const errorY = Y.reduce((total, item) => total + ((item - averageY) ** 2), 0);

  if (!Number.isFinite(quadXYError) || !Number.isFinite(errorX) || !Number.isFinite(errorY)) {
    return null;
  }

  const combinedErr = errorY - (quadXYError / errorX);
  return Math.sqrt(combinedErr / (length - 2));
};

module.exports = ([array1, array2]) => {
  if (!(Array.isArray(array1) && Array.isArray(array2))) {
    return null;
  }
  const array1Valid = array1.filter(item => (typeof item === 'number' && Number.isFinite(item)));
  const array2Valid = array2.filter(item => (typeof item === 'number' && Number.isFinite(item)));
  const result = steyx(array1Valid, array2Valid);
  return Number.isFinite(result) ? result : null;
};
