/* eslint quote-props: ["error", "consistent-as-needed"] */
const chroma = require('chroma-js');

// Re-used regexp objects
const REGEX_INTEGER = /^-?\d+$/;
const REGEX_NUMBER = /^-?\d+(\.\d+)?$/;
const REGEX_PERCENTAGE = /^-?\d+(\.\d+)?%$/;
const REGEX_DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
const REGEX_DATE_TIME = /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i;
// (sources from jsen validator):
// http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
// http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
const REGEX_EMAIL = /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i;
const REGEX_URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
const REGEX_URL = /^[a-z][a-z0-9+.-]*:(?:\/\/(?:[a-z0-9._~:/?#[\]!$&'()*+,;%=-]+@)?[a-z0-9._~/?#[\]@!$&'()*+,;%=-]+(?::\d+)?)?[a-z0-9._~:/#[\]@!$&'()*+,;%=-]*(?:\?[a-z0-9._~:/?[\]@!$&'()*+,;%=-]*)?(?:#[a-z0-9._~:/?#[\]@!$&'()*+,;%=-]*)?$/i;
const REGEX_WEB_URL = /^(?:(?:https?):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
const REGEX_UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
const REGEX_COLOR = /^(?:rgba?\(\d+(?:\.\d+)?%?(?:,\s*\d+(?:\.\d+)?%?){2}(?:,\s*\d+(?:\.\d+)?)?\)|hsla?\(\d+(?:\.\d+)?(?:,\s*\d+(?:\.\d+)?%){2}(?:,\s*\d+(?:\.\d+)?)?\)|#[0-9a-f]{3}(?:[0-9a-f]{3})?)$/i;

/**
 * Object whose keys defines all the formats understood by the expression system.
 * All the formats defined here are applied e.g. constant values automatically.
 * Other format keywords may be used as well but the expression system does not
 * understand their structure.
 *
 * Some formats are based on the implementations here:
 * https://github.com/epoberezkin/ajv/blob/d5edde43752e8c1bdb26074402452a41fe0742cb/lib/compile/formats.js
 */
const formats = {
  'blank': {
    title: 'Blank text',
    description: 'A text that has no characters.',
    examples: [''],
    matches: (value) => !value,
  },
  'integer': {
    title: 'Integer',
    description: 'A text that only consists of digits (at least one), optionally starting with a minus sign.',
    examples: ['3', '-5', '123'],
    matches: (value) => REGEX_INTEGER.test(value),
    extends: ['number'],
  },
  'number': {
    title: 'Number',
    description: 'A text that only consists of digits, and optionally a decimal dot and a minus sign.',
    examples: ['3', '4.5', '-0.013'],
    matches: (value) => REGEX_NUMBER.test(value),
  },
  'percentage': {
    title: 'Percentage',
    description: 'A text representing a number and a percentage character. The value may be negative or contain a decimal dot.',
    examples: ['3%', '4.5%', '-0.013%'],
    matches: (value) => REGEX_PERCENTAGE.test(value),
  },
  'date': {
    title: 'Date',
    description: 'A text representing a valid ISO-formatted date.',
    examples: ['2019-07-10'],
    matches: (value) => REGEX_DATE.test(value),
  },
  'date-time': {
    title: 'Date/time',
    description: 'A text representing a valid ISO-formatted date/time.',
    examples: ['2019-07-10T09:56:12.123Z'],
    matches: (value) => REGEX_DATE_TIME.test(value),
  },
  'email': {
    title: 'Email',
    description: 'A text representing a valid email address.',
    examples: ['john.smith@example.com'],
    matches: (value) => REGEX_EMAIL.test(value),
  },
  'uri': {
    title: 'URI',
    description: 'A text representing a valid Uniform Resource Identifier (URI)',
    examples: [
      'https://john.doe@www.example.com:123/forum/questions/?tag=networking&order=newest#top',
      'ldap://[2001:db8::7]/c=GB?objectClass?one',
      'tel:+1-816-555-1212',
    ],
    matches: (value) => REGEX_URI.test(value),
  },
  'url': {
    title: 'URL (any protocol)',
    examples: [
      'http://www.example.com/index.html',
      'ftp://ftp.example.com/files/data.zip',
      'mailto://john.smith@example.com',
    ],
    description: 'A text representing a valid Uniform Resource Locator (URL)',
    matches: (value) => REGEX_URL.test(value) || REGEX_WEB_URL.test(value),
    extends: ['uri'],
  },
  'web-url': {
    title: 'Web URL (http or https)',
    examples: [
      'http://www.example.com/index.html',
    ],
    description: 'A text representing a valid web address, as an Uniform Resource Locator (URL), that has either `http` or `https` procotol.',
    matches: (value) => REGEX_WEB_URL.test(value),
    extends: ['url'],
  },
  'uuid': {
    title: 'UUID',
    examples: [
      'ec20edcb-ab7f-41f4-99fd-6604bab3502b',
    ],
    description: 'A text representing a valid universally unique identifier (UUID)',
    matches: (value) => REGEX_UUID.test(value),
  },
  'color': {
    title: 'Color',
    description: 'A text representing a valid color code',
    examples: [
      'rgb(200, 140, 120)',
      'rgba(10, 20, 10, 0.3)',
      'hsl(180, 100%, 25%)',
      'hsla(180, 100%, 10%, 0.9)',
      '#ff3399',
      '#FF3399',
      '#aa4',
      'black',
      'hotpink',
    ],
    matches: (value) => REGEX_COLOR.test(value) || chroma.colors[value] != null,
  },
};

/**
 * Returns all the known formats to which the given string matches.
 * @param {string} str string value
 */
function detectStringFormats(str) {
  const formatList = Object.keys(formats).filter(
    (formatName) => formats[formatName].matches(str),
  );
  // Filter out formats that are being extended by other formats
  return formatList.filter(
    (format1, index1) => formatList.every(
      (format2, index2) => index1 === index2 || !isFormatCompatible(format2, format1),
    ),
  );
}

function isFormatCompatible(subFormat, parentFormat) {
  if (!subFormat || !parentFormat) {
    return false;
  }
  if (subFormat === parentFormat) {
    return true;
  }
  const format = formats[subFormat];
  return format != null && format.extends != null && format.extends.some(
    (extendFormat) => isFormatCompatible(extendFormat, parentFormat),
  );
}

module.exports.detectStringFormats = detectStringFormats;
module.exports.formats = formats;
module.exports.isFormatCompatible = isFormatCompatible;
