const execute = require('./REDUCE_INIT.runtime');

module.exports = {
  name: 'REDUCE_INIT',
  category: 'List',
  title: 'Reduce a list to a single value',
  description: `Reduces a list to a single value by evaluating a formula for each item in the list, accumulating to a result value which is then passed to the next evaluation.

The iteration is done from the first item to the last item. The iteration starts by using the 1st item in the list as an initial accumulator value.
Alternatively you can use \`REDUCE_INIT\` function instead and provide an initial value.

If the list has only one item, that item is returned. If the list is empty, returns \`null\`.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items to reduce',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    title: 'Initial accumulator',
    description: 'Initial value for the accumulator passed to the first evaluation.',
    $id: '#initial', // Make this a generic type
  }, {
    type: 'function',
    title: 'Reducer formula',
    description: 'Formula that returns a reduced result using the current item and the previous accumulated result value',
    parameters: [{
      name: 'accumulator',
      title: 'Accumulator value',
      description: 'The current accumulated, reduced result value',
      anyOf: [{
        $ref: '#accumulator', // Refers to the generic type
      }, {
        $ref: '#initial', // Refers to the generic type
      }],
    }, {
      name: 'item',
      title: 'Current item',
      description: 'The current item from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position of the current item in the list as an index number starting from 0',
      examples: [0, 1, 2],
    }],
    returnValue: {
      $id: '#accumulator', // Make this a generic type
      title: 'Accumulated value',
      description: 'Accumulated value reduced from the current item and the previous accumulator',
    },
  }],
  analyze: ([,, accumulatorParam]) => {
    const accumulatorSchema = (accumulatorParam && accumulatorParam.schema) || {};
    return { schema: accumulatorSchema };
  },
  execute,
  examples: [
    {
      expression: 'REDUCE_INIT(products, 0, accumulator + item.price)',
      context: {
        products: [
          { name: 'Swiss army knife', price: 60 },
          { name: 'Duct tape', price: 5 },
          { name: 'Glue', price: 6 },
        ],
      },
      result: 71,
    },
    {
      expression: 'REDUCE_INIT<sum, product>(products, 0, sum + product.price)',
      context: {
        products: [
          { name: 'Swiss army knife', price: 60 },
          { name: 'Duct tape', price: 5 },
          { name: 'Glue', price: 6 },
        ],
      },
      result: 71,
    },
  ],
};
