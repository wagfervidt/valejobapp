"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMinimalAssignableSchema = void 0;
var _1 = require(".");
var utils_1 = require("./utils/utils");
function getMinimalAssignableObjectSchema(schema) {
    if (!schema.properties)
        return (0, _1.omitAnnotations)(schema);
    var requiredProperties = (0, utils_1.pick)((0, _1.getRequiredObjectSchemaProperties)(schema), schema.properties);
    return {
        type: 'object',
        properties: (0, utils_1.mapValues)(function (property) { return getMinimalAssignableSchema(property); }, requiredProperties),
    };
}
function getMinimalAssignableArraySchema(schema) {
    if (!schema.items)
        return (0, _1.omitAnnotations)(schema);
    return {
        type: 'array',
        items: getMinimalAssignableSchema(schema.items),
    };
}
function getMinimalAssignableAnyOfSchema(schema) {
    return schema.anyOf.length
        ? getMinimalAssignableSchema(schema.anyOf[0])
        : (0, _1.omitAnnotations)(schema);
}
function getMinimalAssignableAllOfSchema(schema) {
    if (!schema.allOf.length)
        return (0, _1.omitAnnotations)(schema);
    return {
        allOf: schema.allOf.map(function (oneOf) { return getMinimalAssignableSchema(oneOf); }),
    };
}
/**
 * Returns minimal schema that is assignable to given schema. All fields in the returned schema
 * are required and all nested fields in objects as well. Basic schemas are returned as is.
 * All annotations are removed from the schema.
 *
 * @param {Schema} schema schema to assign to
 * @returns {Schema}
 */
function getMinimalAssignableSchema(schema) {
    if ('anyOf' in schema) {
        return getMinimalAssignableAnyOfSchema(schema);
    }
    if ('allOf' in schema) {
        return getMinimalAssignableAllOfSchema(schema);
    }
    switch (schema.type) {
        case 'array': {
            return getMinimalAssignableArraySchema(schema);
        }
        case 'object': {
            return getMinimalAssignableObjectSchema(schema);
        }
        case 'json':
        case 'number':
        case 'boolean':
        case 'string':
        default: {
            return (0, _1.omitAnnotations)(schema);
        }
    }
}
exports.getMinimalAssignableSchema = getMinimalAssignableSchema;
