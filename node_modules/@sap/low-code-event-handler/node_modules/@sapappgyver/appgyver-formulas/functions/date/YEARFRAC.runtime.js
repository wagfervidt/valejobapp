const { parseDateTime } = require('../../datetime');

const isLeapYear = year => new Date(year, 1, 29).getMonth() === 1;
const daysBetween = (startDate, endDate) => Math.ceil((endDate - startDate) / 1000 / 60 / 60 / 24);
const feb29Between = (date1, date2) => {
  const year1 = date1.get('year');
  const mar1year1 = new Date(year1, 2, 1);

  if (isLeapYear(year1) && date1 < mar1year1 && date2 >= mar1year1) {
    return true;
  }
  const year2 = date2.get('year');
  const mar1year2 = new Date(year2, 2, 1);
  return (year2 && date2 >= mar1year2 && date1 < mar1year2);
};

module.exports = ([startDate, endDate, convention = 'us_nasd']) => {
  const startMoment = parseDateTime(startDate);
  const endMoment = parseDateTime(endDate);
  if (startMoment.isValid() && endMoment.isValid() && typeof convention === 'string'
    && typeof startDate === 'string' && typeof endDate === 'string') {
    const basis = convention || 'us_nasd';
    const valuesBasis = ['us_nasd', 'actual', 'actual_360', 'actual_365', 'european'];
    if (valuesBasis.includes(basis)) {
      let sd = startMoment.get('date');
      const sm = startMoment.get('month') + 1;
      const sy = startMoment.get('year');
      let ed = endMoment.get('date');
      const em = endMoment.get('month') + 1;
      const ey = endMoment.get('year');
      const years = (ey - sy) + 1;
      const days = (new Date(ey + 1, 0, 1) - new Date(sy, 0, 1)) / 1000 / 60 / 60 / 24;
      const average = days / years;
      let ylength = 365;

      // eslint-disable-next-line default-case
      switch (basis) {
        case 'us_nasd':
          if (sd === 31 && ed === 31) {
            sd = 30;
            ed = 30;
          } else if (sd === 31) {
            sd = 30;
          } else if (sd === 30 && ed === 31) {
            ed = 30;
          }
          return Math.abs(((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360);
        case 'actual':
          if ((sy === ey || ((sy + 1) === ey)) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
            if ((sy === ey && isLeapYear(sy))
                || feb29Between(startMoment, endMoment)
                || (em === 1 && ed === 29)) {
              ylength = 366;
            }
            return Math.abs(daysBetween(startMoment, endMoment) / ylength);
          }
          return Math.abs(daysBetween(startMoment, endMoment) / average);
        case 'actual_360':
          return Math.abs(daysBetween(startMoment, endMoment) / 360);
        case 'actual_365':
          return Math.abs(daysBetween(startMoment, endMoment) / 365);
        case 'european':
          return Math.abs(((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360);
      }
    }
    return null;
  }
  return null;
};
