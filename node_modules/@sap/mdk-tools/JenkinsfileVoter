#!groovy
@Library(['piper-lib','piper-lib-os']) _

pipeline {
    agent any
    options {
        timestamps()
        ansiColor('xterm')
        disableConcurrentBuilds()
        //checkoutToSubdirectory('mdk-wing')
    }
    environment {

        MDEDEV_YAML = "/mde-deployment/mde-wing/bas-extension/version-dev.yml"
        MDEMAIN_YAML = "/mde-deployment/mde-wing/bas-extension/version-main.yml"
        MDEYAML = "$MDEMAIN_YAML"
        MDEDEV_EXTENTION = "mde-deployment/mde-wing/bas-extension/mde-dev.json"
        MDEMAIN_EXTENTION = "mde-deployment/mde-wing/bas-extension/extension-main.json"
        MDEEXTENSIONJSON= "/extension-data.json"
        MDECHARTDIRTORY = "./mdk-vsc-wing-chart"
        
        
        BASHOST = "mckbj.cry10cf.int.applicationstudio.cloud.sap"
       
        DEPLOY_BAS = 'production'
        
        POSTDIR= 'post/main'
        MDECHARTROOT = "$WORKSPACE" + '/mdk-vsc-wing-chart' 
    }
    stages {
        stage('mdk-wing Setup env') {
            steps {
                setupPipelineEnvironment script: this
            }
        }
        stage('uni test, Code coverage report, IP Scan and PPMS, Security scan') {
            parallel {
                stage('IP Scan and PPMS') {
                    stages {
                        stage('IP Scan') {
                            steps {
                                echo 'whitesourceExecuteScan script: this'
                                whitesourceExecuteScan script: this
                            }
                        }
                        stage('PPMS') {
                            steps {
                                echo 'sapCheckPPMSCompliance script: this'
                            }
                        }
                    }
                }
                stage('Security scan') {
                    steps {
                        echo 'checkmarxExecuteScan script: this'
                        //checkmarxExecuteScan script: this
                    }
                }
            }
        }
    }
    /*
    post {
        always {
            cleanWs()
            //mailSendNotification script: this
        }
    }
    */
}