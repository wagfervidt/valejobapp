function horner(arr, v) {
  let z = 0; for (let i = 0; i < arr.length; ++i) z = v * z + arr[i]; return z;
}
function besselIter(x, n, f0, f1, sign) {
  if (n === 0) return f0;
  if (n === 1) return f1;
  const tdx = 2 / x;
  let f2 = f1;
  let f01 = f0;
  let f11 = f1; for (let o = 1; o < n; ++o) {
    f2 = f11 * o * tdx + sign * f01;
    f01 = f11;
    f11 = f2;
  }
  return f2;
}
function besselWrap(bessel0, bessel1, nonzero, sign) {
  return function bessel(x, n) {
    if (nonzero) {
      if (x === 0) return (nonzero === 1 ? -Infinity : Infinity);
      if (x < 0) return NaN;
    }
    if (n === 0) return bessel0(x);
    if (n === 1) return bessel1(x);
    if (n < 0) return NaN;
    // eslint-disable-next-line no-bitwise
    const fn = n | 0;
    const b0 = bessel0(x);
    const b1 = bessel1(x);
    return besselIter(x, fn, b0, b1, sign);
  };
}
function besselj(x, n) {
  const W = 0.636619772; // 2 / Math.PI

  const b0a1a = [57568490574.0, -13362590354.0, 651619640.7,
    -11214424.18, 77392.33017, -184.9052456].reverse();
  const b0a2a = [57568490411.0, 1029532985.0, 9494680.718,
    59272.64853, 267.8532712, 1.0].reverse();
  const b0a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5,
    0.2093887211e-6].reverse();
  const b0a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5,
    0.7621095161e-6, -0.934935152e-7].reverse();

  const bessel0 = (z) => {
    let a = 0;
    let a1 = 0;
    let a2 = 0;
    let y = z * z;
    if (z < 8) {
      a1 = horner(b0a1a, y);
      a2 = horner(b0a2a, y);
      a = a1 / a2;
    } else {
      const xx = z - 0.785398164;
      y = 64 / y;
      a1 = horner(b0a1b, y);
      a2 = horner(b0a2b, y);
      a = Math.sqrt(W / z) * (Math.cos(xx) * a1 - Math.sin(xx) * a2 * 8 / z);
    }
    return a;
  };

  const b1a1a = [72362614232.0, -7895059235.0, 242396853.1, -2972611.439,
    15704.48260, -30.16036606].reverse();
  const b1a2a = [144725228442.0, 2300535178.0, 18583304.74, 99447.43394,
    376.9991397, 1.0].reverse();
  const b1a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5,
    -0.240337019e-6].reverse();
  const b1a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5,
    -0.88228987e-6, 0.105787412e-6].reverse();

  const bessel1 = (z) => {
    let a = 0; let a1 = 0; let a2 = 0; let y = z * z; const
      xx = Math.abs(z) - 2.356194491;
    if (Math.abs(z) < 8) {
      a1 = z * horner(b1a1a, y);
      a2 = horner(b1a2a, y);
      a = a1 / a2;
    } else {
      y = 64 / y;
      a1 = horner(b1a1b, y);
      a2 = horner(b1a2b, y);
      a = Math.sqrt(W / Math.abs(z)) * (Math.cos(xx) * a1 - Math.sin(xx) * a2 * 8 / Math.abs(z));
      if (z < 0) a = -a;
    }
    return a;
  };
  const fn = Math.round(n);
  if (!Number.isFinite(x)) return Number.isNaN(x) ? x : 0;
  if (fn < 0) return ((fn % 2) ? -1 : 1) * besselj(x, -fn);
  if (x < 0) return ((fn % 2) ? -1 : 1) * besselj(-x, fn);
  if (fn === 0) return bessel0(x);
  if (fn === 1) return bessel1(x);
  if (x === 0) return 0;

  let ret = 0.0;
  if (x > fn) {
    ret = besselIter(x, fn, bessel0(x), bessel1(x), -1);
  } else {
    const m = 2 * Math.floor((fn + Math.floor(Math.sqrt(40 * fn))) / 2);
    let jsum = false;
    let bjp = 0.0; let
      sum = 0.0;
    let bj = 1.0; let
      bjm = 0.0;
    const tox = 2 / x; for (let j = m; j > 0; j--) {
      bjm = j * tox * bj - bjp;
      bjp = bj;
      bj = bjm;
      if (Math.abs(bj) > 1E10) {
        bj *= 1E-10;
        bjp *= 1E-10;
        ret *= 1E-10;
        sum *= 1E-10;
      }
      if (jsum) sum += bj;
      jsum = !jsum;
      if (j === fn) ret = bjp;
    }
    sum = 2.0 * sum - bj;
    ret /= sum;
  }
  return ret;
}
function bessely(x, n) {
  const W = 0.636619772;

  const b0a1a = [-2957821389.0, 7062834065.0, -512359803.6,
    10879881.29, -86327.92757, 228.4622733].reverse();
  const b0a2a = [40076544269.0, 745249964.8, 7189466.438, 47447.26470, 226.1030244, 1.0].reverse();
  const b0a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5,
    0.2093887211e-6].reverse();
  const b0a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6,
    -0.934945152e-7].reverse();

  const bessel0 = (z) => {
    let a = 0;
    let a1 = 0;
    let a2 = 0;
    let y = z * z;
    const xx = z - 0.785398164;
    if (z < 8) {
      a1 = horner(b0a1a, y);
      a2 = horner(b0a2a, y);
      a = a1 / a2 + W * besselj(z, 0) * Math.log(z);
    } else {
      y = 64 / y;
      a1 = horner(b0a1b, y);
      a2 = horner(b0a2b, y);
      a = Math.sqrt(W / z) * (Math.sin(xx) * a1 + Math.cos(xx) * a2 * 8 / z);
    }
    return a;
  };

  const b1a1a = [-0.4900604943e13, 0.1275274390e13, -0.5153438139e11, 0.7349264551e9,
    -0.4237922726e7, 0.8511937935e4].reverse();
  const b1a2a = [0.2499580570e14, 0.4244419664e12, 0.3733650367e10, 0.2245904002e8,
    0.1020426050e6, 0.3549632885e3, 1].reverse();
  const b1a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();
  const b1a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6,
    0.105787412e-6].reverse();

  const bessel1 = (z) => {
    let a = 0;
    let a1 = 0;
    let a2 = 0;
    let y = z * z;
    const xx = z - 2.356194491;
    if (z < 8) {
      a1 = z * horner(b1a1a, y);
      a2 = horner(b1a2a, y);
      a = a1 / a2 + W * (besselj(z, 1) * Math.log(z) - 1 / z);
    } else {
      y = 64 / y;
      a1 = horner(b1a1b, y);
      a2 = horner(b1a2b, y);
      a = Math.sqrt(W / z) * (Math.sin(xx) * a1 + Math.cos(xx) * a2 * 8 / z);
    }
    return a;
  };

  return besselWrap(bessel0, bessel1, 1, -1)(x, n);
}
function besseli(x, n) {
  const b0a = [1.0, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.360768e-1, 0.45813e-2].reverse();
  const b0b = [0.39894228, 0.1328592e-1, 0.225319e-2, -0.157565e-2, 0.916281e-2, -0.2057706e-1,
    0.2635537e-1, -0.1647633e-1, 0.392377e-2].reverse();

  const bessel0 = (y) => {
    if (y <= 3.75) return horner(b0a, y * y / (3.75 * 3.75));
    return Math.exp(Math.abs(y)) / Math.sqrt(Math.abs(y)) * horner(b0b, 3.75 / Math.abs(y));
  };

  const b1a = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.2658733e-1, 0.301532e-2,
    0.32411e-3].reverse();
  const b1b = [0.39894228, -0.3988024e-1, -0.362018e-2, 0.163801e-2, -0.1031555e-1, 0.2282967e-1,
    -0.2895312e-1, 0.1787654e-1, -0.420059e-2].reverse();

  const bessel1 = (y) => {
    if (y < 3.75) return y * horner(b1a, y * y / (3.75 * 3.75));
    return (y < 0 ? -1 : 1) * Math.exp(Math.abs(y))
    / Math.sqrt(Math.abs(y)) * horner(b1b, 3.75 / Math.abs(y));
  };
  const fn = Math.round(n);
  if (fn === 0) return bessel0(x);
  if (fn === 1) return bessel1(x);
  if (fn < 0) return NaN;
  if (Math.abs(x) === 0) return 0;
  if (x === Infinity) return Infinity;

  let ret = 0.0;
  let j;
  const tox = 2 / Math.abs(x);
  let bip = 0.0; let bi = 1.0;
  let bim = 0.0;
  const m = 2 * Math.round((fn + Math.round(Math.sqrt(40 * fn))) / 2); for (j = m; j > 0; j--) {
    bim = j * tox * bi + bip;
    bip = bi; bi = bim;
    if (Math.abs(bi) > 1E10) {
      bi *= 1E-10;
      bip *= 1E-10;
      ret *= 1E-10;
    }
    if (j === fn) ret = bip;
  }
  ret *= besseli(x, 0) / bi;
  return x < 0 && (fn % 2) ? -ret : ret;
}

function besselk(x, n) {
  const b0a = [-0.57721566, 0.42278420, 0.23069756, 0.3488590e-1, 0.262698e-2, 0.10750e-3,
    0.74e-5].reverse();
  const b0b = [1.25331414, -0.7832358e-1, 0.2189568e-1, -0.1062446e-1, 0.587872e-2, -0.251540e-2,
    0.53208e-3].reverse();

  const bessel0 = (y) => {
    if (y <= 2) return -Math.log(y / 2) * besseli(y, 0) + horner(b0a, y * y / 4);
    return Math.exp(-y) / Math.sqrt(y) * horner(b0b, 2 / y);
  };

  const b1a = [1.0, 0.15443144, -0.67278579, -0.18156897, -0.1919402e-1, -0.110404e-2,
    -0.4686e-4].reverse();
  const b1b = [1.25331414, 0.23498619, -0.3655620e-1, 0.1504268e-1, -0.780353e-2, 0.325614e-2,
    -0.68245e-3].reverse();

  const bessel1 = (y) => {
    if (y <= 2) return Math.log(y / 2) * besseli(y, 1) + (1 / y) * horner(b1a, y * y / 4);
    return Math.exp(-y) / Math.sqrt(y) * horner(b1b, 2 / y);
  };

  return besselWrap(bessel0, bessel1, 2, 1)(x, n);
}

module.exports.besselk = besselk;
module.exports.besselj = besselj;
module.exports.bessely = bessely;
module.exports.besseli = besseli;
