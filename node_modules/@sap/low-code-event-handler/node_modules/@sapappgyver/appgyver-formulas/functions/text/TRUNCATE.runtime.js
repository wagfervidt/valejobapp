const TRIM_CHARS = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u2028\u2029\u3000\uFEFF';
const TRUNC_REG = RegExp(`(?=[${TRIM_CHARS}])`);

const truncateOnWord = (str, maxLength, ellipsis) => {
  const words = str.split(TRUNC_REG);
  let count = 0;
  const limit = (maxLength < 0) ? 0 : maxLength;
  const firstWord = words[0];
  let result = '';
  if (firstWord.length >= limit) {
    let placeToInsert = limit - ellipsis.length;
    placeToInsert = (placeToInsert > 0) ? placeToInsert : 0;
    const truncatedString = firstWord.substring(0, placeToInsert) + ellipsis;
    result = (truncatedString.length > limit)
      ? truncatedString.substring(0, limit)
      : truncatedString;
  } else {
    const truncatedString = words.filter((word) => {
      count += word.length;
      return count <= limit - ellipsis.length;
    }).join('');
    result = truncatedString + ellipsis;
  }
  return (result.length > limit) ? result.substring(0, limit) : result;
};

module.exports = ([string, length, ellipsis]) => {
  if (typeof string !== 'string') {
    return null;
  }
  if (!(typeof length === 'number' && Number.isFinite(length))) {
    return null;
  }
  const validEllipsis = (typeof ellipsis === 'string') ? ellipsis : 'â€¦';
  if (string.length <= length) {
    return string.toString();
  }
  return truncateOnWord(string, length, validEllipsis);
};
