const supportedLocales = [
  'en', 'it', 'fr', 'de', 'de-DE', 'fi', 'fi-FI', 'de-AT', 'de-CH', 'de-LI', 'de-BE', 'hi-IN', 'en-IN', 'ro', 'ro-RO', 'hu', 'hu-HU', 'da-DK', 'nb-NO', 'sv-SE', 'ru-RU',
];

function numbertoLocaleString(value, locale, opts) {
  const roundOff = (number, precision) => +((+number).toFixed(precision));
  const replaceSeparators = (sNum, separators) => {
    const sNumParts = sNum.split('.');
    if (separators && separators.thousands) {
      sNumParts[0] = sNumParts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, `$1${separators.thousands}`);
    } else if (separators && separators.hundreds) {
      sNumParts[0] = sNumParts[0].replace(/(\d)(?=(\d\d)+(?!\d))/g, `$1${separators.hundreds}`);
    }
    // eslint-disable-next-line no-param-reassign
    sNum = sNumParts.join(separators.decimal);
    return sNum;
  };
  const getLast3Digits = (sNum, options) => {
    const temp = `${roundOff(sNum % 1000, 3)}`;
    const sNumParts = temp.split('.');
    // eslint-disable-next-line default-case
    switch (sNumParts[0].length) {
      case 0:
        sNumParts[0] = '000';
        break;
      case 1:
        sNumParts[0] = `00${sNumParts[0]}`;
        break;
      case 2:
        sNumParts[0] = `0${sNumParts[0]}`;
        break;
    }
    let splitNum = sNum.split('.');
    if (!options.decimalCount) {
      return sNumParts[0];
    }
    splitNum = Number(sNum).toFixed(options.decimalCount).split('.');
    sNumParts[1] = `${splitNum[1]}`;

    return sNumParts.join('.');
  };
  const renderFormat = (template, props) => {
    Object.keys(props).forEach((prop) => {
      // eslint-disable-next-line no-param-reassign
      template = template.replace(`{{${prop}}}`, props[prop]);
    });
    return template;
  };
  const mapMatch = (map, local) => {
    let match = local;
    const language = local && local.toLowerCase().match(/^\w+/);
    // eslint-disable-next-line no-prototype-builtins
    if (!map.hasOwnProperty(local)) {
      // eslint-disable-next-line no-prototype-builtins
      if (map.hasOwnProperty(language)) {
        match = language;
      } else {
        match = 'en';
      }
    }
    return map[match];
  };
  const dotThousCommaDec = (sNum) => {
    const separators = {
      decimal: ',',
      thousands: '.',
    };
    return replaceSeparators(sNum, separators);
  };
  const commaThousDotDec = (sNum) => {
    const separators = {
      decimal: '.',
      thousands: ',',
    };
    return replaceSeparators(sNum, separators);
  };
  const spaceThousCommaDec = (sNum) => {
    const seperators = {
      decimal: ',',
      thousands: ' ',
    };
    return replaceSeparators(sNum, seperators);
  };
  const spaceHundredsCommaThousCommaDec = (sNum, options) => {
    const hundredSeperators = {
      decimal: '.',
      hundreds: ',',
    };
    const thoudandSeperators = {
      decimal: '.',
      thousands: ',',
    };
    // eslint-disable-next-line no-param-reassign
    sNum = +sNum;
    if (sNum >= 1000) {
      return `${replaceSeparators(`${Math.floor(sNum / 1000)}`, hundredSeperators)},${getLast3Digits(`${sNum}`, options)}`;
    }
    return replaceSeparators(`${sNum}`, thoudandSeperators);
  };
  const apostrophThousDotDec = (sNum) => {
    const seperators = {
      decimal: '.',
      thousands: '\u0027',
    };
    return replaceSeparators(sNum, seperators);
  };
  const transformForLocale = {
    en: commaThousDotDec,
    it: dotThousCommaDec,
    fr: spaceThousCommaDec,
    fi: spaceThousCommaDec,
    de: dotThousCommaDec,
    'de-DE': dotThousCommaDec,
    'fi-FI': spaceThousCommaDec,
    'de-AT': dotThousCommaDec,
    'de-CH': apostrophThousDotDec,
    'de-LI': apostrophThousDotDec,
    'de-BE': dotThousCommaDec,
    'hi-IN': spaceHundredsCommaThousCommaDec,
    'en-IN': spaceHundredsCommaThousCommaDec,
    ro: dotThousCommaDec,
    'ro-RO': dotThousCommaDec,
    hu: spaceThousCommaDec,
    'hu-HU': spaceThousCommaDec,
    'da-DK': dotThousCommaDec,
    'nb-NO': spaceThousCommaDec,
    'sv-SE': spaceThousCommaDec,
    'ru-RU': spaceThousCommaDec,
  };
  const currencyFormatMap = {
    en: 'prespace',
    it: 'post',
    fr: 'post',
    fi: 'post',
    de: 'post',
    'de-DE': 'post',
    'fi-FI': 'post',
    'de-AT': 'prespace',
    'de-CH': 'prespace',
    'de-LI': 'post',
    'de-BE': 'post',
    ro: 'post',
    'ro-RO': 'post',
    hu: 'post',
    'hu-HU': 'post',
    'da-DK': 'post',
    'nb-NO': 'post',
    'sv-SE': 'post',
    'ru-RU': 'post',
  };
  const currencySymbols = {
    afn: '؋',
    ars: '$',
    awg: 'ƒ',
    aud: '$',
    azn: '₼',
    bsd: '$',
    bbd: '$',
    byr: 'p.',
    bzd: 'BZ$',
    bmd: '$',
    bob: 'Bs.',
    bam: 'KM',
    bwp: 'P',
    bgn: 'лв',
    brl: 'R$',
    bnd: '$',
    khr: '៛',
    cad: '$',
    kyd: '$',
    clp: '$',
    cny: '¥',
    cop: '$',
    crc: '₡',
    hrk: 'kn',
    cup: '₱',
    czk: 'Kč',
    dkk: 'kr.',
    dop: 'RD$',
    xcd: '$',
    egp: '£',
    svc: '$',
    eek: 'kr',
    eur: '€',
    fkp: '£',
    fjd: '$',
    ghc: '¢',
    gip: '£',
    gtq: 'Q',
    ggp: '£',
    gyd: '$',
    hnl: 'L',
    hkd: '$',
    huf: 'Ft',
    isk: 'kr',
    inr: '₹',
    idr: 'Rp',
    irr: '﷼',
    imp: '£',
    ils: '₪',
    jmd: 'J$',
    jpy: '¥',
    jep: '£',
    kes: 'KSh',
    kzt: 'лв',
    kpw: '₩',
    krw: '₩',
    kgs: 'лв',
    lak: '₭',
    lvl: 'Ls',
    lbp: '£',
    lrd: '$',
    ltl: 'Lt',
    mkd: 'ден',
    myr: 'RM',
    mur: '₨',
    mxn: '$',
    mnt: '₮',
    mzn: 'MT',
    nad: '$',
    npr: '₨',
    ang: 'ƒ',
    nzd: '$',
    nio: 'C$',
    ngn: '₦',
    nok: 'kr',
    omr: '﷼',
    pkr: '₨',
    pab: 'B/.',
    pyg: 'Gs',
    pen: 'S/.',
    php: '₱',
    pln: 'zł',
    qar: '﷼',
    ron: 'lei',
    rub: '₽',
    shp: '£',
    sar: '﷼',
    rsd: 'Дин.',
    scr: '₨',
    sgd: '$',
    sbd: '$',
    sos: 'S',
    zar: 'R',
    lkr: '₨',
    sek: 'kr',
    chf: 'CHF',
    srd: '$',
    syp: '£',
    tzs: 'TSh',
    twd: 'NT$',
    thb: '฿',
    ttd: 'TT$',
    try: '',
    trl: '₤',
    tvd: '$',
    ugx: 'USh',
    uah: '₴',
    gbp: '£',
    usd: '$',
    uyu: '$U',
    uzs: 'лв',
    vef: 'Bs',
    vnd: '₫',
    yer: '﷼',
    zwd: 'Z$',
  };
  const currencyFormats = {
    pre: '{{code}}{{num}}',
    post: '{{num}} {{code}}',
    prespace: '{{code}} {{num}}',
  };

  const options = Object.assign({}, opts);
  if (locale && locale.length < 2) throw new RangeError(`Invalid language tag: ${locale}`);
  let sNum = Number(value);
  sNum = sNum.toFixed(options.decimalCount);
  sNum = mapMatch(transformForLocale, locale)(sNum, options);
  if (options && options.currency && options.style === 'currency') {
    const format = currencyFormats[mapMatch(currencyFormatMap, locale)];
    if (options.currencyDisplay === 'code') {
      sNum = renderFormat(format, {
        num: sNum,
        code: options.currency.toUpperCase(),
      });
    } else {
      sNum = renderFormat(format, {
        num: sNum,
        code: currencySymbols[options.currency.toLowerCase()],
      });
    }
  }
  return `${sNum}`;
}

module.exports.numbertoLocaleString = numbertoLocaleString;
module.exports.supportedLocales = supportedLocales;
