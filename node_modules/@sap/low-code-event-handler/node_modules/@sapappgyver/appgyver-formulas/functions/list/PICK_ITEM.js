const { resolveObjectMemberAccessor } = require('@sapappgyver/appgyver-schemas');
const execute = require('./PICK_ITEM.runtime');

module.exports = {
  name: 'PICK_ITEM',
  category: 'List',
  title: 'Pick item from a list by its index',
  description: 'Returns an item in the source list by the given index. If **Index** is out of bounds for the list (i.e. negative or larger than the list length - 1, since indexing starts from 0), `null` is returned.',
  parameters: [{
    type: 'array',
    title: 'Values',
    description: 'Source list',
    inversible: true,
  }, {
    title: 'Index',
    description: 'Index of item to return',
  }],
  maxInversions: 1,
  analyze: ([arrayParam, indexParam], offset, parameterErrors) => {
    const itemSchema = (arrayParam && arrayParam.schema) || {};
    const accessorSchema = (indexParam && indexParam.schema) || {};
    const { schema, errors } = resolveObjectMemberAccessor(itemSchema, accessorSchema);
    const propertySchema = schema || {};
    return {
      schema: propertySchema,
      errors: parameterErrors.length ? [] : errors.map(error => ({
        ...error, offset: indexParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'PICK_ITEM(numbers, 0)',
      result: 1,
    },
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'PICK_ITEM(numbers, 1)',
      result: 2,
    },
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'PICK_ITEM(numbers, 10)',
      result: undefined,
    },
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'PICK_ITEM(numbers, -10)',
      result: undefined,
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 0)',
      result: 1,
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 3)',
      result: 'test',
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 4)',
      result: null,
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 5)',
      result: undefined,
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 6)',
      result: [1, 2, 3],
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 7)',
      result: { a: 10 },
    },
    {
      context: {
        complexArray: [1, 0, 2, 'test', null, undefined, [1, 2, 3], { a: 10 }, [], {}, false, true],
      },
      expression: 'PICK_ITEM(complexArray, 10)',
      result: false,
    },
  ],
};
