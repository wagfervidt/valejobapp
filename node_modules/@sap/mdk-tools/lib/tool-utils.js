const fs = require('fs-extra');
const os = require("os");
const path = require('path');
const program = require('commander');
const execSync = require('child_process').execSync;
const logger = require("./logger");

// Helper functions
exports.fail = function (sMessage, bShowHelp) {
  exports.showError(sMessage);
  if (bShowHelp) program.outputHelp();
  process.exit(1);
}

exports.showError = function (sMessage) {
  console.error(logger.getError('Error: ') + sMessage);
}

exports.isDirectory = function (sPath) {
  try {
    return fs.statSync(sPath).isDirectory();
  } catch (e) {
    return false;
  }
}

exports.isFile = function (sPath) {
  try {
    return fs.statSync(sPath).isFile();
  } catch (e) {
    return false;
  }
}

exports.exec = function (sCommand, sErrorMessage, oOptions, bAllowFailure) {
  const bExecVerbose = exports.execVerbose;
  try {
    if (bExecVerbose) {
      console.log(sCommand);
    }
    const oResult = execSync(sCommand, oOptions);
    if (oResult && bExecVerbose) {
      console.log(oResult.toString());
    }
    return oResult;
  } catch (e) {
    const sStderr = e.stderr.toString();
    if (e.stdout) {
      console.log(e.stdout.toString());
    }
    if (sStderr) {
      console.log(sStderr);
    }
    if (bAllowFailure) {
      console.error(sErrorMessage);
    } else {
      exports.fail(sErrorMessage);
    }
  }
}

exports.getTempDirectory = function(subFolder) {
  // let platform = os.platform();
  // let isWin = platform === 'win32';
  // let isLinux = platform === 'linux';
  // let tempDir = isWin ? process.env.TEMP : isLinux ? path.join(process.env.HOME, 'tmp') : process.env.TMPDIR;
  let tempDir = os.tmpdir();
  if (subFolder) {
    return path.join(
      tempDir,
      subFolder
    );
  } else {
    return tempDir;
  }
}

exports.execVerbose = false;

exports.pathIsNodeModule = function(sPath) {
  return /^[a-zA-Z@/]/.test(sPath);
}