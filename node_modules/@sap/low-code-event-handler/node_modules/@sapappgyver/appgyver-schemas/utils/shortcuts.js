/**
 * @module utils/shortcuts
 * @ignore
 */

/**
 * An internal helper to make error objects, to make the code more tidy.
 * @param {string} message Error message
 * @param {array} errors Sub-errors
 * @ignore
 */
function makeError(message, errors = []) {
  return { message, errors };
}

/**
 * An internal helper to make result objects with the schema and errors,
 * to make the code more tidy.
 * @param {object} schema Schema object
 * @param {array} errors Sub-errors
 * @ignore
 */
function makeResult(schema, errors = []) {
  return { schema, errors };
}

/**
 * JSON-encodes the given value, even if it is undefined or null.
 * @param {*} value any value
 * @returns JSON string representation
 * @ignore
 */
function stringify(value) {
  if (typeof value === 'undefined') {
    return 'undefined';
  }
  if (value === null) {
    return 'null';
  }
  return JSON.stringify(value);
}

const typeTexts = {
  string: 'text type',
  number: 'number type',
  boolean: 'true/false',
  array: 'list type',
  object: 'object type',
  value: 'unknown type',
  schema: 'schema type',
  schematicValue: 'schematic value type',
};

/**
 * Returns a human-readable text for the given
 * schema type keyword.
 * @param {string} type schema type
 * @returns human-readable text
 * @ignore
 */
function stringifyType(type) {
  return typeTexts[type || 'value'] || `type ${stringify(type)}`;
}

module.exports.makeError = makeError;
module.exports.makeResult = makeResult;
module.exports.stringify = stringify;
module.exports.stringifyType = stringifyType;
