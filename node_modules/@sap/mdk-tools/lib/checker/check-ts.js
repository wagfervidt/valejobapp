const fs = require('fs-extra');
const path = require('path');
const ENALBE_LOG = false;
let instance;
class Checker {

    constructor(args) {
        this.checkArgs = args;
        instance = this;
    }
    /**
     * This is the main entry point into the check metadata files
     *
     */
    check() {
        return Promise.all([instance._checkTypeScript("Extensions"),instance._checkTypeScript("Rules")])
        .then((ret) => {
                console.log(ret[0]||ret[1]);
                return ret[0]||ret[1];
            })
            .catch(error => { 
                return Promise.reject(error);
            });
    }

    _checkTypeScript(root) {
        return new Promise(function (resolve, reject) {
            let extensionPath = path.join(instance.checkArgs.project(),root);
            if (fs.existsSync(extensionPath)) {
                const aFiles = instance._getAllFiles(extensionPath);
                let bHasTS = false;
                for (let i=0; i<aFiles.length; i++) {
                    if (ENALBE_LOG) console.log('checking file '+aFiles[i]);
                    if (aFiles[i].endsWith(".ts")) {
                        bHasTS = true;
                        break;
                    }
                }
                resolve(bHasTS);
            } else {
                resolve(false);
            }
        });
    }

    _getAllFiles(dirPath, arrayOfFiles) {
        const files = fs.readdirSync(dirPath)
      
        arrayOfFiles = arrayOfFiles || []
      
        files.forEach(function(file) {
          if (fs.statSync(dirPath + path.sep + file).isDirectory()) {
            arrayOfFiles = instance._getAllFiles(dirPath + path.sep + file, arrayOfFiles)
          } else {
            arrayOfFiles.push(path.join(dirPath, path.sep, file))
          }
        })
      
        return arrayOfFiles
      }
}
exports.Checker = Checker;