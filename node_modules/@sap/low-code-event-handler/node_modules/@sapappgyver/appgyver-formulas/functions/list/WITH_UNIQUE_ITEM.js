const { getUnionSchema, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const { getSchemaAssignmentErrors, simplifySchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./WITH_UNIQUE_ITEM.runtime');

module.exports = {
  name: 'WITH_UNIQUE_ITEM',
  category: 'List',
  title: 'Add unique item to the list',
  description: 'Returns a new list which contains the given item at the end of the list, but only if the exact item does not already exist in the list. If it does, the original list is returned.',
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to add item to',
  }, {
    title: 'Item',
    description: 'Item to add',
  }],
  analyze: ([arrayParam, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const arrayItemsSchema = getArrayItemSchema(arraySchema) || {};
    const itemSchema = (itemParam && itemParam.schema) || {};
    const unionSchema = getUnionSchema([arrayItemsSchema, itemSchema]);
    const errors = getSchemaAssignmentErrors(
      itemSchema, getArrayItemSchema(simplifySchema(arraySchema, {})),
    );
    return {
      schema: { type: 'array', items: unionSchema },
      errors: parameterErrors.length ? [] : errors.map(error => ({
        message: error.message, offset: itemParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'WITH_UNIQUE_ITEM(numbers, 4)',
      context: {
        numbers: [100, 3, 20],
      },
      result: [100, 3, 20, 4],
    },
    {
      expression: 'WITH_UNIQUE_ITEM(numbers, 3)',
      context: {
        numbers: [100, 3, 20],
      },
      result: [100, 3, 20],
    },
    {
      expression: 'WITH_UNIQUE_ITEM(animals, "pig")',
      context: {
        animals: ['cat', 'dog'],
      },
      result: ['cat', 'dog', 'pig'],
    },
    {
      expression: 'WITH_UNIQUE_ITEM(empty, 4)',
      context: {
        empty: [],
      },
      result: [4],
    },
  ],
};
