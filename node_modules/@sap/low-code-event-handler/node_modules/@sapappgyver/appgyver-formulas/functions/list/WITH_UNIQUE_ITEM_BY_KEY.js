const {
  resolveObjectMemberAccessor, getUnionSchema, getArrayItemSchema, simplifySchema,
} = require('@sapappgyver/appgyver-schemas');
const execute = require('./WITH_UNIQUE_ITEM_BY_KEY.runtime');

module.exports = {
  name: 'WITH_UNIQUE_ITEM_BY_KEY',
  category: 'List',
  title: 'Add item to the list, unique by given key',
  description: 'Returns the list with the given item added, but only if the list doesn\'t already have an object whose **Key** value matches the given item\'s **Key** value.',
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to add item to',
    items: {
      type: 'object',
    },
  }, {
    title: 'Item',
    description: 'Item to add',
    type: 'object',
  }, {
    title: 'Key',
    description: 'Key whose values to compare to ensure uniqueness',
    type: 'string',
  }],
  analyze: ([arrayParam, itemParam, keyParam], offset, parameterErrors) => {
    const arraySchema = arrayParam && arrayParam.schema;
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const itemSchema = (itemParam && itemParam.schema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyArrItemErrors,
    } = resolveObjectMemberAccessor(getArrayItemSchema(simplifySchema(arraySchema, {})), keySchema);
    const {
      errors: keyNewItemErrors,
    } = resolveObjectMemberAccessor(itemSchema, keySchema);
    const unionSchema = getUnionSchema([itemsSchema, itemSchema]);
    return {
      schema: { type: 'array', items: unionSchema },
      errors: parameterErrors.length ? [] : [
        ...keyNewItemErrors.map(error => ({ ...error, offset: keyParam.offset })),
        ...keyArrItemErrors.map(error => ({ ...error, offset: keyParam.offset })),
      ],
    };
  },

  execute,
  examples: [
    {
      expression: 'WITH_UNIQUE_ITEM_BY_KEY([{ a: 3, b: 10 }, { a: 2, b: 11 }], { a: 10 } , "a")',
      result: [{ a: 3, b: 10 }, { a: 2, b: 11 }, { a: 10 }],
    },
    {
      expression: 'WITH_UNIQUE_ITEM_BY_KEY([{ a: 3, b: 10 }, { a: 2, b: 11 }], { a: 2 } , "a")',
      result: [{ a: 3, b: 10 }, { a: 2, b: 11 }],
    },
  ],
};
