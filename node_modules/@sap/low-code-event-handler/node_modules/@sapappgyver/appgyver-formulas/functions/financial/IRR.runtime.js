// Calculates the resulting amount
const irrResult = (values, dates, rate) => {
  const r = rate + 1;
  let result = values[0];
  // eslint-disable-next-line no-plusplus
  for (let i = 1; i < values.length; i++) {
    result += values[i] / (r ** ((dates[i] - dates[0]) / 365));
  }
  return result;
};

// Calculates the first derivation
const irrResultDeriv = (values, dates, rate) => {
  const r = rate + 1;
  let result = 0;
  // eslint-disable-next-line no-plusplus
  for (let i = 1; i < values.length; i++) {
    const frac = (dates[i] - dates[0]) / 365;
    result -= frac * values[i] / (r ** (frac + 1));
  }
  return result;
};

module.exports = ([array, rate]) => {
  if (!Array.isArray(array)) {
    return null;
  }
  const values = array.filter(item => (typeof item === 'number' && Number.isFinite(item)));
  if (!values.length) {
    return null;
  }
  const dates = [];
  let positive = false;
  let negative = false;

  // eslint-disable-next-line no-plusplus
  for (let i = 0; i < values.length; i++) {
    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;
    if (values[i] > 0) {
      positive = true;
    }
    if (values[i] < 0) {
      negative = true;
    }
  }

  // Return error if values does not contain at least one positive value and one negative value
  if (!positive || !negative) {
    return null;
  }

  // Initialize guess and resultRate
  const guess = (rate === undefined) ? 0.1 : rate;
  if (typeof guess !== 'number' && !Number.isFinite(guess)) {
    return null;
  }
  // Set maximum epsilon for end of iteration
  const epsMax = 1e-10;

  // Implement Newton's method
  let resultRate = 0;
  let newRate; let epsRate; let
    resultValue;
  let contLoop = true;
  do {
    resultValue = irrResult(values, dates, resultRate);
    newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);
    epsRate = Math.abs(newRate - resultRate);
    resultRate = newRate;
    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
  } while (contLoop);

  // Return internal rate of return
  return resultRate;
};
