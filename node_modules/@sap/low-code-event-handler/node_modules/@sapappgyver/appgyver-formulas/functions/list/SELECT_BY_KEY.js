const { resolveObjectMemberAccessor, getSchemaAssignmentErrors, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./SELECT_BY_KEY.runtime');

module.exports = {
  name: 'SELECT_BY_KEY',
  category: 'List',
  title: 'Find objects from a list by a key',
  description: `Finds multiple objects from the given list by a key-value pair.

For example, given **Key** \`"age"\` and **Value** \`20\`, will return a list containing all objects in the list whose \`age\` property is \`20\`, or an empty list if no matching objects were found.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to find objects in',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to match',
    type: 'string',
  }, {
    title: 'Value',
    description: 'Value to match',
  }],
  analyze: ([arrayParam, keyParam, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
      schema: keyItemSchema,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    const itemSchema = (itemParam && itemParam.schema) || {};
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, keyItemSchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...keyErrors.map(error => ({ ...error, offset: keyParam.offset })),
        ...assignmentErrors.map(error => ({ message: error.message, offset: itemParam.offset }))],
    };
  },
  execute,
  examples: [
    {
      expression: 'SELECT_BY_KEY(array1, "a", 2)',
      context: {
        array1: [{ a: 3 }, { a: 2 }, { a: 2, b: 3 }],
      },
      result: [{ a: 2 }, { a: 2, b: 3 }],
    },
    {
      expression: 'SELECT_BY_KEY(array2, "a", { b: 10 })',
      context: {
        array2: [{ a: 3 }, { a: { b: 10 } }],
      },
      result: [{ a: { b: 10 } }],
    },
    {
      expression: 'SELECT_BY_KEY(array, "a", 4)',
      context: {
        array: [{ a: 3 }, { a: 2 }],
      },
      result: [],
    },
  ],
};
