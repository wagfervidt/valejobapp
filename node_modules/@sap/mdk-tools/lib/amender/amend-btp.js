const logger = require('../logger');
const fs = require('fs-extra');
const path = require('path');
const execSync = require('child_process').execSync;
const timestamp = require('console-timestamp');
const AMEND_DESTINATION_PREFIX = "../";
const AMEND_BUNDLE_FILE = "bundle.js";
const AMEND_XSAPP_FILE = "xs-app.json";
const AMEND_MANIFEST_FILE = "manifest.json";
const { getMDKTools, PACKAGE_FILE, CAP_DEPENDENCY } = require('../utils');
let instance;

class Amender {

    constructor(args) {
        this.amendArgs = args;
        this.aRoutes = [];
        this.CapProjectName = "";
        instance = this;
    }
    /**
     * This is the main entry point into the amend bundle file
     *
     */
    amend() {
        return instance._amendDestination()
            .then(instance._amendRoutes)
            .then(instance._amendManifest)
            .then(() => {
                return true;
            })
            .catch(error => { 
                return Promise.reject(error);
            });
    }

    _amendDestination() {
        return new Promise(function (resolve, reject) {
            let servicePath = instance.amendArgs.servicePath();
            let aDestination = [];
            if (fs.existsSync(servicePath)) {
                fs.readdirSync(servicePath).forEach(function (name) {
                    if (name.endsWith(".service")) {
                        let sContent = fs.readFileSync(path.join(servicePath,name)).toString();
                        let oContent = JSON.parse(sContent);
                        if (oContent.DestinationName && oContent.DestinationName.indexOf(AMEND_DESTINATION_PREFIX)==0) {
                            aDestination.push(oContent.DestinationName)
                        } 
                    }
                });
            } else {
                console.error(logger.getError(`Failed to amend ${instance.amendArgs.path()} with error: ${error}`));
                reject(`failed to find service path in ${servicePath}`);
            }

            if (aDestination.length>0) {
                try {
                    let sBundleFile =path.join(instance.amendArgs.path(), AMEND_BUNDLE_FILE);
                    let sBundle = fs.readFileSync(sBundleFile).toString();
                    aDestination.forEach(sDest => {
                        let sSource = `"${sDest}"`;
                        let sRoute = sDest.substring(AMEND_DESTINATION_PREFIX.length);
                        if (sRoute.endsWith("/")) sRoute = sRoute.substr(0, sRoute.length-1);
                        let sTarget = `"${sRoute}"`;
                        sBundle = sBundle.replace(sSource,sTarget);
                        instance.aRoutes.push(sRoute);
                    });
                    fs.writeFileSync(sBundleFile, sBundle);
                } catch(e){
                    reject(e);
                }
                console.log('[hh:mm:ss]'.timestamp + `Amend successfully in ${instance.amendArgs.path()}`);
                resolve(true);
            } else {
                console.log('[hh:mm:ss]'.timestamp + `No need to amend in ${instance.amendArgs.path()}`);
                resolve(false);
            }
        });
    }

    _getCapProjectName(sPath) {
        if (instance.CapProjectName) {
            return instance.CapProjectName;
        }
        let sName = "";
        while (sPath) { 
            sName = instance._getCAPHelper(sPath);
            if (sName) {
                return sName;
            }
            sPath = instance._getParent(sPath);
        }
        instance.CapProjectName = sName;
        return sName;
    }

    _getParent(sPath) {
        if (sPath && sPath.length>1) {
            if (sPath.endsWith(path.sep)) {
                sPath = sPath.substring(0,sPath.length-1);
            }
            if (sPath) {
                return sPath.substring(0, sPath.lastIndexOf(path.sep));
            }
        }
        return "";
    }

    _getCAPHelper(sPath) {
        let sPackageFile = path.join(sPath, PACKAGE_FILE);
        if (fs.existsSync(sPackageFile)) {
            const pckg = fs.readJSONSync(sPackageFile);
            if (pckg.lcap === true || (pckg.dependencies && !!pckg.dependencies[CAP_DEPENDENCY])) {
                return pckg["name"];
            }
        } 
        return "";
    }

    _amendRoutes() {
        return new Promise(function (resolve, reject) {
            let bUpdated = false;
            let bDoc = instance._hasGenericDocument();
            if (instance.aRoutes.length>0 || bDoc) {
                let sPath = instance._getParent(instance.amendArgs.path());
                let sCapName = instance._getCapProjectName(sPath);
                let sXSAppFile = path.join(instance.amendArgs.path(),AMEND_XSAPP_FILE);
                if (sCapName) {
                    let oXSApp = fs.readJSONSync(sXSAppFile);
                    //services
                    instance.aRoutes.forEach(sRoute =>{
                        let oRoute = {
                            source: `^/${sRoute}/(.*)$`,
                            target: `/${sRoute}/$1`,
                            destination: `${sCapName}-app-srv`,
                            authenticationType:"xsuaa"
                        };
                        oXSApp.routes.splice(0,0,oRoute);
                        console.log('[hh:mm:ss]'.timestamp + `Add a service route ${JSON.stringify(oRoute)}`);
                        bUpdated = true;
                    });
                    
                    //document
                    if (bDoc) {
                        let oDocRoute = {
                            "csrfProtection": false,
                            "source": "^/api/(.*)$",
                            "target": "$1",
                            "authenticationType": "xsuaa",
                            "service": "com.sap.ecm.reuse",
                            "endpoint": "ecmservice"
                        };
                        oXSApp.routes.splice(0,0,oDocRoute);
                        console.log('[hh:mm:ss]'.timestamp + `Add a document route ${JSON.stringify(oDocRoute)}`);
                        bUpdated = true;
                    }

                    if (bUpdated) {
                        fs.writeFileSync(sXSAppFile, JSON.stringify(oXSApp,null, '\t'));
                    }
                    
                } else {
                    console.log('[hh:mm:ss]'.timestamp + `Failed to find CAP project`);
                }
            }



            if (!bUpdated) {
                console.log('[hh:mm:ss]'.timestamp + `No need to amend xs-app.json`);
            }
            
            resolve();
        });
    }

    _amendManifest() {
        return new Promise(function (resolve, reject) {
            let sPath = instance._getParent(instance.amendArgs.path());
            let sCapName = instance._getCapProjectName(sPath);
            let sManifestFile = path.join(instance.amendArgs.path(),AMEND_MANIFEST_FILE);
            if (sCapName) {
                let oManifest = fs.readJSONSync(sManifestFile);
                if (oManifest["sap.cloud"]) {
                    console.log('[hh:mm:ss]'.timestamp + `No need to amend manifest.json`);
                } else {
                    oManifest["sap.cloud"] = {
                        "public": true,
                        "service": `lcap.${sCapName}`
                    };         
                    fs.writeFileSync(sManifestFile, JSON.stringify(oManifest,null, '\t'));
                }
            } else {
                console.log('[hh:mm:ss]'.timestamp + `Failed to find CAP project`);
            }
            resolve();
        });
    }

    _hasGenericDocument() {
        let sMDKTools = getMDKTools();
        let sCommand = `${sMDKTools} check --target doc --project "${instance.amendArgs.project()}"`;
        let ret;
        try {
            console.log(sCommand);
            ret = execSync(sCommand).toString();
        } catch (error) {
            console.error(logger.getError(`failed to check document feature: ${error}`));  
        }
        return ret === "true\n";
    }
}
exports.Amender = Amender;