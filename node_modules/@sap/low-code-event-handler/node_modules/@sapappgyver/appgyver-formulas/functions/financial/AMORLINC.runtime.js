const { parseDateTime } = require('../../datetime');
const YEARFRAC = require('../date/YEARFRAC.runtime');

module.exports = ([cost, purchaseDate, firstPeriodEnd, salvage, perion, rate, convention]) => {
  if (typeof purchaseDate !== 'string' && typeof firstPeriodEnd !== 'string') {
    return null;
  }
  const startDate = parseDateTime(purchaseDate);
  const endDate = parseDateTime(firstPeriodEnd);
  if (startDate.isValid() && endDate.isValid()) {
    const basis = convention || 'us_nasd';
    const valuesBasis = ['us_nasd', 'actual', 'actual_360', 'actual_365', 'european'];
    if (!valuesBasis.includes(basis)) {
      return null;
    }
    if (startDate > endDate || rate <= 0
        || salvage > cost || cost <= 0
        || salvage < 0 || perion < 0) {
      return null;
    }
    if (typeof cost === 'number' && Number.isFinite(cost)
      && typeof salvage === 'number' && Number.isFinite(salvage)
      && typeof perion === 'number' && Number.isFinite(perion)
      && typeof rate === 'number' && Number.isFinite(rate)) {
      const nPer = Math.trunc(perion);
      const fOneRate = cost * rate;
      const costDelta = cost - salvage;
      const f0Rate = YEARFRAC([purchaseDate, firstPeriodEnd, basis]) * rate * cost;
      const nNumOfFullPeriods = Math.trunc((cost - salvage - f0Rate) / fOneRate);
      let fResult = 0.0;
      if (nPer === 0) {
        fResult = f0Rate;
      } else if (nPer <= nNumOfFullPeriods) {
        fResult = fOneRate;
      } else if (nPer === nNumOfFullPeriods + 1) {
        fResult = costDelta - fOneRate * nNumOfFullPeriods - f0Rate;
      }
      if (fResult > 0.0) { return fResult; }
      return 0.0;
    }
  }
  return null;
};
