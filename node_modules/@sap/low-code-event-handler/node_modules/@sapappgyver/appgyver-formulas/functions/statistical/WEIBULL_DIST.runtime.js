const weibullDistribution = (x, shape, scale) => (shape / scale)
  * ((x / scale) ** (shape - 1))
  * Math.exp(-((x / scale) ** shape));

const weibullCumulative = (x, shape, scale) => (
  (x === 0) ? 0 : 1 - Math.exp(-((x / scale) ** shape))
);

module.exports = ([x, shape, scale, cumulative]) => {
  if (
    typeof x === 'number'
      && Number.isFinite(x)
      && typeof shape === 'number'
      && Number.isFinite(shape)
      && typeof scale === 'number'
      && Number.isFinite(scale)
  ) {
    if (x < 0 || shape <= 0 || scale <= 0) {
      return null;
    }
    const result = cumulative
      ? weibullCumulative(x, shape, scale)
      : weibullDistribution(x, shape, scale);
    return Number.isFinite(result) ? result : null;
  }
  return null;
};
