const { getArrayItemSchema, extractSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./INTERSECTION.runtime');

module.exports = {
  name: 'INTERSECTION',
  category: 'List',
  title: 'Intersection of two lists',
  description: `Returns a list that contains only values that are present in the both of the given lists. If there are no equal values in lists then an empty list is returned.

  The equality of values is similarly than in \`IS_EQUAL\` function.`,
  parameters: [{
    type: 'array',
    title: 'List 1',
    description: 'The first list',
  }, {
    type: 'array',
    title: 'List 2',
    description: 'The second list',
  }],
  analyze: ([arrayParam1, arrayParam2], offset, parameterErrors) => {
    const arraySchema1 = arrayParam1 && arrayParam1.schema;
    const arraySchema2 = arrayParam2 && arrayParam2.schema;
    const paramOffset1 = arrayParam1 && arrayParam1.offset;
    const arrayItemSchema1 = arraySchema1 && getArrayItemSchema(arraySchema1);
    const arrayItemSchema2 = arraySchema2 && getArrayItemSchema(arraySchema2);
    const arrayItemSchema = arrayItemSchema1 != null && arrayItemSchema2 != null
      ? extractSchema(arrayItemSchema1, arrayItemSchema2)
      : arrayItemSchema1 || arrayItemSchema2;
    const errors = [];
    const schema = { type: 'array' };
    if (arrayItemSchema) {
      schema.items = arrayItemSchema;
    } else if (!parameterErrors.length) {
      schema.items = { type: 'undefined' };
      if (arrayItemSchema1 != null && arrayItemSchema2 != null) {
        const errorOffset = paramOffset1 != null ? paramOffset1 : offset;
        errors.push({
          message: 'Lists have incompatible items',
          offset: errorOffset,
        });
      }
    }
    return { schema, errors };
  },
  execute,
  examples: [
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'INTERSECTION(numbers1, numbers2)',
      result: [10, 55, 85],
    },
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'INTERSECTION(numbers2, numbers1)',
      result: [55, 85, 10],
    },
    {
      context: {
        array1: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 32 }, { name: 'Kate', age: 25 }],
        array2: [{ name: 'Jack', age: 32 }, { name: 'Jon', age: 32 }, { name: 'Kate', age: 30 }],
      },
      expression: 'INTERSECTION(array1, array2)',
      result: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 32 }],
    },
  ],
};
