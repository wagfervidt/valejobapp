const { getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./DIFFERENCE.runtime');

module.exports = {
  name: 'DIFFERENCE',
  category: 'List',
  title: 'Returns difference items in lists',
  description: `Returns a list with all the values from the first list that are **not** present in the second list.
In other words, excludes all values from the first list that are given as a second list.`,
  parameters: [{
    type: 'array',
    title: 'Source list',
    description: 'The first list containing possibly returned items',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'array',
    title: 'Items to exclude',
    description: 'List of items to exclude from the first list',
    items: {
      $ref: '#item', // Refers to the generic type
    },
  }],
  analyze: ([arrayParameter]) => {
    const arraySchema = arrayParameter && arrayParameter.schema;
    const arrayItemSchema = arraySchema && getArrayItemSchema(arraySchema);
    const schema = { type: 'array' };
    if (arrayItemSchema) {
      schema.items = arrayItemSchema;
    }
    return { schema };
  },
  execute,
  examples: [
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'DIFFERENCE(numbers1, numbers2)',
      result: [66, 54, 91],
    },
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'DIFFERENCE(numbers2, numbers1)',
      result: [52, 94],
    },
    {
      context: {
        array1: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 30 }, { name: 'Kate', age: 25 }],
        array2: [{ name: 'Jack', age: 32 }, { name: 'Jon', age: 32 }, { name: 'Kate', age: 30 }],
      },
      expression: 'DIFFERENCE(array1, array2)',
      result: [{ name: 'Jack', age: 30 }, { name: 'Kate', age: 25 }],
    },
  ],
};
