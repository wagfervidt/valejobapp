const { resolveObjectMemberAccessor } = require('@sapappgyver/appgyver-schemas');
const execute = require('./LOOKUP.runtime');

module.exports = {
  name: 'LOOKUP',
  category: 'Object',
  title: 'Get object property',
  description: 'Returns the value associated with the given key in the given object.',
  parameters: [{
    type: 'object',
    title: 'Object',
    description: 'Object whose property will be get',
    inversible: true,
  }, {
    type: 'string',
    title: 'Property name',
    description: 'Name of the property to take from object',
  }],
  maxInversions: 1,
  analyze: ([objectParam, propNameParam], offset, parameterErrors) => {
    const itemSchema = (objectParam && objectParam.schema) || {};
    const accessorSchema = (propNameParam && propNameParam.schema) || {};
    const { schema, errors } = resolveObjectMemberAccessor(itemSchema, accessorSchema);
    const propertySchema = schema || { type: 'undefined' };
    return {
      schema: propertySchema,
      errors: parameterErrors.length ? [] : errors.map(error => ({
        ...error, offset: propNameParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'LOOKUP(animal, "name")',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: 'dog',
    },
    {
      expression: 'LOOKUP(animal, "weight")',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: 123,
    },
  ],
};
