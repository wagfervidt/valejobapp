const commandLineArgs = require('command-line-args');
const path = require('path');
const fs = require('fs-extra');
const process = require('process');
const os = require("os");
const logger = require('../logger');

const optionDefinitions = [
  { name: 'application-name', type: String, multiple: false },
  { name: 'bundle-output-name', type: String, multiple: false },
  { name: 'create-bundle', type: Boolean, multiple: false },
  { name: 'editor-export', type: String, multiple: false },
  { name: 'externals', type: String, multiple: true },
  { name: 'filters', type: String, multiple: true },
  { name: 'nativescript-project', type: String, multiple: false },
  { name: 'settings-file', type: String, multiple: false },
  { name: 'seam-project', type: String, multiple: false },
  { name: 'watch', type: Boolean, multiple: false },
  { name: 'help', type: String, multiple: false, defaultOption: true },
  { name: 'devtool', type: String, multiple: false },
  { name: 'bundle-target-path', type: String, multiple: false},
  { name: 'bundle-zip-target-path', type: String, multiple: false},
  { name: 'web', type: Boolean, multiple: false },
  { name: 'ts-target', type: String, multiple: false },
  { name: 'bundle-definition-path', type: String, multiple: false},
  { name: 'wmf', type: Boolean, multiple: false }
];

let options = commandLineArgs(optionDefinitions);

function processArguments() {
  function getMissingRequiredArgumentMessage() {
    if (!options['editor-export'] && !options['seam-project']) {
      return logger.getError('Missing both the ') + logger.getInfoBold('editor-export') + logger.getError(' and ') + logger.getInfoBold('seam-project ') + logger.getError('options. One of these must be specified.');
    }
    if (!options['create-bundle'] && !options['nativescript-project']) {
     return logger.getError('Missing both the ') + logger.getInfoBold('create-bundle') + logger.getError(' and ') + logger.getInfoBold('nativescript-project ') + logger.getError('options. One of these must be specified.');
    }
    return null;
  }
  const noArguments = Object.keys(options).length === 0;
  const settingsFileArgument = options['settings-file'];
  if (noArguments || settingsFileArgument) {
    const settingsFilePath = options['settings-file'] || process.cwd() + '/settings.json';
    console.log(logger.getPrefix('trying to use settings file at ') + logger.getInfoMore(settingsFilePath));
    try {
      options = JSON.parse(fs.readFileSync(settingsFilePath, 'utf8'));
    } catch (e) {
      console.error(logger.getError('failed to parse settings file with path ') + logger.getInfoMore(settingsFilePath));
      throw e;
    }
  }

  const missingArgumentMessage = getMissingRequiredArgumentMessage();
  if (missingArgumentMessage) {
    console.error(missingArgumentMessage);
  }
  if (missingArgumentMessage) {
    const getUsage = require('command-line-usage')

    const sections = [
      {
        header: 'Application Bundler',
        content: 'Generates a bundle.js file that is used as an import into the NativeScript platform bundle. If no arguments are specified, a default argument "--settings-file settings.json" is used.'
      },
      {
        header: 'Options',
        optionList: [
          {
            name: 'bundle-output-name',
            typeLabel: '',
            description: 'Output filename of bundle. If not specified, uses the default bundle.js name'
          },
          {
            name: 'create-bundle',
            type: Boolean,
            description: 'If this option is specified, a new zip file will be created called uploadBundle.zip. This can be used to upload the application bundle to HCP. Also, if this is specified, the application will not be copied to the NativeScript project path.'
          },
          {
            name: 'editor-export',
            typeLabel: '{underline file}',
            description: 'Path of the zip file exported from WebIDE which contains an application. If this is specified, the zipped application is what gets bundled and the seam-project option is ignored.'
          },
          {
            name: 'externals',
            typeLabel: '{underline module-name module-name ...}',
            description: 'Space-delimited list of NPM modules to be excluded from the bundle. Use this option for dependencies you expect to be in the environment when the application is built.  If not specified, the values "file-system" and "ui/dialogs" are automatically added.'
          },
          {
            name: 'filters',
            typeLabel: '{underline module-name module-name ...}',
            description: 'Space-delimited list of files excluded from the bundle.'
          },
          {
            name: 'nativescript-project',
            typeLabel: '{underline folder}',
            description: 'The location of the NativeScript project\'s app folder. As long as the create-bundle option isn\'t specified, the application bundle is copied here.'
          },
          {
            name: 'settings-file',
            typeLabel: '{underline file}',
            description: 'Path of the settings JSON file containing other options. If this is specified, all other command line arguments are ignored.'
          },
          {
            name: 'seam-project',
            typeLabel: '{underline folder}',
            description: 'The location of the base application definitions. Used to generate the bundle unless editor-export is specified.'
          },
          {
            name: 'watch',
            type: Boolean,
            description: 'If this option is specified, the script will watch for changes in the input files. If editor-export is also specified, any updates to the export zip file will cause the application to be rebundled. If editor-export is not specified, any changes to project files in the seam-project directory will cause the application to be rebundled.'
          },
          {
            name: 'help',
            description: 'Print this usage guide.'
          },
          {
            name: 'devtool',
            description: 'Choose a style of source mapping to enhance the debugging process.'
          },
          {
            name: 'bundle-target-path',
            typeLabel: '{underline folder}',
            description: 'The location of the target for bundle task. If this is specified, the bundle.js will be copied into it.'
          },
          {
            name: 'bundle-zip-target-path',
            typeLabel: '{underline folder}',
            description: 'The location of the target for bundle zip. If this is specified, the bundle zip will be copied into it.'
          },
          {
            name: 'web',
            type: Boolean,
            description: 'If this option is specified, the script will generate bundle.js for running in WebClient.'
          },
          {
            name: 'ts-target',
            description: 'Choose ts compile target, it can be es5 or es6.'
          },
          {
            name: 'bundle-definition-path',
            typeLabel: '{underline folder}',
            description: 'The location of the target for bundle zip. If this is specified, the bundle zip will be copied into it.'
          },
          {
            name: 'wmf',
            type: Boolean,
            description: 'If this option is specified, the script will use Webpack Module Federation to generate the bundle.'
          }
        ]
      }
    ]
    const usage = getUsage(sections);
    console.log(usage);
    process.exit(-1);
  }
  if (options['create-bundle'] && options['nativescript-project']) {
    console.log(logger.getInfoMore('create-bundle') + logger.getPrefix(' was specified, so ') + logger.getInfoMore('nativescript-project') + logger.getPrefix(' will be ignored.'));
  }
  if (options['editor-export'] && options['seam-project']) {
    console.log(logger.getInfoMore('editor-export') + logger.getPrefix(' was specified, so ') + logger.getInfoMore('seam-project') + logger.getPrefix(' will be ignored.'));
  }
}

exports.applicationName = function () {
  return options['application-name'];
}

exports.bundleName = function () {
  return options['bundle-output-name'] || 'bundle.js' ;
}

exports.shouldCreateBundle = function () {
  return !!options['create-bundle'];
}

exports.shouldWatch = function () {
  return !!options['watch'];
}

exports.editorExport = function () {
  return options['editor-export'];
}

exports.externals = function () {
  return options['externals'] || [];
}

exports.filters = function () {
  return options['filters'] || [];
}

exports.libraryTarget = function () {
  return 'umd';
}

exports.nativeScriptProjectPath = function () {
  var sNativeScriptProject = options['nativescript-project'];
  if (!sNativeScriptProject) return undefined;
  return path.resolve(path.normalize(sNativeScriptProject));
}

exports.mdkBaseApplicationPath = function () {
  var mdkProjectPath = options['seam-project'];
  if (!mdkProjectPath) return undefined;
  return path.resolve(path.normalize(mdkProjectPath));
}

// this file must exist in the dest folder
exports.projectIndexFile = function () {
  return "application-index.js";
}

exports.devtool = function() {
  return options['devtool'];
}

exports.bundleTargetPath = function () {
  var targetPath = options['bundle-target-path'];
  if (!targetPath) return undefined;
  return path.resolve(path.normalize(targetPath));
}


exports.bundleZipTargetPath = function () {
  var targetPath = options['bundle-zip-target-path'];
  if (!targetPath) return process.cwd();
  return path.resolve(path.normalize(targetPath));
}

exports.isForWeb = function() {
  return !!options['web'];
}

exports.tsTarget = function() {
  return options['ts-target'];
}

exports.useWmf = function() {
  return !!options['wmf'];
}

exports.bundleDefinitionPath = function () {
  var definitionPath = options['bundle-definition-path'];
  if (!definitionPath) return os.homedir();//path.join(__dirname,'..','..');//todo: add 2 more '..' for debugging watch from vscode
  return path.resolve(path.normalize(definitionPath));
}
processArguments();
