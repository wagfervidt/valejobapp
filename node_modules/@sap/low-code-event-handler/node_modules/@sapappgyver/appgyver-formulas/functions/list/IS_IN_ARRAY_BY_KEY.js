const { resolveObjectMemberAccessor, getSchemaAssignmentErrors, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./IS_IN_ARRAY_BY_KEY.runtime');

module.exports = {
  name: 'IS_IN_ARRAY_BY_KEY',
  category: 'List',
  title: 'Is the given item (identified by a key-value pair) in the target list?',
  description: 'Given an list of objects, the name of a key present in the objects, and a value to match, returns `true` if a matching item is found in the list, or `false` if it is not.',
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to find object in',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key of object whose value to match',
    type: 'string',
  }, {
    title: 'Value',
    description: 'Value to match',
  }],
  analyze: ([arrayParam, keyParam, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || {};
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
      schema: keyItemSchema,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    const itemSchema = (itemParam && itemParam.schema) || {};
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, keyItemSchema);
    return {
      schema: { type: 'boolean' },
      errors: parameterErrors.length ? [] : [
        ...keyErrors.map(error => ({ ...error, offset: keyParam.offset })),
        ...assignmentErrors.map(error => ({ ...error, offset: itemParam.offset })),
      ],
    };
  },
  execute,
  examples: [
    {
      context: {
        array1: [{ a: 3 }, { a: 2 }],
      },
      expression: 'IS_IN_ARRAY_BY_KEY(array1, "a", 2)',
      result: true,
    },
    {
      context: {
        array2: [{ a: 3 }, { a: 4 }],
      },
      expression: 'IS_IN_ARRAY_BY_KEY(array2, "a", 2)',
      result: false,
    },
    {
      context: {
        array: [{ a: 3 }, { a: { b: 10 } }],
        key: 'a',
      },
      expression: 'IS_IN_ARRAY_BY_KEY(array, "a", { b: 10 })',
      result: true,
    },
  ],
};
