const { getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./SELECT.runtime');

module.exports = {
  name: 'SELECT',
  category: 'List',
  title: 'Select specific items from list',
  description: `Selects items from a list that match the given criteria. Returns a list containing only the matching items, in their corresponding order.

The criteria is defined as a formula at the second parameter. The formula is evaluated with each item in the list.
The formula must result in a true/false value. If \`true\`, then item will be included to the result, otherwise it will be excluded.`,
  searchNames: ['FILTER'],
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items to filter',
    inversible: true,
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'function',
    title: 'Filtering formula',
    description: 'Formula to be evaluated for each item, deciding whether to include or not to the result list',
    parameters: [{
      name: 'item',
      title: 'Current item',
      description: 'The current item from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position of the current item in the list as an index number starting from 0',
      examples: [0, 1, 2],
    }],
    returnValue: {
      type: 'boolean',
      title: 'Whether item is included',
      description: 'Whether or not the item is included to the result list',
    },
  }],
  maxInversions: 1,
  analyze: ([arrayParam]) => {
    const arraySchema = arrayParam && arrayParam.schema;
    if (!arraySchema) {
      return { schema: { type: 'array' } };
    }
    // NOTE: Not using the parameter type directly, as it might contain enum or examples
    // that are no longer valid.
    return {
      schema: {
        type: 'array',
        items: getArrayItemSchema(arraySchema) || {},
      },
    };
  },
  execute,
  examples: [
    {
      expression: 'SELECT(animals, item.weight > 100)',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
          { name: 'pig', weight: 230 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'pig', weight: 230 },
      ],
    },
    {
      expression: 'SELECT(animals, IS_ODD(index))',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
          { name: 'pig', weight: 230 },
        ],
      },
      result: [
        { name: 'cat', weight: 48 },
        { name: 'pig', weight: 230 },
      ],
    },
    {
      expression: 'SELECT<product>(products, product.category == "Utility")',
      context: {
        products: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Swiss army knife', category: 'Tools' },
          { name: 'Glue', category: 'Utility' },
        ],
      },
      result: [
        { name: 'Duct tape', category: 'Utility' },
        { name: 'Glue', category: 'Utility' },
      ],
    },
    {
      expression: 'SELECT<product, position>(products, position < 2 && product.category == "Utility")',
      context: {
        products: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Swiss army knife', category: 'Tools' },
          { name: 'Glue', category: 'Utility' },
        ],
      },
      result: [
        { name: 'Duct tape', category: 'Utility' },
      ],
    },
  ],
};
