"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTSModule = exports.getTSPackage = exports.mkdirIfNotExist = exports.getModuleAbsolutePath = exports.getGlobalTSDir = void 0;
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var system_1 = require("./system");
var resolve_1 = __importDefault(require("resolve"));
/* ********************************************************************************************************************
 * Helpers
 * ********************************************************************************************************************/
// region Helpers
/**
 * Attempts to locate global installation of TypeScript
 */
var getGlobalTSDir = function () {
    var errors = [];
    var basedir = require('global-prefix');
    var check = function (dir) {
        try {
            return getTSPackage(dir);
        }
        catch (e) {
            errors.push(e);
            return {};
        }
    };
    var packageDir = (check(basedir) || check(path_1.default.join(basedir, 'lib'))).packageDir;
    if (!packageDir)
        throw new system_1.PackageError("Could not find global TypeScript installation! Are you sure it's installed globally?");
    return packageDir;
};
exports.getGlobalTSDir = getGlobalTSDir;
/**
 * Get absolute path for module file
 */
var getModuleAbsolutePath = function (filename, libDir) {
    var file = system_1.isAbsolute(filename) ? filename : path_1.default.join(libDir, filename);
    if (path_1.default.extname(file) !== '.js')
        file = path_1.default.join(path_1.default.dirname(file), path_1.default.basename(file, path_1.default.extname(file)) + ".js");
    return file;
};
exports.getModuleAbsolutePath = getModuleAbsolutePath;
var mkdirIfNotExist = function (dir) { return !fs_1.default.existsSync(dir) && fs_1.default.mkdirSync(dir, { recursive: true }); };
exports.mkdirIfNotExist = mkdirIfNotExist;
var isOutOfDate = function (version) {
    var currentVer = system_1.tspPackageJSON.version.match(/(\d+)\.(\d+)\.(\d+)/);
    // noinspection JSUnusedLocalSymbols
    var _a = String(version).match(/(\d+)\.(\d+)\.(\d+)/) || [], f = _a[0], major = _a[1], minor = _a[2], patch = _a[3];
    return (isNaN(+major) || isNaN(+minor) || isNaN(+patch)) ||
        ((currentVer === null || currentVer === void 0 ? void 0 : currentVer[1]) > major) || ((currentVer === null || currentVer === void 0 ? void 0 : currentVer[2]) > minor) || ((currentVer === null || currentVer === void 0 ? void 0 : currentVer[3]) > patch);
};
/**
 * Get TypeScript package info - Resolve from basedir, throws if not cannot find TS package
 */
function getTSPackage(basedir) {
    if (basedir === void 0) { basedir = process.cwd(); }
    if (!fs_1.default.existsSync(basedir))
        throw new system_1.PackageError(basedir + " is not a valid directory");
    var possiblePackageDirs = [basedir, path_1.default.dirname(resolve_1.default.sync("typescript/package.json", { basedir: basedir }))];
    var _loop_1 = function (packageDir) {
        /* Parse package.json data */
        var packageFile = path_1.default.join(packageDir, 'package.json');
        if (!fs_1.default.existsSync(packageFile))
            return "continue";
        var _a = (function () {
            try {
                return JSON.parse(fs_1.default.readFileSync(packageFile, 'utf8'));
            }
            catch (e) {
                throw new system_1.PackageError("Could not parse json data in " + packageFile);
            }
        })(), name = _a.name, version = _a.version;
        /* Validate */
        if (name === 'typescript')
            return { value: { version: version, packageFile: packageFile, packageDir: packageDir, config: getConfig(packageDir), libDir: path_1.default.join(packageDir, 'lib') } };
    };
    for (var _i = 0, possiblePackageDirs_1 = possiblePackageDirs; _i < possiblePackageDirs_1.length; _i++) {
        var packageDir = possiblePackageDirs_1[_i];
        var state_1 = _loop_1(packageDir);
        if (typeof state_1 === "object")
            return state_1.value;
    }
    throw new system_1.PackageError("Could not find typescript package from " + basedir);
}
exports.getTSPackage = getTSPackage;
/**
 * Get TypeScript module info
 */
function getTSModule(file, includeSrc) {
    if (includeSrc === void 0) { includeSrc = false; }
    if (!fs_1.default.existsSync(file))
        throw new system_1.FileNotFound("Could not find file " + file + ".");
    var filename = path_1.default.basename(file);
    var dir = path_1.default.dirname(file);
    var fileData = fs_1.default.readFileSync(file, 'utf8');
    var canPatch = Boolean(fileData.match(/^\(function\s\(ts\)\s?{[\s\S]+?\(ts\s?\|\|\s?\(ts\s?=\s?{}\)\);?$/m));
    var patchVersion = canPatch &&
        (fileData.match(/(?<=^\s*?var\stspVersion\s?=\s?['"`])(\S+?)(?=['"`])/m) || [])[0];
    var outOfDate = isOutOfDate(patchVersion);
    return __assign({ file: file, filename: filename, canPatch: canPatch, dir: dir, patchVersion: patchVersion, outOfDate: outOfDate }, (includeSrc && canPatch && { moduleSrc: fileData }));
}
exports.getTSModule = getTSModule;
/**
 * Load tsp config file data from TS package directory
 */
function getConfig(packageDir) {
    var configFile = path_1.default.join(packageDir, 'ts-patch.json');
    /* Load config file */
    var fileData = {};
    if (fs_1.default.existsSync(configFile)) {
        try {
            fileData = JSON.parse(fs_1.default.readFileSync(configFile, 'utf8'));
        }
        catch (e) {
            if (system_1.appOptions.instanceIsCLI)
                console.warn(e);
            else
                system_1.Log(['!', e.message], system_1.Log.verbose);
        }
    }
    var config = __assign(__assign({ persist: false, modules: {} }, fileData), { version: fileData.version || system_1.tspPackageJSON.version, file: configFile, save: function () { saveConfig(this); } });
    return system_1.defineProperties(config, {
        version: { writable: false },
        file: { enumerable: false, writable: false }
    });
}
function saveConfig(config) {
    try {
        fs_1.default.writeFileSync(config.file, JSON.stringify(config, null, 2));
    }
    catch (e) {
        throw new system_1.FileWriteError(config.file, e.message);
    }
}
// endregion
//# sourceMappingURL=file-utils.js.map