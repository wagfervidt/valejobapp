const { resolveObjectMemberAccessor, getPossibleObjectSchemaProperties, getSchemaAssignmentErrors } = require('@sapappgyver/appgyver-schemas');
const execute = require('./REVERSE_LOOKUP.runtime');

module.exports = {
  name: 'REVERSE_LOOKUP',
  category: 'Object',
  title: 'Get key of the object by stored value',
  description: 'Given a value and a target object, returns the key under which the given value is stored in the object. If multiple keys match the given value, the first key is returned.',
  parameters: [{
    type: 'object',
    title: 'Object',
    description: 'Object whose key will be get',
  }, {
    title: 'Value',
    anyOf: [
      { type: 'string' },
      { type: 'number' },
      { type: 'boolean' },
      { type: 'array' },
      { type: 'object' },
    ],
    description: 'Value to find key',
  }],
  analyze: ([objectParam, itemParam], offset, parameterErrors) => {
    const objectSchema = (objectParam && objectParam.schema) || {};
    const itemSchema = (itemParam && itemParam.schema) || {};
    const { schema: keysSchema } = resolveObjectMemberAccessor(
      objectSchema,
      {
        type: 'string',
      },
      true,
    );
    const possibleProps = getPossibleObjectSchemaProperties(objectSchema);
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, keysSchema);
    const schema = possibleProps
      ? { type: 'string', enum: possibleProps }
      : { type: 'string' };
    return {
      schema,
      errors: parameterErrors.length ? [] : [...assignmentErrors].map(error => ({
        ...error, offset: itemParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'REVERSE_LOOKUP(animal, 123)',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: 'weight',
    },
    {
      expression: 'REVERSE_LOOKUP(animal, false)',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: 'active',
    },
  ],
};
