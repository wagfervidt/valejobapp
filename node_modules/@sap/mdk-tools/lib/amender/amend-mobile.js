const logger = require('../logger');
const fs = require('fs-extra');
const path = require('path');
const timestamp = require('console-timestamp');
const AMEND_DESTINATION_PREFIX = "../";
const AMEND_BUNDLE_FILE = "bundle.js";
let instance;

class Amender {

    constructor(args) {
        this.amendArgs = args;
        this.aRoutes = [];
        this.CapProjectName = "";
        instance = this;
    }
    /**
     * This is the main entry point into the amend bundle file
     *
     */
    amend() {
        return instance._amendDestination()
            .then(() => {
                return true;
            })
            .catch(error => { 
                return Promise.reject(error);
            });
    }

    _amendDestination() {
        return new Promise(function (resolve, reject) {
            let servicePath = instance.amendArgs.servicePath();
            let aDestination = [];
            if (fs.existsSync(servicePath)) {
                fs.readdirSync(servicePath).forEach(function (name) {
                    if (name.endsWith(".service")) {
                        let sContent = fs.readFileSync(path.join(servicePath,name)).toString();
                        let oContent = JSON.parse(sContent);
                        if (oContent.DestinationName && oContent.DestinationName.indexOf(AMEND_DESTINATION_PREFIX)==0) {
                            aDestination.push(oContent.DestinationName)
                        } 
                    }
                });
            } else {
                console.error(logger.getError(`Failed to amend ${instance.amendArgs.path()} with error: ${error}`));
                reject(`failed to find service path in ${servicePath}`);
            }

            if (aDestination.length>0) {
                try {
                    let sBundleFile =path.join(instance.amendArgs.path(), AMEND_BUNDLE_FILE);
                    let sBundle = fs.readFileSync(sBundleFile).toString();
                    let sMobileDestination = instance.amendArgs.destination();
                    aDestination.forEach(sDest => {
                        let sSource = `"${sDest}"`;
                        let sRoute = sDest.substring(AMEND_DESTINATION_PREFIX.length);
                        if (sRoute.endsWith("/")) sRoute = sRoute.substr(0, sRoute.length-1);
                        let sTarget = `"${sMobileDestination}"`;
                        sBundle = sBundle.replace(sSource,sTarget);
                        instance.aRoutes.push(sRoute);
                    });
                    fs.writeFileSync(sBundleFile, sBundle);
                } catch(e){
                    reject(e);
                }
                console.log('[hh:mm:ss]'.timestamp + `Amend successfully in ${instance.amendArgs.path()}`);
                resolve(true);
            } else {
                console.log('[hh:mm:ss]'.timestamp + `No need to amend in ${instance.amendArgs.path()}`);
                resolve(false);
            }
        });
    } 
}
exports.Amender = Amender;