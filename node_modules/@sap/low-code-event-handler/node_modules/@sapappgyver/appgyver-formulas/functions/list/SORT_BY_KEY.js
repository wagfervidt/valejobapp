const { resolveObjectMemberAccessor, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./SORT_BY_KEY.runtime');

module.exports = {
  name: 'SORT_BY_KEY',
  category: 'List',
  title: 'Sort a list of objects by a key',
  description: `Sorts an array of objects by the values of the given key.

If the objects do not contain text or number values under the given key, the sort might not behave as expected.

The third parameter can be used to sort in ascending (default) or descending order.

Compared to \`SORT_BY_KEY_CASE_SENSITIVE\`, this function is case insensitive.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to sort',
    inversible: true,
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to sort by',
    type: 'string',
  }, {
    type: 'string',
    title: 'Order',
    default: 'asc',
    enum: ['asc', 'desc'],
    description: 'Order to sort in (`"asc"` for ascending, `"desc"` for descending); defaults to ascending',
  }],
  maxInversions: 1,
  analyze: ([arrayParam, keyParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : keyErrors.map(error => ({
        ...error, offset: keyParam.offset,
      })),
    };
  },
  execute,
  examples: [
    {
      expression: 'SORT_BY_KEY(array, "year")',
      context: {
        array: [
          { name: 'Eric', year: 2010 },
          { name: 'Jane', year: 1987 },
          { name: 'Karen', year: 1980 },
          { name: 'John', year: 2005 },
        ],
      },
      result: [
        { name: 'Karen', year: 1980 },
        { name: 'Jane', year: 1987 },
        { name: 'John', year: 2005 },
        { name: 'Eric', year: 2010 },
      ],
    },
    {
      expression: 'SORT_BY_KEY(array, "year", "desc")',
      context: {
        array: [
          { name: 'Eric', year: 2010 },
          { name: 'Jane', year: 1987 },
          { name: 'Karen', year: 1980 },
          { name: 'John', year: 2005 },
        ],
      },
      result: [
        { name: 'Eric', year: 2010 },
        { name: 'John', year: 2005 },
        { name: 'Jane', year: 1987 },
        { name: 'Karen', year: 1980 },
      ],
    },
    {
      expression: 'SORT_BY_KEY(array, "name", "asc")',
      context: {
        array: [
          { name: 'Eric', year: 2010 },
          { name: 'Jane', year: 1987 },
          { name: 'Karen', year: 1980 },
          { name: 'John', year: 2005 },
        ],
      },
      result: [
        { name: 'Eric', year: 2010 },
        { name: 'Jane', year: 1987 },
        { name: 'John', year: 2005 },
        { name: 'Karen', year: 1980 },
      ],
    },
  ],
};
