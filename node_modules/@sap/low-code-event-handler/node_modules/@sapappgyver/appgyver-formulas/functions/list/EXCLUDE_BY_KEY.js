const { resolveObjectMemberAccessor, getSchemaAssignmentErrors, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./EXCLUDE_BY_KEY.runtime');

module.exports = {
  name: 'EXCLUDE_BY_KEY',
  category: 'List',
  title: 'Remove objects from a list by a key',
  description: `Removes objects from a list by a given key-value pair.

Returns a new list which doesn't contain the matched objects, i.e. ones whose **Key** property's value matches **Value**.

For example, given **Key** \`"id"\` and **Value** \`0\`, all objects in the source **List** whose \`id\` property is \`0\` would be removed from the returned list.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List to exclude objects from',
    items: {
      type: 'object',
    },
  }, {
    title: 'Key',
    description: 'Key whose value to match',
    type: 'string',
  }, {
    title: 'Value',
    description: 'Value to match',
  }],
  analyze: ([arrayParam, keyParam, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const keySchema = (keyParam && keyParam.schema) || {};
    const {
      errors: keyErrors,
      schema: keyItemSchema,
    } = resolveObjectMemberAccessor(itemsSchema, keySchema);
    const itemSchema = (itemParam && itemParam.schema) || {};
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, keyItemSchema);

    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...assignmentErrors.map(error => ({ message: error.message, offset: itemParam.offset })),
        ...keyErrors.map(error => ({ ...error, offset: keyParam.offset })),
      ],
    };
  },
  execute,
  examples: [
    {
      context: {
        array1: [{ a: 3 }, { a: 2 }, { a: 4, b: 3 }, { a: 2, b: 5 }],
        key1: 'a',
        value1: 2,
      },
      expression: 'EXCLUDE_BY_KEY(array1, key1, value1)',
      result: [{ a: 3 }, { a: 4, b: 3 }],
    },
    {
      context: {
        array2: [{ a: 3 }, { a: { b: 10 } }],
        key2: 'a',
        value2: { b: 10 },
      },
      expression: 'EXCLUDE_BY_KEY(array2, key2, value2)',
      result: [{ a: 3 }],
    },
  ],
};
