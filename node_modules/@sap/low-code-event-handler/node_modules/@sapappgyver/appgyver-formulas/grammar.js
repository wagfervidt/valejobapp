// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

const {
  buildAlias,
  buildAliasList,
  buildArray,
  buildArrayItem,
  buildComputedMemberAccess,
  buildConditional,
  buildConstant,
  buildContextAccess,
  buildEntry,
  buildError,
  buildFloat,
  buildFormula,
  buildFunctionCall,
  buildGroup,
  buildIdentifier,
  buildMemberAccess,
  buildObject,
  buildOperator,
  buildParameter,
  buildParameterList,
  buildReservedKeyword,
  buildUnary,
  validateNotExpecting,
  validateNoFunctionName,
} = require('./structure');
const { lexer } = require('./tokenizer');
const emptyWhitespace = { text: '', value: '' };
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "formula", "symbols": ["_", "expression", "_"], "postprocess": (d) => buildFormula(...d)},
    {"name": "formula$ebnf$1", "symbols": ["expression"], "postprocess": id},
    {"name": "formula$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "formula", "symbols": ["_", "formula$ebnf$1", "_", (lexer.has("error") ? {type: "error"} : error)], "postprocess": (d) => buildFormula(...d)},
    {"name": "expression", "symbols": ["conditional"], "postprocess": id},
    {"name": "completeListExpression", "symbols": ["expression"], "postprocess": (d, i, reject) => validateNotExpecting(d[0], ',') || reject},
    {"name": "conditional$macrocall$2", "symbols": ["logicalOr"]},
    {"name": "conditional$macrocall$1", "symbols": ["conditional$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "conditional", "symbols": ["conditional$macrocall$1", "if", "conditional", "else", "conditional"], "postprocess": (d, i, reject) => buildConditional(...d) || reject},
    {"name": "conditional", "symbols": ["logicalOr"], "postprocess": id},
    {"name": "if", "symbols": ["_", {"literal":"?"}, "_"], "postprocess": (d) => d},
    {"name": "else", "symbols": ["_", {"literal":":"}, "_"], "postprocess": (d) => d},
    {"name": "logicalOr$macrocall$2", "symbols": ["logicalOr"]},
    {"name": "logicalOr$macrocall$1", "symbols": ["logicalOr$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "logicalOr", "symbols": ["logicalOr$macrocall$1", "_", {"literal":"||"}, "_", "logicalAnd"], "postprocess": (d, i, reject) => buildOperator(...d) || reject},
    {"name": "logicalOr", "symbols": ["logicalAnd"], "postprocess": id},
    {"name": "logicalAnd$macrocall$2", "symbols": ["logicalAnd"]},
    {"name": "logicalAnd$macrocall$1", "symbols": ["logicalAnd$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "logicalAnd", "symbols": ["logicalAnd$macrocall$1", "_", {"literal":"&&"}, "_", "equality"], "postprocess": (d, i, reject) => buildOperator(...d) || reject},
    {"name": "logicalAnd", "symbols": ["equality"], "postprocess": id},
    {"name": "equality$macrocall$2", "symbols": ["equality"]},
    {"name": "equality$macrocall$1", "symbols": ["equality$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "equality", "symbols": ["equality$macrocall$1", "_", "equalityOperator", "_", "comparison"], "postprocess": (d, i, reject) => buildOperator(d[0], d[1], d[2], d[3], d[4]) || reject},
    {"name": "equality", "symbols": ["comparison"], "postprocess": id},
    {"name": "equalityOperator", "symbols": [{"literal":"=="}], "postprocess": id},
    {"name": "equalityOperator", "symbols": [{"literal":"!="}], "postprocess": id},
    {"name": "equalityOperator", "symbols": [{"literal":"==="}], "postprocess": id},
    {"name": "equalityOperator", "symbols": [{"literal":"!=="}], "postprocess": id},
    {"name": "comparison$macrocall$2", "symbols": ["comparison"]},
    {"name": "comparison$macrocall$1", "symbols": ["comparison$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "comparison", "symbols": ["comparison$macrocall$1", "_", "distinctComparator", "_", "sum"], "postprocess": (d, i, reject) => buildOperator(d[0], d[1], d[2], d[3], d[4]) || reject},
    {"name": "comparison$macrocall$4", "symbols": ["comparison"]},
    {"name": "comparison$macrocall$3", "symbols": ["comparison$macrocall$4"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "comparison", "symbols": ["comparison$macrocall$3", (lexer.has("whitespace") ? {type: "whitespace"} : whitespace), {"literal":"<"}, "_", "sum"], "postprocess": (d, i, reject) => buildOperator(d[0], d[1], d[2], d[3], d[4]) || reject},
    {"name": "comparison", "symbols": ["noFunction", {"literal":"<"}, "_", "sum"], "postprocess": (d, i, reject) => buildOperator(d[0], emptyWhitespace, d[1], d[2], d[3]) || reject},
    {"name": "comparison", "symbols": ["noIncompleteAliasFunction", "_", {"literal":">"}, "_", "sum"], "postprocess": (d, i, reject) => buildOperator(d[0], d[1], d[2], d[3], d[4]) || reject},
    {"name": "comparison", "symbols": ["sum"], "postprocess": id},
    {"name": "noFunction$macrocall$2", "symbols": ["comparison"]},
    {"name": "noFunction$macrocall$1", "symbols": ["noFunction$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "noFunction", "symbols": ["noFunction$macrocall$1"], "postprocess": (d, i, reject) => validateNoFunctionName(d[0]) || reject},
    {"name": "noIncompleteAliasFunction$macrocall$2", "symbols": ["comparison"]},
    {"name": "noIncompleteAliasFunction$macrocall$1", "symbols": ["noIncompleteAliasFunction$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "noIncompleteAliasFunction", "symbols": ["noIncompleteAliasFunction$macrocall$1"], "postprocess": (d, i, reject) => validateNotExpecting(d[0], '>') || reject},
    {"name": "distinctComparator", "symbols": [{"literal":"<="}], "postprocess": id},
    {"name": "distinctComparator", "symbols": [{"literal":">="}], "postprocess": id},
    {"name": "sum$macrocall$2", "symbols": ["sum"]},
    {"name": "sum$macrocall$1", "symbols": ["sum$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "sum", "symbols": ["sum$macrocall$1", "_", /[+-]/, "_", "product"], "postprocess": (d, i, reject) => buildOperator(...d) || reject},
    {"name": "sum", "symbols": ["product"], "postprocess": id},
    {"name": "product$macrocall$2", "symbols": ["product"]},
    {"name": "product$macrocall$1", "symbols": ["product$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "product", "symbols": ["product$macrocall$1", "_", /[*/%]/, "_", "unary"], "postprocess": (d, i, reject) => buildOperator(...d) || reject},
    {"name": "product", "symbols": ["unary"], "postprocess": id},
    {"name": "unary", "symbols": ["signed"], "postprocess": id},
    {"name": "unary$macrocall$2", "symbols": ["unary"]},
    {"name": "unary$macrocall$1", "symbols": ["unary$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "unary", "symbols": ["unary$macrocall$1", (lexer.has("whitespace") ? {type: "whitespace"} : whitespace), "accessor"], "postprocess": (d) => buildError(...d)},
    {"name": "unary", "symbols": ["negation"], "postprocess": id},
    {"name": "signed", "symbols": [/[+-]/, "accessor"], "postprocess": (d) => buildUnary(...d)},
    {"name": "negation", "symbols": [{"literal":"!"}, "negation"], "postprocess": (d) => buildUnary(...d)},
    {"name": "negation$macrocall$2", "symbols": ["negation"]},
    {"name": "negation$macrocall$1", "symbols": ["negation$macrocall$2"], "postprocess": (d, i, reject) => validateNotExpecting(d[0][0], ')', ']', '}', '>') || reject},
    {"name": "negation", "symbols": ["negation$macrocall$1", {"literal":"!"}, "unary"], "postprocess": (d) => buildError(d[0], null, buildUnary(d[1], d[2]))},
    {"name": "negation", "symbols": ["accessor"], "postprocess": id},
    {"name": "accessor", "symbols": ["completeMemberAccess", {"literal":"."}, "accessKey", "grouping"], "postprocess": (d) => buildError(buildMemberAccess(d[0], d[1], d[2]), null, d[3])},
    {"name": "accessor", "symbols": ["completeMemberAccess", {"literal":"."}], "postprocess": (d) => buildMemberAccess(...d)},
    {"name": "accessor", "symbols": ["completeMemberAccess", {"literal":"["}, "_", "expression", "_", {"literal":"]"}, "functionCall"], "postprocess": (d) => buildError(buildComputedMemberAccess(d[0], d[1], d[2], d[3], d[4], d[5]), null, d[6])},
    {"name": "accessor", "symbols": ["memberAccess"], "postprocess": id},
    {"name": "completeMemberAccess", "symbols": ["memberAccess"], "postprocess": (d, i, reject) => validateNotExpecting(d[0], ')', ']', '}') || reject},
    {"name": "memberAccess$ebnf$1", "symbols": ["accessKey"], "postprocess": id},
    {"name": "memberAccess$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "memberAccess", "symbols": ["completeMemberAccess", {"literal":"."}, "memberAccess$ebnf$1"], "postprocess": (d) => buildMemberAccess(...d)},
    {"name": "memberAccess", "symbols": ["completeMemberAccess", {"literal":"["}, "_", "expression", "_", {"literal":"]"}], "postprocess": (d) => buildComputedMemberAccess(...d)},
    {"name": "memberAccess", "symbols": ["array"], "postprocess": id},
    {"name": "array", "symbols": ["closedArray", "functionCall"], "postprocess": (d) => buildError(d[0], null, d[1])},
    {"name": "array", "symbols": ["closedArray"], "postprocess": id},
    {"name": "array", "symbols": ["openArray"], "postprocess": id},
    {"name": "array", "symbols": ["functionCall"], "postprocess": id},
    {"name": "closedArray$ebnf$1", "symbols": []},
    {"name": "closedArray$ebnf$1", "symbols": ["closedArray$ebnf$1", "latterItem"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "closedArray", "symbols": ["firstItem", "closedArray$ebnf$1", "lastItem", {"literal":"]"}], "postprocess": (d, i, reject) => buildArray([], [d[0]].concat(d[1], d[2]), d[3]) || reject},
    {"name": "closedArray", "symbols": ["onlyItem", {"literal":"]"}], "postprocess": (d, i, reject) => buildArray([], [d[0]], d[1]) || reject},
    {"name": "closedArray", "symbols": [{"literal":"["}, "_", {"literal":"]"}], "postprocess": (d, i, reject) => buildArray([d[0], d[1]], [], d[2]) || reject},
    {"name": "openArray$ebnf$1", "symbols": []},
    {"name": "openArray$ebnf$1", "symbols": ["openArray$ebnf$1", "latterItem"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "openArray", "symbols": ["firstItem", "openArray$ebnf$1", "openLastItem"], "postprocess": (d, i, reject) => buildArray([], [d[0]].concat(d[1], d[2])) || reject},
    {"name": "openArray", "symbols": ["openOnlyItem"], "postprocess": (d, i, reject) => buildArray([], d) || reject},
    {"name": "openArray", "symbols": [{"literal":"["}], "postprocess": (d, i, reject) => buildArray(d, []) || reject},
    {"name": "firstItem", "symbols": [{"literal":"["}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1], d[2], d[3]) })},
    {"name": "firstItem", "symbols": [{"literal":"["}, "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1]) })},
    {"name": "onlyItem", "symbols": [{"literal":"["}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1], d[2], d[3]) })},
    {"name": "openOnlyItem", "symbols": [{"literal":"["}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1], d[2]) })},
    {"name": "latterItem$ebnf$1$subexpression$1", "symbols": ["completeListExpression", "_"]},
    {"name": "latterItem$ebnf$1", "symbols": ["latterItem$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "latterItem$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "latterItem", "symbols": [{"literal":","}, "_", "latterItem$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "lastItem$ebnf$1$subexpression$1", "symbols": ["expression", "_"]},
    {"name": "lastItem$ebnf$1", "symbols": ["lastItem$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "lastItem$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "lastItem", "symbols": [{"literal":","}, "_", "lastItem$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "openLastItem$ebnf$1$subexpression$1", "symbols": ["_", "expression"]},
    {"name": "openLastItem$ebnf$1", "symbols": ["openLastItem$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "openLastItem$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openLastItem", "symbols": [{"literal":","}, "openLastItem$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildArrayItem(d[0], d[1] ? d[1][0] : emptyWhitespace, d[1] && d[1][1]) })},
    {"name": "functionCall", "symbols": ["closedFunctionCall"], "postprocess": id},
    {"name": "functionCall", "symbols": ["closedFunctionCall", "functionCall"], "postprocess": (d) => buildError(d[0], null, d[1])},
    {"name": "functionCall", "symbols": ["openFunctionCall"], "postprocess": id},
    {"name": "functionCall", "symbols": ["closedFunctionNameOnly"], "postprocess": id},
    {"name": "functionCall", "symbols": ["closedFunctionNameOnly", "object"], "postprocess": (d) => buildError(d[0], null, d[1])},
    {"name": "functionCall", "symbols": ["openFunctionNameOnly"], "postprocess": id},
    {"name": "functionCall", "symbols": ["grouping"], "postprocess": id},
    {"name": "closedFunctionCall$ebnf$1", "symbols": ["aliases"], "postprocess": id},
    {"name": "closedFunctionCall$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "closedFunctionCall", "symbols": ["functionName", "closedFunctionCall$ebnf$1", "closedParameters", {"literal":")"}], "postprocess": (d, i, reject) => buildFunctionCall(...d) || reject},
    {"name": "openFunctionCall$ebnf$1", "symbols": ["aliases"], "postprocess": id},
    {"name": "openFunctionCall$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openFunctionCall", "symbols": ["functionName", "openFunctionCall$ebnf$1", "openParameters"], "postprocess": (d, i, reject) => buildFunctionCall(...d) || reject},
    {"name": "closedFunctionNameOnly", "symbols": [(lexer.has("functionName") ? {type: "functionName"} : functionName), "closedAliases"], "postprocess": (d) => buildFunctionCall(...d)},
    {"name": "closedFunctionNameOnly", "symbols": [(lexer.has("functionName") ? {type: "functionName"} : functionName)], "postprocess": (d) => buildFunctionCall(...d)},
    {"name": "openFunctionNameOnly", "symbols": [(lexer.has("functionName") ? {type: "functionName"} : functionName), "openAliases"], "postprocess": (d) => buildFunctionCall(...d)},
    {"name": "functionName", "symbols": [(lexer.has("functionName") ? {type: "functionName"} : functionName)], "postprocess": id},
    {"name": "functionName", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)], "postprocess": id},
    {"name": "closedParameters$ebnf$1", "symbols": []},
    {"name": "closedParameters$ebnf$1", "symbols": ["closedParameters$ebnf$1", "latterParameter"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "closedParameters", "symbols": ["firstParameter", "closedParameters$ebnf$1", "lastParameter"], "postprocess": (d, i, reject) => buildParameterList([d[0]].concat(d[1], d[2])) || reject},
    {"name": "closedParameters", "symbols": ["onlyParameter"], "postprocess": (d, i, reject) => buildParameterList([d[0]]) || reject},
    {"name": "closedParameters", "symbols": [{"literal":"("}, "_"], "postprocess": (d, i, reject) => buildParameterList([], d) || reject},
    {"name": "openParameters$ebnf$1", "symbols": []},
    {"name": "openParameters$ebnf$1", "symbols": ["openParameters$ebnf$1", "latterParameter"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "openParameters", "symbols": ["firstParameter", "openParameters$ebnf$1", "openLastParameter"], "postprocess": (d, i, reject) => buildParameterList([d[0]].concat(d[1], d[2])) || reject},
    {"name": "openParameters", "symbols": ["openOnlyParameter"], "postprocess": (d, i, reject) => buildParameterList([d[0]]) || reject},
    {"name": "openParameters", "symbols": [{"literal":"("}], "postprocess": (d, i, reject) => buildParameterList([], d) || reject},
    {"name": "firstParameter", "symbols": [{"literal":"("}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1], d[2], d[3]) })},
    {"name": "firstParameter", "symbols": [{"literal":"("}, "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1]) })},
    {"name": "onlyParameter", "symbols": [{"literal":"("}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1], d[2], d[3]) })},
    {"name": "openOnlyParameter", "symbols": [{"literal":"("}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1], d[2]) })},
    {"name": "latterParameter$ebnf$1$subexpression$1", "symbols": ["completeListExpression", "_"]},
    {"name": "latterParameter$ebnf$1", "symbols": ["latterParameter$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "latterParameter$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "latterParameter", "symbols": [{"literal":","}, "_", "latterParameter$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "lastParameter$ebnf$1$subexpression$1", "symbols": ["expression", "_"]},
    {"name": "lastParameter$ebnf$1", "symbols": ["lastParameter$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "lastParameter$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "lastParameter", "symbols": [{"literal":","}, "_", "lastParameter$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "openLastParameter$ebnf$1$subexpression$1", "symbols": ["_", "expression"]},
    {"name": "openLastParameter$ebnf$1", "symbols": ["openLastParameter$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "openLastParameter$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openLastParameter", "symbols": [{"literal":","}, "openLastParameter$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], item: buildParameter(d[0], d[1] ? d[1][0] : emptyWhitespace, d[1] && d[1][1]) })},
    {"name": "aliases", "symbols": ["closedAliases"], "postprocess": id},
    {"name": "aliases", "symbols": ["openAliases"], "postprocess": id},
    {"name": "closedAliases$ebnf$1", "symbols": []},
    {"name": "closedAliases$ebnf$1", "symbols": ["closedAliases$ebnf$1", "latterAlias"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "closedAliases", "symbols": ["firstAlias", "closedAliases$ebnf$1", {"literal":">"}], "postprocess": (d) => buildAliasList([d[0]].concat(d[1]), d[2])},
    {"name": "openAliases$ebnf$1", "symbols": []},
    {"name": "openAliases$ebnf$1", "symbols": ["openAliases$ebnf$1", "latterAlias"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "openAliases", "symbols": ["firstAlias", "openAliases$ebnf$1", "lastOpenAlias"], "postprocess": (d) => buildAliasList([d[0]].concat(d[1], d[2]))},
    {"name": "openAliases", "symbols": ["onlyOpenAlias"], "postprocess": (d) => buildAliasList(d)},
    {"name": "firstAlias$ebnf$1$subexpression$1", "symbols": ["name", "_"]},
    {"name": "firstAlias$ebnf$1", "symbols": ["firstAlias$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "firstAlias$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "firstAlias", "symbols": [{"literal":"<"}, "_", "firstAlias$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], alias: buildAlias(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "latterAlias$ebnf$1$subexpression$1", "symbols": ["name", "_"]},
    {"name": "latterAlias$ebnf$1", "symbols": ["latterAlias$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "latterAlias$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "latterAlias", "symbols": [{"literal":","}, "_", "latterAlias$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], alias: buildAlias(d[0], d[1], d[2] && d[2][0], d[2] && d[2][1]) })},
    {"name": "onlyOpenAlias$ebnf$1$subexpression$1", "symbols": ["_", "name"]},
    {"name": "onlyOpenAlias$ebnf$1", "symbols": ["onlyOpenAlias$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "onlyOpenAlias$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "onlyOpenAlias", "symbols": [{"literal":"<"}, "onlyOpenAlias$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], alias: buildAlias(d[0], d[1] ? d[1][0] : emptyWhitespace, d[1] && d[1][1]) })},
    {"name": "lastOpenAlias$ebnf$1$subexpression$1", "symbols": ["_", "name"]},
    {"name": "lastOpenAlias$ebnf$1", "symbols": ["lastOpenAlias$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "lastOpenAlias$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "lastOpenAlias", "symbols": [{"literal":","}, "lastOpenAlias$ebnf$1"], "postprocess": (d) => ({ prefix: [d[0]], alias: buildAlias(d[0], d[1] ? d[1][0] : emptyWhitespace, d[1] && d[1][1]) })},
    {"name": "grouping", "symbols": ["closedGroup"], "postprocess": id},
    {"name": "grouping", "symbols": ["closedGroup", "object"], "postprocess": (d) => buildError(d[0], null, d[1])},
    {"name": "grouping", "symbols": ["openGroup"], "postprocess": id},
    {"name": "grouping", "symbols": ["object"], "postprocess": id},
    {"name": "closedGroup", "symbols": [{"literal":"("}, "_", "expression", "_", {"literal":")"}], "postprocess": (d, i, reject) => buildGroup(...d) || reject},
    {"name": "openGroup", "symbols": [{"literal":"("}, "_", "openGroupExpression"], "postprocess": (d, i, reject) => buildGroup(...d) || reject},
    {"name": "openGroup", "symbols": [{"literal":"("}], "postprocess": (d, i, reject) => buildGroup(...d) || reject},
    {"name": "openGroupExpression", "symbols": ["expression"], "postprocess": (d, i, reject) => validateNotExpecting(d[0], ')') || reject},
    {"name": "object", "symbols": ["closedObject"], "postprocess": id},
    {"name": "object", "symbols": ["closedObject", "singular"], "postprocess": (d) => buildError(d[0], null, d[1])},
    {"name": "object", "symbols": ["openObject"], "postprocess": id},
    {"name": "object", "symbols": ["singular"], "postprocess": id},
    {"name": "closedObject$ebnf$1", "symbols": []},
    {"name": "closedObject$ebnf$1", "symbols": ["closedObject$ebnf$1", "latterEntry"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "closedObject", "symbols": ["partialFirstEntry", "closedObject$ebnf$1", "lastEntry", {"literal":"}"}], "postprocess": (d, i, reject) => buildObject([], [d[0]].concat(d[1], d[2]), d[3]) || reject},
    {"name": "closedObject", "symbols": ["onlyEntry", {"literal":"}"}], "postprocess": (d, i, reject) => buildObject([], [d[0]], d[1]) || reject},
    {"name": "closedObject", "symbols": [{"literal":"{"}, "_", {"literal":"}"}], "postprocess": (d, i, reject) => buildObject([d[0], d[1]], [], d[2]) || reject},
    {"name": "openObject$ebnf$1", "symbols": []},
    {"name": "openObject$ebnf$1", "symbols": ["openObject$ebnf$1", "latterEntry"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "openObject", "symbols": ["partialFirstEntry", "openObject$ebnf$1", "openLastEntry"], "postprocess": (d, i, reject) => buildObject([], [d[0]].concat(d[1], d[2])) || reject},
    {"name": "openObject", "symbols": ["openOnlyEntry"], "postprocess": (d, i, reject) => buildObject([], d) || reject},
    {"name": "openObject", "symbols": [{"literal":"{"}], "postprocess": (d, i, reject) => buildObject(d, []) || reject},
    {"name": "partialFirstEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "partialFirstEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "partialFirstEntry", "symbols": [{"literal":"{"}, "_", "partialFirstEntry$ebnf$1", {"literal":":"}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], d[6]) })},
    {"name": "partialFirstEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "partialFirstEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "partialFirstEntry", "symbols": [{"literal":"{"}, "_", "partialFirstEntry$ebnf$2", {"literal":":"}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, d[4]) })},
    {"name": "partialFirstEntry", "symbols": [{"literal":"{"}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], d[3]) })},
    {"name": "partialFirstEntry", "symbols": [{"literal":"{"}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], null, null) })},
    {"name": "onlyEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "onlyEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "onlyEntry", "symbols": [{"literal":"{"}, "_", "onlyEntry$ebnf$1", {"literal":":"}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], d[6]) })},
    {"name": "onlyEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "onlyEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "onlyEntry", "symbols": [{"literal":"{"}, "_", "onlyEntry$ebnf$2", {"literal":":"}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, d[4]) })},
    {"name": "onlyEntry", "symbols": [{"literal":"{"}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], d[3]) })},
    {"name": "openOnlyEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "openOnlyEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openOnlyEntry", "symbols": [{"literal":"{"}, "_", "openOnlyEntry$ebnf$1", {"literal":":"}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], null) })},
    {"name": "openOnlyEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "openOnlyEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openOnlyEntry", "symbols": [{"literal":"{"}, "_", "openOnlyEntry$ebnf$2", {"literal":":"}], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, null) })},
    {"name": "openOnlyEntry", "symbols": [{"literal":"{"}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], null) })},
    {"name": "latterEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "latterEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "latterEntry", "symbols": [{"literal":","}, "_", "latterEntry$ebnf$1", {"literal":":"}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], d[6]) })},
    {"name": "latterEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "latterEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "latterEntry", "symbols": [{"literal":","}, "_", "latterEntry$ebnf$2", {"literal":":"}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, d[4]) })},
    {"name": "latterEntry", "symbols": [{"literal":","}, "_", "completeListExpression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], d[3]) })},
    {"name": "latterEntry", "symbols": [{"literal":","}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], null, null) })},
    {"name": "lastEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "lastEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "lastEntry", "symbols": [{"literal":","}, "_", "lastEntry$ebnf$1", {"literal":":"}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], d[6]) })},
    {"name": "lastEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "lastEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "lastEntry", "symbols": [{"literal":","}, "_", "lastEntry$ebnf$2", {"literal":":"}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, d[4]) })},
    {"name": "lastEntry", "symbols": [{"literal":","}, "_", "expression", "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], d[3]) })},
    {"name": "lastEntry", "symbols": [{"literal":","}, "_"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], null, null) })},
    {"name": "openLastEntry$ebnf$1", "symbols": ["key"], "postprocess": id},
    {"name": "openLastEntry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openLastEntry", "symbols": [{"literal":","}, "_", "openLastEntry$ebnf$1", {"literal":":"}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3], d[4]], d[5], null) })},
    {"name": "openLastEntry$ebnf$2", "symbols": ["key"], "postprocess": id},
    {"name": "openLastEntry$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "openLastEntry", "symbols": [{"literal":","}, "_", "openLastEntry$ebnf$2", {"literal":":"}], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], d[2], [d[3]], null, null) })},
    {"name": "openLastEntry", "symbols": [{"literal":","}, "_", "expression"], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], d[1], null, [], d[2], null) })},
    {"name": "openLastEntry", "symbols": [{"literal":","}], "postprocess": (d) => ({ prefix: [d[0]], entry: buildEntry(d[0], emptyWhitespace, null, [], null, null) })},
    {"name": "singular", "symbols": ["string"], "postprocess": id},
    {"name": "singular", "symbols": ["float"], "postprocess": id},
    {"name": "singular", "symbols": ["boolean"], "postprocess": id},
    {"name": "singular", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)], "postprocess": (d) => buildContextAccess(d)},
    {"name": "singular", "symbols": [{"literal":"null"}], "postprocess": (d) => buildConstant(null, d)},
    {"name": "singular", "symbols": [{"literal":"undefined"}], "postprocess": (d) => buildConstant(undefined, d)},
    {"name": "singular", "symbols": [{"literal":"NaN"}], "postprocess": (d) => buildConstant(NaN, d)},
    {"name": "singular", "symbols": [(lexer.has("keyword") ? {type: "keyword"} : keyword)], "postprocess": (d, i, reject) => buildReservedKeyword(d) || reject},
    {"name": "float", "symbols": [(lexer.has("number") ? {type: "number"} : number)], "postprocess": (d) => buildConstant(d[0].value, d)},
    {"name": "boolean", "symbols": [{"literal":"true"}], "postprocess": (d) => buildConstant(true, d)},
    {"name": "boolean", "symbols": [{"literal":"false"}], "postprocess": (d) => buildConstant(false, d)},
    {"name": "string", "symbols": [(lexer.has("string") ? {type: "string"} : string)], "postprocess": (d) => buildConstant(d[0].value, d)},
    {"name": "accessKey", "symbols": ["name"], "postprocess": (d) => buildIdentifier(d[0])},
    {"name": "key", "symbols": ["accessKey"], "postprocess": id},
    {"name": "key", "symbols": ["string"], "postprocess": id},
    {"name": "name", "symbols": [(lexer.has("identifier") ? {type: "identifier"} : identifier)], "postprocess": id},
    {"name": "name", "symbols": [(lexer.has("keyword") ? {type: "keyword"} : keyword)], "postprocess": id},
    {"name": "name", "symbols": [(lexer.has("functionName") ? {type: "functionName"} : functionName)], "postprocess": id},
    {"name": "_$ebnf$1", "symbols": [(lexer.has("whitespace") ? {type: "whitespace"} : whitespace)], "postprocess": id},
    {"name": "_$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": (d) => d[0] || emptyWhitespace}
]
  , ParserStart: "formula"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
