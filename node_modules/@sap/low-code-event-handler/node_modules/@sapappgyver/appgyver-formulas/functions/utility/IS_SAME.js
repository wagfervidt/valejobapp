const { getSchemaAssignmentErrors } = require('@sapappgyver/appgyver-schemas');
const execute = require('./IS_SAME.runtime');

module.exports = {
  name: 'IS_SAME',
  category: 'Utility',
  title: 'Check if values are the same',
  description: 'Returns `true` if the both parameter values are exactly the same, otherwise `false`. '
    + 'Same than using the `===` operator in formulas.\n\n'
    + 'Similar to `IS_EQUAL` except that it does **not** perform deep comparison for objects and lists. '
    + 'Instead objects are considered "same" only if they refer to the instance in the memory. '
    + 'In most cases, you might want to use `IS_EQUAL` instead of this function.'
    + 'The functionality of this function is equal to JavaScript\'s [`Object.is()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).',
  parameters: [{
    title: 'Value 1',
    description: 'First value to compare',
  }, {
    title: 'Value 2',
    description: 'Second value to compare',
  }],
  analyze: ([param1, param2], offset, parameterErrors) => {
    const schema = { type: 'boolean' };
    let errors = [];
    if (!parameterErrors.length) {
      const param1Errors = getSchemaAssignmentErrors(param1.schema, param2.schema);
      const param2Errors = getSchemaAssignmentErrors(param2.schema, param1.schema);
      if (param1Errors.length && param2Errors.length) {
        errors = param2Errors.map(error => ({ ...error, offset: param2.offset }));
      }
    }
    return { schema, errors };
  },
  execute,
  examples: [
    { expression: 'IS_SAME("cat", "cat")', result: true },
    { expression: 'IS_SAME(2, 2)', result: true },
    { expression: 'IS_SAME({name: "John"}, {name: "John"})', result: false },
    { expression: 'IS_SAME(["cat"], ["cat"])', result: false },
  ],
};
