const commandLineArgs = require('command-line-args');
const path = require('path');
const fs = require('fs-extra');
const process = require('process');
const logger = require('../logger');
const { AMEND_TARGET_MOBILE, AMEND_TARGET_SOURCE} = require('../utils');

const optionDefinitions = [
  { name: 'target', type: String, multiple: false },
  { name: 'path', type: String, multiple: false },
  { name: 'project', type: String, multiple: false },
  { name: 'servicePath', type: String, multiple: false },
  { name: 'destination', type: String, multiple: false }
];

let options = commandLineArgs(optionDefinitions);

function getAmendPath() {
  const sPath = options['path'];
  if (sPath) {
    return path.resolve(sPath);
  } else {
    let sCurrentPath = process.cwd();
    return path.join(sCurrentPath,"dist");
  }
}

function getServicePath() {
  if (options['servicePath']) {
    return path.resolve(options['servicePath']);
  } else {
    let sCurrentPath = process.cwd();
    return path.join(sCurrentPath,"..","..","Services");
  }
}

function getProjectFolder() {
  if (options['project']) {
    let fullPath = path.resolve(options['project']);
    if (fs.existsSync(fullPath)) {
      return fullPath;
    } else {
      console.error(`failed to find path ${fullPath}`);
      process.exit(-1);
    }
  } else {
    let sCurrentPath = process.cwd();
    return sCurrentPath;
  }
}

function processArguments() {
  function getMissingRequiredArgumentMessage() {
    if (!options['target']) {
      return logger.getError('Missing target options');
    }
    if (options['target']===AMEND_TARGET_MOBILE && !options['destination']) {
      return logger.getError('Missing destination options');
    }
    return null;
  }

  const missingArgumentMessage = getMissingRequiredArgumentMessage();
  if (missingArgumentMessage) {
    console.error(missingArgumentMessage);
  }
  if (missingArgumentMessage) {//|| options.help
    const getUsage = require('command-line-usage')

    const sections = [
      {
        header: 'Amend bundle result',
        content: 'Amend bundle result for local or cloud usage'
      },
      {
        header: 'Options',
        optionList: [
          {
            name: 'target',
            typeLabel: '',
            description: 'target usage for amend, it can be local or cloud'
          },
          {
            name: 'path',
            typeLabel: '{underline folder}',
            description: 'the target folder'
          },
          {
            name: 'project',
            typeLabel: '{underline folder}',
            description: 'the target folder'
          },
          {
            name: 'servicePath',
            typeLabel: '{underline folder}',
            description: 'the Services path'
          },
          {
            name: 'destination',
            typeLabel: '',
            description: 'the mobile destination name'
          }
        ]
      }
    ]
    const usage = getUsage(sections);
    console.log(usage);
    process.exit(-1);
  }
}


exports.target = function () {
  return options['target'];
}

exports.path = function () {
  return getAmendPath();
}

exports.servicePath = function () {
  return getServicePath();
}

exports.project = function () {
  if (options['target']==AMEND_TARGET_SOURCE) {
    return getProjectFolder();
  } else {
    return path.join(getServicePath(),"..");
  }
}

exports.destination = function () {
  return options['destination'];
}

processArguments();
