const {
  getSchemaAssignmentErrors,
  getArrayItemSchema,
} = require('@sapappgyver/appgyver-schemas');
const execute = require('./INSERT_ITEM_AT.runtime');

module.exports = {
  name: 'INSERT_ITEM_AT',
  category: 'List',
  title: 'Insert item in list at the given index',
  description: `Return a copy of the list where a new item is inserted at the given index, pushing any following items to greater indexes.

If the index is negative, then the insertion position is counted from the end of the list`,
  parameters: [
    {
      type: 'array',
      title: 'Array',
      description: 'List',
      items: {
        $id: '#item', // Make this a generic type
      },
    },
    {
      title: 'index',
      description: 'Index at which the item will be inserted',
      type: 'number',
    },
    {
      $ref: '#item', // Refer to the generic type
      title: 'newItem',
      description: 'Item to insert',
    },
  ],
  analyze: ([arrayParam,, itemParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const givenArrayItemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const itemSchema = (itemParam && itemParam.schema) || { type: 'array' };
    const assignmentErrors = getSchemaAssignmentErrors(itemSchema, givenArrayItemsSchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...assignmentErrors.map(error => ({ ...error, offset: itemParam.offset })),
      ],
    };
  },
  execute,
  examples: [
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'INSERT_ITEM_AT(numbers, 1, 999)',
      result: [1, 999, 2, 3],
    },
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'INSERT_ITEM_AT(numbers, 10, 999)',
      result: [1, 2, 3, 999],
    },
    {
      context: {
        numbers: [1, 2, 3],
      },
      expression: 'INSERT_ITEM_AT(numbers, -1, 999)',
      result: [1, 2, 999, 3],
    },
    {
      context: {
        objArr: [{ a: 1 }, { a: 2 }, { a: 3 }],
        newItem: { a: 0 },
      },
      expression: 'INSERT_ITEM_AT(objArr, -10, newItem)',
      result: [{ a: 0 }, { a: 1 }, { a: 2 }, { a: 3 }],
    },
  ],
};
