const { getUnionSchema, getArrayItemSchema } = require('@sapappgyver/appgyver-schemas');
const execute = require('./SYMMETRIC_DIFFERENCE.runtime');

module.exports = {
  name: 'SYMMETRIC_DIFFERENCE',
  category: 'List',
  title: 'Returns symmetric difference items in lists',
  description: 'Return a new list with items only found in one of the two given lists, but **not** in both.',
  parameters: [{
    type: 'array',
    title: 'List 1',
    description: 'First list',
  }, {
    type: 'array',
    title: 'List 2',
    description: 'Second list',
  }],
  analyze: (parameters) => {
    const arrayItemSchemas = parameters.slice(0, 2)
      .map(({ schema }) => schema && getArrayItemSchema(schema));
    const arrayItemSchema = getUnionSchema(arrayItemSchemas);
    const schema = { type: 'array' };
    if (arrayItemSchema) {
      schema.items = arrayItemSchema;
    }
    return { schema };
  },
  execute,
  examples: [
    {
      context: {
        numbers1: [10, 55, 66, 54, 85, 91],
        numbers2: [52, 55, 85, 10, 94],
      },
      expression: 'SYMMETRIC_DIFFERENCE(numbers1, numbers2)',
      result: [66, 54, 91, 52, 94],
    },
    {
      context: {
        string1: ['foo', 'zxc', 'bar', 'baz'],
        string2: ['foo', 'bar', 'baz', 'abc'],
      },
      expression: 'SYMMETRIC_DIFFERENCE(string1, string2)',
      result: ['zxc', 'abc'],
    },
    {
      context: {
        array1: [{ name: 'Kate', age: 30 }, { name: 'Jack', age: 30 }, { name: 'Kate', age: 25 }],
        array2: [{ name: 'Jack', age: 30 }, { name: 'Jon', age: 32 }, { name: 'Kate', age: 30 }],
      },
      expression: 'SYMMETRIC_DIFFERENCE(array1, array2)',
      result: [{ name: 'Kate', age: 25 }, { name: 'Jon', age: 32 }],
    },
  ],
};
