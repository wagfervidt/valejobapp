export function indexOfValue<Value>(array: Value[], value: Value): number;
export function includesValue<Value>(array: Value[], value: Value): boolean;
export function immutableMap<S, V>(array: S[], callback: (item: S, index: number, array: S[]) => V): V[];
export function addUnionValues<Value>(results: Value[], ...arrays: Value[][]): Value[];
export function unionValues<Value>(...arrays: Value[][]): Value[];
export function intersectionValues<Value>(...arrays: Value[][]): Value[];
export function combinations<Value>(optionArrays: Value[][]): Value[][];
export function pickEvenly<Value>(values: Value[], count: number): Value[];

export interface SortSlot<Value, Key> {
  index: number;
  item: Value;
  key: Key;
}

export function performSort<Value, Key = Value>(array: Value[], direction?: 'asc' | 'desc', key?: (item: Value, index: number) => Key, caseSensitive?: boolean): SortSlot<Value, Key>[];
export function performSort<Value, Prop extends keyof Value = keyof Value>(array: Value[], direction?: 'asc' | 'desc', key?: Prop, caseSensitive?: boolean): SortSlot<Value, Value[Prop]>[];
export function performSort<Value>(array: Value[], direction?: 'asc' | 'desc', key?: null | ((item: Value, index: number) => unknown) | keyof Value, caseSensitive?: boolean): SortSlot<Value, unknown>[];

export function sort<Value>(array: Value[], direction?: 'asc' | 'desc', key?: null | ((item: Value, index: number) => unknown) | keyof Value, caseSensitive?: boolean): Value[];

export interface FilterSlot<Value> {
  index: number;
  item: Value;
}

export function performFilter<Value>(array: Value[], criteria: (item: Value, index: number) => boolean): FilterSlot<Value>[];
export function median(array: number[]): number;
export function repeat<Value>(item: Value, count: number): Value[];
