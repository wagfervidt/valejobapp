/* eslint-disable no-bitwise */

const hypGeomDist = (numSuccesses, popSize, popSuccesses, numDraws) => {
  if (numSuccesses < 0 || numSuccesses < popSuccesses - (popSize - numDraws)) {
    return null;
  }
  if (numSuccesses > numDraws || numSuccesses > popSuccesses) {
    return null;
  }
  if (popSuccesses * 2 > popSize) {
    if (numDraws * 2 > popSize) {
      return hypGeomDist(
        popSize - popSuccesses - numDraws + numSuccesses,
        popSize,
        popSize - popSuccesses,
        popSize - numDraws,
      );
    }
    return hypGeomDist(numDraws - numSuccesses, popSize, popSize - popSuccesses, numDraws);
  }
  if (numDraws * 2 > popSize) {
    return hypGeomDist(popSuccesses - numSuccesses, popSize, popSuccesses, popSize - numDraws);
  }
  if (popSuccesses < numDraws) {
    return hypGeomDist(numSuccesses, popSize, numDraws, popSuccesses);
  }

  let scaledPDF = 1;
  let samplesDone = 0;

  for (let i = 0; i < numSuccesses; i++) {
    while (scaledPDF > 1 && samplesDone < numDraws) {
      scaledPDF *= 1 - (popSuccesses / (popSize - samplesDone));
      samplesDone += 1;
    }
    scaledPDF *= (numDraws - i) * (popSuccesses - i) / ((i + 1)
        * (popSize - popSuccesses - numDraws + i + 1));
  }

  for (; samplesDone < numDraws; samplesDone++) {
    scaledPDF *= 1 - (popSuccesses / (popSize - samplesDone));
  }

  return Math.min(1, Math.max(0, scaledPDF));
};

module.exports = ([numSucceses, numDraws, popSuccesses, popSize]) => {
  if (!(typeof numSucceses === 'number' && Number.isFinite(numSucceses))) {
    return null;
  }
  if (!(typeof numDraws === 'number' && Number.isFinite(numDraws))) {
    return null;
  }
  if (!(typeof popSuccesses === 'number' && Number.isFinite(popSuccesses))) {
    return null;
  }
  if (!(typeof popSize === 'number' && Number.isFinite(popSize))) {
    return null;
  }
  const numSuccessesRounded = Math.floor(numSucceses);
  const numDrawsRounded = Math.floor(numDraws);
  const popSuccessesRounded = Math.floor(popSuccesses);
  const popSizeRounded = Math.floor(popSize);

  const result = hypGeomDist(
    numSuccessesRounded,
    popSizeRounded,
    popSuccessesRounded,
    numDrawsRounded,
  );
  return Number.isFinite(result) ? result : null;
};
