const {
  getSchemaAssignmentErrors,
  getArrayItemSchema,
} = require('@sapappgyver/appgyver-schemas');
const execute = require('./INSERT_ITEMS_AT.runtime');

module.exports = {
  name: 'INSERT_ITEMS_AT',
  category: 'List',
  title: 'Insert items in list at the given index',
  description: `Return a copy of the list where a new items is inserted at the given index, pushing any following items to greater indexes.

If the index is negative, then the insertion position is counted from the end of the list`,
  parameters: [
    {
      type: 'array',
      title: 'Array',
      description: 'List',
      items: {
        $id: '#item', // Make this a generic type
      },
    },
    {
      title: 'index',
      description: 'Index at which the items will be inserted',
      type: 'number',
    },
    {
      type: 'array',
      items: {
        $ref: '#item', // Refer to the generic type
      },
      title: 'newItems',
      description: 'Items to insert',
    },
  ],
  analyze: ([arrayParam,, itemsParam], offset, parameterErrors) => {
    const arraySchema = (arrayParam && arrayParam.schema) || { type: 'array' };
    const givenArrayItemsSchema = getArrayItemSchema(arraySchema) || { type: 'object' };
    const itemArrSchema = (itemsParam && itemsParam.schema) || { type: 'array' };
    const itemsSchema = getArrayItemSchema(itemArrSchema) || { type: 'object' };
    const assignmentErrors = getSchemaAssignmentErrors(itemsSchema, givenArrayItemsSchema);
    return {
      schema: arraySchema,
      errors: parameterErrors.length ? [] : [
        ...assignmentErrors.map(error => ({ ...error, offset: itemsParam.offset })),
      ],
    };
  },
  execute,
  examples: [
    {
      context: {
        numbers: [1, 2, 3],
        numbers2: [999, 1000],
      },
      expression: 'INSERT_ITEMS_AT(numbers, 1, numbers2)',
      result: [1, 999, 1000, 2, 3],
    },
    {
      context: {
        numbers: [1, 2, 3],
        numbers2: [999, 1000],
      },
      expression: 'INSERT_ITEMS_AT(numbers, 10, numbers2)',
      result: [1, 2, 3, 999, 1000],
    },
    {
      context: {
        numbers: [1, 2, 3],
        numbers2: [999, 1000],
      },
      expression: 'INSERT_ITEMS_AT(numbers, -1, numbers2)',
      result: [1, 2, 999, 1000, 3],
    },
    {
      context: {
        objArr: [{ x: 12, y: 23 }, { x: 24, y: 33 }, { x: 37, y: 48 }],
        newItems: [{ x: 4, y: 20 }, { x: -1, y: 12 }],
      },
      expression: 'INSERT_ITEMS_AT(objArr, -10, newItems)',
      result: [
        { x: 4, y: 20 },
        { x: -1, y: 12 },
        { x: 12, y: 23 },
        { x: 24, y: 33 },
        { x: 37, y: 48 },
      ],
    },
  ],
};
