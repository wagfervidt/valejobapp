const {
  getArrayItemSchema, simplifySchema, getSchemaAssignmentErrors, getUnionSchema,
} = require('@sapappgyver/appgyver-schemas');
const execute = require('./SET_ITEM.runtime');

module.exports = {
  name: 'SET_ITEM',
  category: 'List',
  title: 'Replaces a matching item in list',
  description: `Replaces or updates the first item from a list that matches the given criteria with a new item. Returns a list where the matching item has been changed to the new value.

The criteria is defined as a formula at the 2nd parameter. The formula is evaluated with each item in the list until a matching item is found.
The search formula must result in a true/false value. If \`true\`, then item will be excluded from the result, otherwise it will be included.

The 3rd parameter defines either the replacement value for the item, or a formula that can use the existing, matching item resulting in a new value.
For example, the formula can use \`SET_KEY\` function to update a property of a matching item to a new value.

Note that only first matching item is replaced; if multiple items matches the criteria, then only first one is changed.
If no matching item is found, then the original list is returned unchanged.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'function',
    title: 'Search formula',
    description: 'Formula to be evaluated for each item, deciding whether the item is the one to remove',
    parameters: [{
      name: 'item',
      title: 'Current item',
      description: 'The current item from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position of the current item in the list as an index number starting from 0',
      examples: [0, 1, 2],
    }],
    returnValue: {
      type: 'boolean',
      title: 'Whether item is excluded',
      description: 'Whether or not the item should be removed from the result',
    },
  }, {
    type: 'function',
    title: 'Replacement formula',
    description: 'A new item replacing the matching item, or a formula to be evaluated using the matching item for the replacement value',
    parameters: [{
      name: 'item',
      title: 'Matching item',
      description: 'The existing matching item found from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position in the list where the matching item was found and where the replacement item will be set',
      examples: [0, 1, 2],
    }],
    returnValue: {
      title: 'Replacement item',
      description: 'The new value to be set to the result array, replacing the matching item',
    },
  }],
  analyze: ([arrayParam, , replacementParam]) => {
    const arraySchema = arrayParam && arrayParam.schema;
    const replacementSchema = replacementParam && replacementParam.schema;
    // NOTE: Not using the parameter type directly, as it might contain enum or examples
    // that are no longer valid.
    const schema = { type: 'array' };
    const errors = [];
    if (arraySchema) {
      const arrayItemSchema = getArrayItemSchema(arraySchema) || {};
      const simpleArrayItemSchema = simplifySchema(arrayItemSchema, {});
      if (replacementParam) {
        const replacementOffset = replacementParam.offset;
        const replacementLength = replacementParam.length;
        const replacementErrors = getSchemaAssignmentErrors(
          replacementSchema, simpleArrayItemSchema, { tolerant: true },
        );
        errors.push(...replacementErrors.map(error => ({
          ...error,
          offset: replacementOffset,
          length: replacementLength,
        })));
      }
      schema.items = getUnionSchema([arrayItemSchema, replacementSchema]);
    }
    return { schema, errors };
  },
  execute,
  examples: [
    {
      expression: 'SET_ITEM(animals, item.name == "cat", { name: "horse", weight: 600 })',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'horse', weight: 600 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM(animals, item.name == "cat", SET_KEY(item, "weight", 23))',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'cat', weight: 23 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM(animals, index == 1, SET_KEY(item, "name", "horse"))',
      context: {
        animals: [
          { name: 'dog', weight: 123 },
          { name: 'cat', weight: 48 },
          { name: 'rat', weight: 10 },
        ],
      },
      result: [
        { name: 'dog', weight: 123 },
        { name: 'horse', weight: 48 },
        { name: 'rat', weight: 10 },
      ],
    },
    {
      expression: 'SET_ITEM<product>(products, product.name == "Swiss army knife", SET_KEY(product, "price", product.price * 2))',
      context: {
        products: [
          { name: 'Duct tape', price: 2.9 },
          { name: 'Swiss army knife', price: 23 },
          { name: 'Glue', price: 1.5 },
        ],
      },
      result: [
        { name: 'Duct tape', price: 2.9 },
        { name: 'Swiss army knife', price: 46 },
        { name: 'Glue', price: 1.5 },
      ],
    },
    {
      expression: 'SET_ITEM<letter, position>(["a", "b", "c", "d", "e"], position == 2, UPPERCASE(letter) + "!")',
      result: ['a', 'b', 'C!', 'd', 'e'],
    },
  ],
};
