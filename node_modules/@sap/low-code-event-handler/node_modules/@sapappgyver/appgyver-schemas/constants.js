const { detectStringFormats } = require('./formatting');
const { getUnionSchema } = require('./union');

/**
 * Returns a schema as explicit as possible for the given actual value.
 * @param {*} value value for which the schema is built
 */
function getConstantSchema(value) {
  const type = typeof value;
  const schema = { enum: [value], examples: [value] };
  if (value === null) {
    schema.type = 'null';
    return schema;
  }
  if (type === 'number' || type === 'boolean' || type === 'undefined') {
    schema.type = type;
    return schema;
  }
  // Auto-recognize string formats
  if (type === 'string') {
    const valueFormats = detectStringFormats(value);
    if (valueFormats.length > 1) {
      // Matches multiple formats
      schema.allOf = valueFormats.map((format) => ({ type, format }));
    } else {
      // Is a simple string
      schema.type = type;
      if (valueFormats.length) {
        // Matches exactly one format
        [schema.format] = valueFormats;
      }
    }
    return schema;
  }
  if (Array.isArray(value)) {
    schema.type = 'array';
    if (value.length) {
      schema.items = getUnionSchema(value.map((item) => getConstantSchema(item)));
    } else {
      // No items, so type is 'undefined' (which has a good assignability)
      schema.items = { type: 'undefined' };
    }
    return schema;
  }
  // Otherwise is an object
  const keys = Object.keys(value);
  schema.type = 'object';
  schema.properties = {};
  keys.forEach((key) => {
    schema.properties[key] = getConstantSchema(value[key]);
  });
  return schema;
}

module.exports.getConstantSchema = getConstantSchema;
