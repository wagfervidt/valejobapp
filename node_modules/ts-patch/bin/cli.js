#!/usr/bin/env node

"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.cliCommands = exports.cliOptions = void 0;
var minimist_1 = __importDefault(require("minimist"));
var chalk_1 = __importDefault(require("chalk"));
var strip_ansi_1 = __importDefault(require("strip-ansi"));
var actions = __importStar(require("../lib/actions"));
var system_1 = require("../lib/system");
var __1 = require("..");
exports.cliOptions = {
    silent: { short: 's', caption: 'Run silently' },
    global: { short: 'g', caption: 'Target global TypeScript installation' },
    verbose: { short: 'v', caption: 'Chat it up' },
    basedir: { short: 'd', paramCaption: '<dir>', caption: 'Base directory to resolve package from' },
    persist: {
        caption: 'Enable automatic persistence. (If TypeScript is updated/reinstalled, it will automatically re-patch)'
    },
    'no-persist': { caption: 'Disable automatic persistence.' },
    color: { inverse: true, caption: 'Strip ansi colours from output' }
};
exports.cliCommands = {
    install: { short: 'i', caption: "Installs ts-patch" },
    uninstall: { short: 'u', caption: 'Restores original typescript files' },
    check: {
        short: 'c',
        caption: "Check patch status (use with " + chalk_1.default.cyanBright('--basedir') + " to specify TS package location)"
    },
    patch: {
        short: void 0, paramCaption: '<module_file> | <glob>', caption: 'Patch specific module(s) ' + chalk_1.default.yellow('(Not recommended. Use install instead)')
    },
    unpatch: {
        short: void 0, paramCaption: '<module_file> | <glob>', caption: 'Un-patch specific module(s) ' + chalk_1.default.yellow('(Not recommended. Use uninstall instead)')
    },
    version: { short: 'v', caption: 'Show version' },
    help: { short: '/?', caption: 'Show help menu' },
};
// endregion
/* ********************************************************************************************************************
 * Menu
 * ********************************************************************************************************************/
// region Menu
var LINE_INDENT = '\r\n\t';
var COL_WIDTH = 45;
var formatLine = function (left, caption, paramCaption) {
    if (paramCaption === void 0) { paramCaption = ''; }
    var leftCol = left.filter(Boolean).join(chalk_1.default.blue(', ')) + ' ' + chalk_1.default.yellow(paramCaption);
    var dots = chalk_1.default.grey('.'.repeat(COL_WIDTH - strip_ansi_1.default(leftCol).length));
    return leftCol + " " + dots + " " + caption;
};
var menuText = LINE_INDENT + chalk_1.default.bold.blue('ts-patch [command] ') + chalk_1.default.blue('<options>') + '\r\n' + LINE_INDENT +
    // Commands
    Object
        .entries(exports.cliCommands)
        .map(function (_a) {
        var cmd = _a[0], _b = _a[1], short = _b.short, caption = _b.caption, paramCaption = _b.paramCaption;
        return formatLine([cmd, short], caption, paramCaption);
    })
        .join(LINE_INDENT) +
    // Options
    '\r\n' + LINE_INDENT + chalk_1.default.bold('Options') + LINE_INDENT +
    Object
        .entries(exports.cliOptions)
        .map(function (_a) {
        var long = _a[0], _b = _a[1], short = _b.short, inverse = _b.inverse, caption = _b.caption, paramCaption = _b.paramCaption;
        return formatLine([
            short && "" + chalk_1.default.cyanBright('-' + short),
            long && "" + chalk_1.default.cyanBright("" + (inverse ? '--no-' : '--') + long)
        ], caption, paramCaption);
    })
        .join(LINE_INDENT);
// endregion
/* ********************************************************************************************************************
 * App
 * ********************************************************************************************************************/
// region App
var instanceIsCLI = (require.main === module);
if (instanceIsCLI)
    run();
function run(argStr) {
    var args = minimist_1.default(instanceIsCLI ? process.argv.slice(2) : argStr.split(' '));
    var cmd = args._[0] ? args._[0].toLowerCase() : void 0;
    try {
        /* Select command by short or full code */
        if (cmd)
            cmd = (Object.keys(exports.cliCommands).includes(cmd)) ? cmd :
                (Object.entries(exports.cliCommands).find(function (_a) {
                    var n = _a[0], short = _a[1].short;
                    return n && (short == cmd);
                }) || [])[0];
        /* Parse options (convert short-code to long) */
        var opts = Object
            .entries(exports.cliOptions)
            .reduce(function (p, _a) {
            var _b, _c;
            var key = _a[0], short = _a[1].short;
            return (__assign(__assign(__assign({}, p), (args.hasOwnProperty(key) && (_b = {}, _b[key] = args[key], _b))), (short && args.hasOwnProperty(short) && (_c = {}, _c[key] = args[short], _c))));
        }, {});
        /* Handle special cases */
        if ((args.v) && (!cmd))
            cmd = 'version';
        if (args.h)
            cmd = 'help';
        if (args.colour !== undefined)
            opts.color = args.colour;
        /* Build & Handle options */
        system_1.parseOptions(__assign({ instanceIsCLI: instanceIsCLI }, opts));
        /* Handle commands */
        (function () {
            switch (cmd) {
                case 'help':
                    return system_1.Log(menuText, system_1.Log.system);
                case 'version':
                    var _a = __1.getTSPackage(system_1.appOptions.basedir), tsVersion = _a.version, packageDir = _a.packageDir;
                    return system_1.Log('\r\n' +
                        chalk_1.default.bold.blue('ts-patch:    ') + system_1.tspPackageJSON.version + '\r\n' +
                        chalk_1.default.bold.blue('typescript:  ') + tsVersion + chalk_1.default.gray("   [" + packageDir + "]"), system_1.Log.system);
                case 'install':
                    return actions.install();
                case 'uninstall':
                    return actions.uninstall();
                case 'patch':
                    return actions.patch(args._.slice(1).join(' '), { verbose: true });
                case 'unpatch':
                    return actions.unpatch(args._.slice(1).join(' '), { verbose: true });
                case 'check':
                    return actions.check();
                default:
                    return (args.persist === undefined) ?
                        system_1.Log('Invalid command. Try ts-patch /? for more info', system_1.Log.system) : {};
            }
        })();
        /* Handle persist option */
        if (args.persist !== undefined)
            (args.persist) ? actions.enablePersistence() : actions.disablePersistence();
    }
    catch (e) {
        system_1.Log([
            '!',
            chalk_1.default.bold.yellow(e.name && (e.name !== 'Error') ? "[" + e.name + "]: " : 'Error: ') + chalk_1.default.red(e.message)
        ], system_1.Log.system);
    }
    // Output for analysis by tests
    return (!instanceIsCLI) ? ({ cmd: cmd, args: args, options: system_1.appOptions }) : void 0;
}
exports.run = run;
// endregion
//# sourceMappingURL=cli.js.map