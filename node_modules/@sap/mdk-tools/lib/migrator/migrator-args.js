const commandLineArgs = require('command-line-args');
const path = require('path');
const fs = require('fs-extra');
const process = require('process');
const logger = require('../logger');

const optionDefinitions = [
    { name: 'project', type: String, multiple: false },
    { name: 'target-version', type: String, multiple: false },
    { name: 'preview', type: Boolean, multiple: false, defaultValue: false },
    { name: 'uncheck-script', type: Boolean, multiple: false, defaultValue: false },
    { name: 'log-file', type: String, multiple: false }
];

let options = commandLineArgs(optionDefinitions);

function getProjectFolder() {
    if (options['project']) {
        let fullPath = path.resolve(options['project']);
        if (fs.existsSync(fullPath)) {
            return fullPath;
        } else {
            console.error(`failed to find path ${fullPath}`);
            process.exit(-1);
        }

    } else {
        return process.cwd();
    }
}

function processArguments() {
    function getMissingRequiredArgumentMessage() {
        if (!options['project']) {
            return logger.getError('Missing project options');
        }

        return null;
    }

    const missingArgumentMessage = getMissingRequiredArgumentMessage();
    if (missingArgumentMessage) {
        console.error(missingArgumentMessage);
    }
    if (missingArgumentMessage) {//|| options.help
        const getUsage = require('command-line-usage');

        const sections = [
            {
                header: 'Migrate MDK Metadata Features',
                content: 'Migrate the MDK project to the specified schema version'
            },
            {
                header: 'Options',
                hide: ['uncheck-script'],
                optionList: [
                    {
                        name: 'project',
                        typeLabel: '{underline folder}',
                        description: 'The location of the mdk project.'
                    },
                    {
                        name: 'target-version',
                        type: Boolean,
                        description: 'By default the MDK project will be migrated to the latest schema version. Please use this option if you want to migrate files to the specific schema version (right now, we support only one target-version option 6.3).'
                    },
                    {
                        name: 'preview',
                        type: Boolean,
                        description: 'Only list migration files but not to do a real operation.'
                    },
                    {
                        name: 'uncheck-script',
                        type: Boolean,
                        description: 'If you do not want the script files are included for the migration, please use this option.'
                    },
                    {
                        name: 'log-file',
                        typeLabel: '{underline file}',
                        description: 'Output the logs to a file.'
                    }
                ]
            }
        ]
        const usage = getUsage(sections);
        console.log(usage);
        process.exit(-1);
    }
}

exports.project = function () {
    return getProjectFolder();
}

exports.targetVersion = function () {
    return options['target-version'];
}

exports.preview = function () {
    return !!options['preview'];
}

exports.uncheckScript = function () {
    return !!options['uncheck-script'];
}

exports.logFile = function () {
    if (options['log-file']) {
        return path.resolve(options['log-file']);
    }
    return "";
}

processArguments();