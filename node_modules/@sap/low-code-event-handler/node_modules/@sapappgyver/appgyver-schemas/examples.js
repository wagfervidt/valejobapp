"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExampleValues = void 0;
var formatting_1 = require("./formatting");
var utils_1 = require("./utils");
var array_1 = require("./utils/array");
var getStringSchemaExampleValues = function (schema, force) {
    var _a;
    if (schema.format && schema.format !== '*') {
        var format = formatting_1.formats[schema.format];
        if ((_a = format === null || format === void 0 ? void 0 : format.examples) === null || _a === void 0 ? void 0 : _a.length) {
            return format.examples;
        }
    }
    else if (force) {
        return [''];
    }
    return force ? [null] : [];
};
var getArraySchemaExampleValues = function (schema, force) {
    // Build example array
    if (schema.items) {
        var itemExamples = (0, utils_1.sortInterestingValues)(getExampleValues(schema.items));
        if (itemExamples.length) {
            return [(0, array_1.pickEvenly)(itemExamples, 10)];
        }
    }
    if (force) {
        // Return an empty array as an example
        return [[]];
    }
    return force ? [null] : [];
};
var getObjectSchemaExampleValues = function (schema, force) {
    if (!schema.properties)
        return force ? [null] : [];
    // Build example object(s)
    var propertyNames = Object.keys(schema.properties);
    if (!propertyNames.length) {
        return [{}];
    }
    var examplesByPropertyName = {};
    var propExampleCounts = [];
    propertyNames.forEach(function (propName) {
        var _a;
        var propExamples = getExampleValues((_a = schema.properties) === null || _a === void 0 ? void 0 : _a[propName], force);
        examplesByPropertyName[propName] = propExamples;
        propExampleCounts.push(propExamples.length);
    });
    // Find out the median number of example values from all properties
    var examplesCount = Math.max(1, (0, array_1.median)(propExampleCounts));
    var results = [];
    for (var exampleIdx = 0; exampleIdx < examplesCount; exampleIdx += 1) {
        var exampleObj = {};
        var exampleRating = 0;
        for (var propIdx = 0; propIdx < propertyNames.length; propIdx += 1) {
            var propertyName = propertyNames[propIdx];
            var propExamples = examplesByPropertyName[propertyName];
            if (propExamples.length) {
                var propExampleIdx = Math.floor((propExamples.length * exampleIdx) / examplesCount);
                var propertyExampleValue = propExamples[propExampleIdx];
                exampleObj[propertyName] = propertyExampleValue;
                if (propertyExampleValue != null && propertyExampleValue !== '') {
                    exampleRating += 1;
                }
            }
            else if (!schema.required || (0, array_1.includesValue)(schema.required, propertyName)) {
                // Could not get an example for a required property
                return [];
            }
        }
        results.push({ value: exampleObj, rating: exampleRating, index: exampleIdx });
    }
    // Sort example values so that ones with less null/undefined/blank property values are first
    results.sort(function (a, b) { return (b.rating - a.rating) || (a.index - b.index); });
    return results.map(function (result) { return result.value; });
};
/**
 * Returns an array of example values for the given schema.
 * If the schema defines `examples`, then those are returned.
 * Alternatively this builds an array of examples using the `enum`,
 * `default` and `format` properties of the schema. If no examples
 * can be found, then an empty array is returned.
 *
 * If the schema is a combination schema, then the example values
 * are collected from sub-schemas.
 *
 * Note that this function assumes immutability and it is not safe to mutate
 * the returned array of its contents! Please clone the returned value if
 * you are planning to mutate the results!
 *
 * If optional second parameter is true, then this attempts to return at least
 * one example value even if the schema does not include any information what
 * kind of values the schema could contain. For example, for "string" types it
 * includes a blank string, for "number" type it includes zero (0), and for "json"
 * type it includes an empty object.
 *
 * @param {object} schema schema definition object
 * @param {boolean} force whether to attempt to force-generate at least 1 value
 */
function getExampleValues(schema, force) {
    var _a, _b;
    if (!schema)
        return [];
    if ((_a = schema.examples) === null || _a === void 0 ? void 0 : _a.length)
        return schema.examples;
    if ((_b = schema.enum) === null || _b === void 0 ? void 0 : _b.length)
        return schema.enum;
    if (schema.default != null)
        return [schema.default];
    if (schema.anyOf) {
        // Collect combined example values from all sub-types
        return array_1.unionValues.apply(void 0, schema.anyOf.map(function (subSchema) { return getExampleValues(subSchema, force); }));
    }
    if (schema.allOf) {
        // Collect combined example values from all sub-types
        var intersection = array_1.intersectionValues.apply(void 0, schema.allOf.map(function (subSchema) { return getExampleValues(subSchema, force); }));
        if (!intersection.length && force)
            return [null];
        return intersection;
    }
    switch (schema.type) {
        case 'string': {
            return getStringSchemaExampleValues(schema, force);
        }
        case 'object': {
            return getObjectSchemaExampleValues(schema, force);
        }
        case 'array': {
            return getArraySchemaExampleValues(schema, force);
        }
        case 'json': {
            return force ? [{}] : [];
        }
        case 'number': {
            var minimum = schema.minimum, maximum = schema.maximum;
            if (maximum != null) {
                return [maximum];
            }
            if (minimum != null) {
                return [minimum];
            }
            return force ? [0] : [];
        }
        case 'null':
            return [null];
        case 'undefined':
            return [undefined];
        case 'boolean':
            return [true, false];
        default:
            return force ? [null] : [];
    }
}
exports.getExampleValues = getExampleValues;
