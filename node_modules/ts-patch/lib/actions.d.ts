import { TSModule } from './file-utils';
import { TSPOptions } from './system';
export declare const tsDependencies: string[];
export declare const SRC_FILES: string[];
export declare const BACKUP_DIRNAME = "lib-backup";
export declare const RESOURCES_PATH: string;
export declare const HOOKS_FILES: string[];
/**
 * Parse file, array of files, or glob of files and get TSModule info for each
 */
export declare function parseFiles(fileOrFilesOrGlob: string | string[], dir: string, includeSrc?: boolean): TSModule[] & {
    patched: TSModule[];
    unPatchable: TSModule[];
    canUpdateOrPatch: TSModule[];
    patchable: TSModule[];
};
/**
 * Set app options (superimposes opts onto defaultOptions)
 */
export declare const setOptions: (opts?: Partial<{
    logLevel: number;
    color: boolean;
    silent: boolean;
    verbose: boolean;
    basedir: string;
    instanceIsCLI: boolean;
}> | undefined) => {
    logLevel: number;
    color: boolean;
    silent: boolean;
    verbose: boolean;
    basedir: string;
    instanceIsCLI: boolean;
};
/**
 * Patch TypeScript modules
 */
export declare function install(opts?: Partial<TSPOptions>): boolean;
/**
 * Remove patches from TypeScript modules
 */
export declare function uninstall(opts?: Partial<TSPOptions>): boolean;
/**
 * Check if files can be patched
 */
export declare function check(fileOrFilesOrGlob?: string | string[], opts?: Partial<TSPOptions>): TSModule[] & {
    patched: TSModule[];
    unPatchable: TSModule[];
    canUpdateOrPatch: TSModule[];
    patchable: TSModule[];
};
/**
 * Patch a TypeScript module
 */
export declare function patch(fileOrFilesOrGlob: string | string[], opts?: Partial<TSPOptions>): boolean;
export declare function unpatch(fileOrFilesOrGlob: string | string[], opts?: Partial<TSPOptions>): boolean;
/**
 * Enable persistence hooks
 */
export declare function enablePersistence(opts?: Partial<TSPOptions>): void;
/**
 * Disable persistence hooks
 */
export declare function disablePersistence(opts?: Partial<TSPOptions>): void;
