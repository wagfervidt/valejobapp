const { VDB, DDB } = require('../../financial');

module.exports = ([cost, salvage, life, startPeriod, endPeriod, factor = 2, noSwitch = false]) => {
  const factorSaved = (factor === undefined) ? 2 : factor;
  const noSwitchSaved = (noSwitch === undefined) ? false : noSwitch;

  if (typeof cost === 'number' && Number.isFinite(cost)
    && typeof salvage === 'number' && Number.isFinite(salvage)
    && typeof life === 'number' && Number.isFinite(life)
    && typeof startPeriod === 'number' && Number.isFinite(startPeriod)
    && typeof endPeriod === 'number' && Number.isFinite(endPeriod)
    && typeof factorSaved === 'number' && Number.isFinite(factorSaved)
    && typeof noSwitchSaved === 'boolean') {
    if (cost < 0 || salvage < 0 || life <= 0 || startPeriod < 0 || endPeriod < 0 || factor <= 0) {
      return null;
    }
    if (cost < salvage || startPeriod > endPeriod || startPeriod > life || endPeriod > life) {
      return null;
    }
    let fVdb = 0;
    const fIntStart = Math.floor(startPeriod);
    const fIntEnd = Math.ceil(endPeriod);
    if (noSwitchSaved) {
      // eslint-disable-next-line no-plusplus
      for (let i = fIntStart + 1; i <= fIntEnd; i++) {
        let fTerm = DDB(cost, salvage, life, i, factor);
        if (i === fIntStart + 1) {
          fTerm *= (Math.min(endPeriod, fIntStart + 1) - startPeriod);
        } else if (i === fIntEnd) {
          fTerm *= (endPeriod + 1 - fIntEnd);
        }
        fVdb += fTerm;
      }
    } else {
      let fPart = 0;

      if (startPeriod > fIntStart) {
        const tempcost = cost - VDB(cost, salvage, life, life, fIntStart, factor);
        const tempVDB = VDB(tempcost, salvage, life, life - fIntStart, 1, factor);
        fPart += (startPeriod - fIntStart) * tempVDB;
      }

      if (endPeriod < fIntEnd) {
        const em1 = fIntEnd - 1;
        const tempcost = cost - VDB(cost, salvage, life, life, em1, factor);
        fPart += (fIntEnd - endPeriod) * VDB(tempcost, salvage, life, life - em1, 1, factor);
      }

      const tempcost = cost - VDB(cost, salvage, life, life, fIntStart, factor);
      fVdb = VDB(tempcost, salvage, life, life - fIntStart, fIntEnd - fIntStart, factor);
      fVdb -= fPart;
    }
    return fVdb;
  }
  return null;
};
