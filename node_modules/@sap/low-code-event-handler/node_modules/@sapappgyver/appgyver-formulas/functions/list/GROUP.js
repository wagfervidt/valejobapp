const execute = require('./GROUP.runtime');

module.exports = {
  name: 'GROUP',
  category: 'List',
  title: 'Groups items in a list',
  description: `Groups items in the given list using two formulas: one that defines the grouping criteria for each item, and one that creates the group items returned by this function.

First the grouping criteria formula is evaluated for each \`item\` in the list. All the items that evaluate to the equal _group key_ are grouped together.

Then the latter formula is evaluated for each _group_. You can use \`key\` in the formula to get the grouping key of the current group, and \`items\` to access all the items belonging to the current group.`,
  parameters: [{
    type: 'array',
    title: 'List',
    description: 'List of items to group',
    items: {
      $id: '#item', // Make this a generic type
    },
  }, {
    type: 'function',
    title: 'Group criteria',
    description: 'Formula that returns a group key for the current item',
    parameters: [{
      name: 'item',
      title: 'Current item',
      description: 'The current item from the original list',
      $ref: '#item', // Refers to the generic type
    }, {
      name: 'index',
      type: 'number',
      minimum: 0,
      title: 'Current index',
      description: 'The position of the current item in the list as an index number starting from 0',
      examples: [0, 1, 2],
    }],
    returnValue: {
      $id: '#key', // Make this a generic type
      title: 'Group key',
      description: 'Group key that determines to which group this item belongs',
      anyOf: [{
        type: 'string',
      }, {
        type: 'number',
      }, {
        type: 'boolean',
      }],
    },
  }, {
    type: 'function',
    title: 'Grouping formula',
    description: 'Formula that returns the final value for each "group" in the result list',
    parameters: [{
      name: 'key',
      title: 'Group key',
      description: 'The key for the current group',
      $ref: '#key', // Refers to the generic type
    }, {
      name: 'items',
      title: 'Grouped items',
      description: 'List of items from the original list that belong to the current group',
      type: 'array',
      items: {
        $ref: '#item',
      },
    }],
    returnValue: {
      title: 'Group',
      description: 'The value for this "group" to be added to the final list',
    },
  }],
  analyze: ([,, grouperItem]) => {
    const groupSchema = grouperItem && grouperItem.schema;
    return {
      schema: !groupSchema ? { type: 'array' } : {
        type: 'array',
        items: groupSchema,
      },
    };
  },
  execute,
  examples: [
    {
      expression: 'GROUP(allProducts, item.category, { category: key, products: items })',
      context: {
        allProducts: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Swiss army knife', category: 'Tools' },
          { name: 'Glue', category: 'Utility' },
        ],
      },
      result: [{
        category: 'Utility',
        products: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Glue', category: 'Utility' },
        ],
      }, {
        category: 'Tools',
        products: [
          { name: 'Swiss army knife', category: 'Tools' },
        ],
      }],
    },
    {
      expression: 'GROUP(allProducts, item.category, key + " category contains " + COUNT(items) + " product(s)")',
      context: {
        allProducts: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Swiss army knife', category: 'Tools' },
          { name: 'Glue', category: 'Utility' },
        ],
      },
      result: [
        'Utility category contains 2 product(s)',
        'Tools category contains 1 product(s)',
      ],
    },
    {
      expression: 'GROUP<product, index, category, products>(allProducts, product.category, { category: category, count: COUNT(products) })',
      context: {
        allProducts: [
          { name: 'Duct tape', category: 'Utility' },
          { name: 'Swiss army knife', category: 'Tools' },
          { name: 'Glue', category: 'Utility' },
        ],
      },
      result: [{
        category: 'Utility',
        count: 2,
      }, {
        category: 'Tools',
        count: 1,
      }],
    },
  ],
};
