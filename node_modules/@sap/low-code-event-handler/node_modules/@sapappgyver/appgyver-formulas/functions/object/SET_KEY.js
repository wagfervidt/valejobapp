const {
  getUnionSchema, simplifySchema, resolveObjectMemberAccessor,
  getSchemaAssignmentErrors, isSchemaAssignable,
} = require('@sapappgyver/appgyver-schemas');
const { unionValues } = require('@sapappgyver/appgyver-schemas/utils/array');
const execute = require('./SET_KEY.runtime');

module.exports = {
  name: 'SET_KEY',
  category: 'Object',
  title: 'Set a property of an object',
  description: 'Returns an object containing all the properties from the given object, with the given property key set to the given value. Any existing property under the given key is overridden.',
  parameters: [{
    type: 'object',
    title: 'Object',
    description: 'Object whose property will be set',
  }, {
    type: 'string',
    title: 'Property name',
    description: 'Name of the property from object to set',
  }, {
    title: 'Value',
    description: 'Any value',
  }],
  analyze: ([object, propNameParam, value], offset, parameterErrors) => {
    const objectSchema = object ? object.schema : { type: 'object' };
    const propSchema = (propNameParam && propNameParam.schema) || {};
    const valueSchema = value ? value.schema : { type: 'undefined' };
    const { properties, required } = objectSchema;
    const propertyNames = propSchema.enum;
    if (parameterErrors.length || !properties || !propertyNames || !propertyNames.length) {
      return { schema: { type: 'object' } };
    }
    const { schema: propertySchema } = resolveObjectMemberAccessor(objectSchema, propSchema);
    const requiredValueSchema = simplifySchema(propertySchema || {}, {});
    const assignmentErrors = isSchemaAssignable(requiredValueSchema, {
      anyOf: [{ type: 'null' }, { type: 'undefined' }],
    }) ? [] : getSchemaAssignmentErrors(valueSchema, requiredValueSchema);
    const errors = assignmentErrors.map(error => ({ ...error, offset: value.offset }));
    return {
      schema: getUnionSchema(propertyNames.map((propertyName) => {
        const schema = {
          ...objectSchema,
          type: 'object',
          properties: {
            ...properties,
            [propertyName]: valueSchema,
          },
        };
        if (required) {
          schema.required = unionValues(required, [propertyName]);
        }
        return schema;
      })),
      errors,
    };
  },
  execute,
  examples: [
    {
      expression: 'SET_KEY(obj, "a", "foo")',
      context: {
        obj: { a: 'A', b: 'B', c: 'C' },
      },
      result: { a: 'foo', b: 'B', c: 'C' },
    },
    {
      expression: 'SET_KEY(animal, "weight", 32)',
      context: {
        animal: {
          name: 'dog', weight: 123, active: false, children: 0,
        },
      },
      result: {
        name: 'dog', weight: 32, active: false, children: 0,
      },
    },
  ],
};
